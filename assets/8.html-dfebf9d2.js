const e=JSON.parse('{"key":"v-04b4d997","path":"/vue/%E9%AB%98%E7%BA%A7/8.html","title":"vuex源码的简单实现","lang":"zh-CN","frontmatter":{"date":"2022-06-12T00:00:00.000Z","category":["vue2"],"tag":["vue高级","vuex"],"description":"vuex源码的简单实现 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 vuex 什么情况下我应该使用 Vuex？ Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。 如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 store 模式就足够您所需了。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/vue/%E9%AB%98%E7%BA%A7/8.html"}],["meta",{"property":"og:title","content":"vuex源码的简单实现"}],["meta",{"property":"og:description","content":"vuex源码的简单实现 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 vuex 什么情况下我应该使用 Vuex？ Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。 如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 store 模式就足够您所需了。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-25T08:10:53.000Z"}],["meta",{"property":"article:author","content":"xiaokai"}],["meta",{"property":"article:tag","content":"vue高级"}],["meta",{"property":"article:tag","content":"vuex"}],["meta",{"property":"article:published_time","content":"2022-06-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-25T08:10:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vuex源码的简单实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-25T08:10:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xiaokai\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"什么情况下我应该使用 Vuex？","slug":"什么情况下我应该使用-vuex","link":"#什么情况下我应该使用-vuex","children":[]},{"level":2,"title":"使用步骤","slug":"使用步骤","link":"#使用步骤","children":[{"level":3,"title":"注册store","slug":"注册store","link":"#注册store","children":[]},{"level":3,"title":"state","slug":"state","link":"#state","children":[]},{"level":3,"title":"getter","slug":"getter","link":"#getter","children":[]},{"level":3,"title":"muations","slug":"muations","link":"#muations","children":[]},{"level":3,"title":"Action","slug":"action","link":"#action","children":[]},{"level":3,"title":"Module","slug":"module","link":"#module","children":[]}]},{"level":2,"title":"简单原理实现","slug":"简单原理实现","link":"#简单原理实现","children":[]}],"git":{"createdTime":1700899853000,"updatedTime":1700899853000,"contributors":[{"name":"xiaokai-liu","email":"1404197328@qq.com","commits":1}]},"readingTime":{"minutes":5.17,"words":1551},"filePathRelative":"vue/高级/8.md","localizedDate":"2022年6月12日","excerpt":"<h1> vuex源码的简单实现</h1>\\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\\n<figure><figcaption>vuex</figcaption></figure>\\n<h2> 什么情况下我应该使用 Vuex？</h2>\\n<p>Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。</p>\\n<p>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 store 模式就足够您所需了。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择</p>","autoDesc":true}');export{e as data};
