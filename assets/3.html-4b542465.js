import{_ as p,r as o,o as l,c,a as n,b as s,e,f as t}from"./app-0c97dc23.js";const i="/assets/single-58df34ad.png",r="/assets/priority-592b9165.png",u={},d=n("h1",{id:"react核心源码解析2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#react核心源码解析2","aria-hidden":"true"},"#"),s(" React核心源码解析2")],-1),k=n("h2",{id:"diff算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#diff算法","aria-hidden":"true"},"#"),s(" diff算法")],-1),v=n("p",null,"在render阶段，对于update的组件，他会将当前组件与该组件在上次更新时对应的Fiber节点⽐较（也就是俗称的Diff算法），将⽐较的结果⽣成新Fiber节点。",-1),m={href:"https://zh-hans.reactjs.org/docs/reconciliation.html#the-diffing-algorithm",target:"_blank",rel:"noopener noreferrer"},b=t(`<ol><li>不同类型的元素：React拆卸原有的树，⽣成新的树</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Counter</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Counter</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>a. 卸载时：<br> ⅰ. DOM节点销毁；<br> ⅱ. 执⾏componentWilUnmount()；<br> b. 新建时：<br> ⅰ. 执⾏UNSAFE_componentWillMount()，然后执⾏componentDidMount()；</p><ol start="2"><li>同一类型的元素</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>before<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stuff<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>after<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stuff<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value css language-css"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span></span></span></span> <span class="token attr-name">&#39;red&#39;,</span> <span class="token attr-name"><span class="token namespace">fontWeight:</span></span> <span class="token attr-name">&#39;bold&#39;}}</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value css language-css"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span></span></span></span> <span class="token attr-name">&#39;green&#39;,</span> <span class="token attr-name"><span class="token namespace">fontWeight:</span></span> <span class="token attr-name">&#39;bold&#39;}}</span><span class="token punctuation">&gt;</span></span>&lt;/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>a. 保留DOM节点，仅对⽐更新有改变的属性</p><ol start="3"><li>对⽐同类型的组件元素：</li></ol><p>a. 组件更新时，组件实例保持不变，保证state不变，更新组件的props以保证与新的元素⼀致，调⽤UNSAFE_componentWillReceiveProps()、UNSAFE_componentWillUpdate() 以及componentDidUpdate() ⽅法；</p><p>b. 调⽤render，执⾏diff<br> ⅰ. React 同时遍历两个⼦元素的列表；当产⽣差异时，⽣成⼀个 mutation</p><ol><li>在⼦元素列表结尾新增</li><li>在⼦元素列表头部新增</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">first</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">second</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">first</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">second</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">third</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> // 只需要新增元素即可
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Duke</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Villanova</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">// 销毁⼦元素列表，新建新的⼦元素列表，有性能问题</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Connecticut</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Duke</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Villanova</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>c. 使⽤keys：直接⽐较key值定位，所以key传index也会有性能问题</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2015<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Duke</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2016<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Villanova</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2014<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Connecticut</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2015<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Duke</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2016<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Villanova</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>d. 官⽹总结：</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li>该算法不会尝试匹配不同组件类型的⼦树。如果你发现你在两种不同类型的组件中切换，但输出⾮常相似的内容，建议把它们改成同⼀类型。在实践中，我们没有遇到这类问题；</li><li>Key 应该具有稳定，可预测，以及列表内唯⼀的特质。不稳定的 key（⽐如通过 Math.random() ⽣成的）会导致许多组件实例和 DOM 节点被不必要地重新创建，这可能导致性能下降和⼦组件中的状态丢失；</li></ol></div><p>结合render和commit阶段，⼀个DOM节点最多有4个节点与之相关：</p><ol><li>current Fiber。如果该DOM节点已在⻚⾯中，current Fiber代表该DOM节点对应的Fiber节点；</li><li>workInProgress Fiber。如果该DOM节点将在本次更新中渲染到⻚⾯中，workInProgress Fiber代表该DOM节点对应的Fiber节点；</li><li>DOM节点本身；</li><li>JSX对象。即ClassComponent的render⽅法的返回结果，或FunctionComponent的调⽤结果。JSX对象中包含描述DOM节点的信息；</li></ol><p>diff算法：对⽐1 4 ⽣成2</p><h3 id="diff的瓶颈及处理方法" tabindex="-1"><a class="header-anchor" href="#diff的瓶颈及处理方法" aria-hidden="true">#</a> Diff的瓶颈及处理⽅法</h3><p>diff操作本身也会带来性能损耗，React⽂档中提到，即使在最前沿的算法中，将前后两棵树完全⽐对的算法的复杂程度为 O(n^3)，其中n是树中元素的数量；如果在React中使⽤了该算法，那么展示1000个元素所需要执⾏的计算量将在⼗亿的量级范围。这个开销实在是太过⾼昂；</p><p>为了降低算法复杂度，React的diff会预设三个限制：</p><ol><li>只对同级元素进⾏diff。如果⼀个DOM节点在前后两次更新中跨越了层级，那么React会忽略；</li><li>两个不同类型的元素会产⽣出不同的树。如果元素由div变为p，React会销毁div及其⼦孙节点，并新建p及其⼦孙节点；</li><li>开发者可以通过 key prop来暗示哪些⼦元素在不同的渲染下能保持稳定；</li></ol><h3 id="diff是如何实现的" tabindex="-1"><a class="header-anchor" href="#diff是如何实现的" aria-hidden="true">#</a> Diff是如何实现的</h3><p>Diff的⼊⼝函数是reconcileChildFibers：会根据newChild（即JSX对象）类型调⽤不同的处理函数</p>`,25),g=n("br",null,null,-1),h={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L1280",target:"_blank",rel:"noopener noreferrer"},f=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 根据newChild类型选择不同diff函数处理</span>
<span class="token keyword">function</span> <span class="token function">reconcileChildFibers</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">returnFiber</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
    <span class="token literal-property property">currentFirstChild</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">newChild</span><span class="token operator">:</span> any<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> isObject <span class="token operator">=</span> <span class="token keyword">typeof</span> newChild <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> newChild <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// object类型，可能是 REACT_ELEMENT_TYPE 或 REACT_PORTAL_TYPE</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>newChild<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token operator">:</span>
            <span class="token comment">// 调⽤ reconcileSingleElement 处理</span>
            <span class="token comment">// // ...省略其他case</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> newChild <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> newChild <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调⽤ reconcileSingleTextNode 处理</span>
    <span class="token comment">// ...省略</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>newChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调⽤ reconcileChildrenArray 处理</span>
    <span class="token comment">// ...省略</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ⼀些其他情况调⽤处理函数</span>
    <span class="token comment">// ...省略</span>
    <span class="token comment">// 以上都没有命中，删除节点</span>
    <span class="token keyword">return</span> <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> currentFirstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据同级的节点数量将Diff分为两类：</p><ol><li>当newChild类型为object、number、string，代表同级只有⼀个节点</li><li>当newChild类型为Array，同级有多个节点</li></ol><h3 id="单节点diff" tabindex="-1"><a class="header-anchor" href="#单节点diff" aria-hidden="true">#</a> 单节点diff</h3><p>以类型为object为例，执⾏reconcileSingleElement</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> isObject <span class="token operator">=</span> <span class="token keyword">typeof</span> newChild <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> newChild <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>isObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对象类型，可能是 REACT_ELEMENT_TYPE 或 REACT_PORTAL_TYPE</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>newChild<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token operator">:</span>
        <span class="token comment">// 调⽤ reconcileSingleElement 处理</span>
        <span class="token comment">// ...其他case</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),y=n("br",null,null,-1),w={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L1141",target:"_blank",rel:"noopener noreferrer"},x=t('<p>执⾏流程：</p><figure><img src="'+i+`" alt="single" tabindex="0" loading="lazy"><figcaption>single</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">reconcileSingleElement</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">returnFiber</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
    <span class="token literal-property property">currentFirstChild</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">element</span><span class="token operator">:</span> ReactElement</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token punctuation">{</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> element<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
    <span class="token keyword">let</span> child <span class="token operator">=</span> currentFirstChild<span class="token punctuation">;</span>

    <span class="token comment">// ⾸先判断是否存在对应DOM节点</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 上⼀次更新存在DOM节点，接下来判断是否可复⽤</span>
        <span class="token comment">// ⾸先⽐较key是否相同</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// key相同，接下来⽐较type是否相同</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// ...省略case</span>

                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>elementType <span class="token operator">===</span> element<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// type相同则表示可以复⽤</span>
                        <span class="token comment">// 返回复⽤的fiber</span>
                        <span class="token keyword">return</span> existing<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token comment">// type不同则跳出switch</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 代码执⾏到这⾥代表：key相同但是type不同</span>
            <span class="token comment">// 将该fiber及其兄弟fiber标记为删除</span>
            <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// key不同，将该fiber标记为删除</span>
        <span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        child <span class="token operator">=</span> child<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建新Fiber，并返回 ...省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>先判断key是否相同，如果key相同则判断type是否相同，只有都相同时⼀个DOM节点才能复⽤；</li><li>删除逻辑：<br> a. 当child !== null且key相同且type不同时执⾏deleteRemainingChildren将child及其兄弟fiber都标记删除；<br> b. 当child !== null且key不同时仅将child标记删除；</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// current fiber</span>
ul <span class="token operator">&gt;</span> li li li
<span class="token comment">// JSX</span>
ul <span class="token operator">&gt;</span> p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要根据第⼀个li与p是否相同判断</p><ol><li>key相同type不同，当前fiber和后续sibling fiber删除；</li><li>key不同，type也不同，删除当前fiber，前往下⼀个sibling fiber；</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 更新前</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">a</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">// 更新后</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">a</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">// key为null，⼀致，但type不同，不能复⽤</span>
<span class="token comment">// 更新前</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">a</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">// 更新后</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ooo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">a</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">// key不同，不需要看type，不能复⽤</span>
<span class="token comment">// 更新前</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">a</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">// 更新后</span>
<span class="token operator">&lt;</span>p key<span class="token operator">=</span><span class="token string">&quot;ooo&quot;</span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">// key不同，不需要看type，不能复⽤</span>
<span class="token comment">// 更新前</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">a</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">// 更新后</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">b</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">// key type都相同，props中children不同，更新⼦元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多节点diff" tabindex="-1"><a class="header-anchor" href="#多节点diff" aria-hidden="true">#</a> 多节点diff</h3><p>对于多节点的functionComponent，reconcileChildFibers的newChild参数类型为Array，执⾏reconcileChildrenArray</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>newChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// 调⽤ reconcileChildrenArray 处理</span>
 <span class="token comment">// ...省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同级多个节点的diff，归纳为：</p><ol><li>节点更新</li><li>节点新增或减少</li><li>节点位置变化</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 更新前</span>
<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;0&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;before&quot;</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
<span class="token comment">// 更新后 情况1 —— 节点属性变化</span>
<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;0&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;after&quot;</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
<span class="token comment">// 更新后 情况2 —— 节点类型更新</span>
<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token string">&quot;0&quot;</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 更新前</span>
<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;0&quot;</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
<span class="token comment">// 更新后 情况1 —— 新增节点</span>
<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;0&quot;</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;2&quot;</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
<span class="token comment">// 更新后 情况2 —— 删除节点</span>
<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 更新前</span>
<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;0&quot;</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
<span class="token comment">// 更新后</span>
<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;0&quot;</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="diff思路" tabindex="-1"><a class="header-anchor" href="#diff思路" aria-hidden="true">#</a> diff思路</h4><ol><li>针对节点更新</li></ol><p>a. 新增：执⾏新增逻辑<br> b. 删除：执⾏删除逻辑<br> c. 更新：执⾏更新逻辑</p><p>前提：操作优先级⼀样，但实际开发中，React团队发现，相较于新增和删除，更新组件发⽣的频率更⾼。所以Diff会优先判断当前节点是否属于更新</p><p>Q：同级⽐较能否使⽤双指针算法提⾼遍历速度？</p><p>不可以<br> 待更新对象为JSX，其中newChildren为数组格式，但current fiber 是链表格式，同级的fiber节点是由sibling指针形成的单链表，不⽀持双指针遍历；</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>newChildren[0]与fiber⽐较，newChildren[1]与fiber.sibling⽐较,⽆法针对数组和链表进⾏⽐较，所以不可⾏</p></div><p>react团队提供的思路：2轮遍历</p><ol><li>处理 更新 的节点；</li><li>处理⾮ 更新 的节点；</li></ol><h4 id="第一轮遍历" tabindex="-1"><a class="header-anchor" href="#第一轮遍历" aria-hidden="true">#</a> 第⼀轮遍历</h4>`,26),j=n("br",null,null,-1),C={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L818",target:"_blank",rel:"noopener noreferrer"},R=t(`<ol><li>let i = 0，遍历newChildren，将newChildren[i]与oldFiber⽐较，判断DOM节点是否可复⽤；</li><li>如果可复⽤，i++，继续⽐较newChildren[i]与oldFiber.sibling，可以复⽤则继续遍历；</li><li>如果不可复⽤，分两种情况：<br> a. key不同导致不可复⽤，⽴即跳出整个遍历，第⼀轮遍历结束；<br> b. key相同type不同导致不可复⽤，会将oldFiber标记为DELETION，并继续遍历；</li><li>如果newChildren遍历完（即 i === newChildren.length - 1 ）或者oldFiber遍历完（即oldFiber.sibling === null），跳出遍历，第⼀轮遍历结束；</li></ol><p>其中，3 4可以完成当前遍历</p><p>3：此时newChildren没有遍历完，oldFiber也没有遍历完</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 更新前</span>
<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;0&quot;</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;2&quot;</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>

<span class="token comment">// 更新后</span>
<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;0&quot;</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;2&quot;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token comment">// 第⼀个节点可复⽤，遍历到key === 2的节点发现key改变，不可复⽤</span>
<span class="token comment">// 跳出遍历，等待第⼆轮遍历处理</span>
<span class="token comment">// oldFiber: key === 1、key === 2未遍历</span>
<span class="token comment">// newChildren剩下key === 2、key === 1未遍历</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4：可能newChildren遍历完，或oldFiber遍历完，或他们同时遍历完</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 更新前</span>
<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;0&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;a&quot;</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;b&quot;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>

<span class="token comment">// 更新后 情况1 —— newChildren与oldFiber都遍历完</span>
<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;0&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;aa&quot;</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;bb&quot;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>

<span class="token comment">// 更新后 情况2 —— newChildren没遍历完，oldFiber遍历完</span>
<span class="token comment">// newChildren剩下 key===&quot;2&quot; 未遍历</span>
<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;0&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;aa&quot;</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;bb&quot;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;2&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;cc&quot;</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>

<span class="token comment">// 更新后 情况3 —— newChildren遍历完，oldFiber没遍历完</span>
<span class="token comment">// oldFiber剩下 key===&quot;1&quot; 未遍历</span>
<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">&quot;0&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;aa&quot;</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第二轮遍历" tabindex="-1"><a class="header-anchor" href="#第二轮遍历" aria-hidden="true">#</a> 第⼆轮遍历</h4><ol><li>newChildren 和 oldFiber 同时遍历完</li></ol><p>不需要第⼆轮的遍历，直接进⾏ update，diff结束；</p><ol start="2"><li>newChildren没遍历完，oldFiber遍历完</li></ol><p>已有的DOM节点都对⽐结束，这时还有新加⼊的节点，意味着本次更新有新节点插⼊，我们只需要遍历剩下的newChildren为⽣成的workInProgress fiber依次标记Placement；</p>`,11),S=n("br",null,null,-1),_={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L869",target:"_blank",rel:"noopener noreferrer"},q=t(`<ol start="3"><li>newChildren遍历完，oldFiber没遍历完</li></ol><p>本次更新⽐之前的节点数量少，有节点被删除了。所以需要遍历剩下的oldFiber，依次标记Deletion；</p><ol start="4"><li>newChildren与oldFiber都没遍历完</li></ol><p>意味着有节点更新了位置</p><h4 id="如何处理更新后的节点" tabindex="-1"><a class="header-anchor" href="#如何处理更新后的节点" aria-hidden="true">#</a> 如何处理更新后的节点</h4><p>由于有节点改变了位置，所以不能再⽤位置索引i对⽐前后的节点，那么如何才能将同⼀个节点在两次更新中对应上呢--key</p><p>为了快速的找到key对应的oldFiber，我们将所有还未处理的oldFiber存⼊以key为key，oldFiber为value的Map中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> existingChildren <span class="token operator">=</span> <span class="token function">mapRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> oldFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来遍历剩余的newChildren，通过newChildren[i].key就能在existingChildren中找到key相同的oldFiber</p><h4 id="标记节点是否移动" tabindex="-1"><a class="header-anchor" href="#标记节点是否移动" aria-hidden="true">#</a> 标记节点是否移动</h4><p>如何判断节点是否移动？参照物是什么？</p><p>我们的参照物是：最后⼀个可复⽤的节点在oldFiber中的位置索引（⽤变量lastPlacedIndex表示）。</p><p>本次更新中节点是按newChildren的顺序排列。在遍历newChildren过程中，每个遍历到的可复⽤节点⼀定是当前遍历到的所有可复⽤节点中最靠右的那个，即⼀定在lastPlacedIndex对应的可复⽤的节点在本次更新中位置的后⾯；</p><p>所以只需要⽐较遍历到的可复⽤节点在上次更新时是否也在lastPlacedIndex对应的oldFiber后⾯，就能知道两次更新中这两个节点的相对位置改变没有；</p><p>我们⽤变量oldIndex表示遍历到的可复⽤节点在oldFiber中的位置索引。如果oldIndex &lt; lastPlacedIndex，代表本次更新该节点需要向右移动；</p><p>lastPlacedIndex初始为0，每遍历⼀个可复⽤的节点，如果oldIndex &gt;= lastPlacedIndex，则lastPlacedIndex = oldIndex；</p><h4 id="demo" tabindex="-1"><a class="header-anchor" href="#demo" aria-hidden="true">#</a> demo</h4><p>每个字⺟代表⼀个节点，字⺟的值代表节点的key</p><p>demo 1</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 之前
abcd
// 之后
acdb
===第⼀轮遍历开始===
a（之后）vs a（之前）
key不变，可复⽤
此时 a 对应的oldFiber（之前的a）在之前的数组（abcd）中索引为0
所以 lastPlacedIndex = 0;
继续第⼀轮遍历...
c（之后）vs b（之前）
key改变，不能复⽤，跳出第⼀轮遍历
此时 lastPlacedIndex === 0;
===第⼀轮遍历结束===
===第⼆轮遍历开始===
newChildren === cdb，没⽤完，不需要执⾏删除旧节点
oldFiber === bcd，没⽤完，不需要执⾏插⼊新节点
将剩余oldFiber（bcd）保存为map
// 当前oldFiber：bcd
// 当前newChildren：cdb
继续遍历剩余newChildren
key === c 在 oldFiber中存在
const oldIndex = c（之前）.index;
此时 oldIndex === 2; // 之前节点为 abcd，所以c.index === 2
⽐较 oldIndex 与 lastPlacedIndex;
如果 oldIndex &gt;= lastPlacedIndex 代表该可复⽤节点不需要移动
并将 lastPlacedIndex = oldIndex;
如果 oldIndex &lt; lastplacedIndex 该可复⽤节点之前插⼊的位置索引⼩于这次更新需要插⼊
的位置索引，代表该节点需要向右移动
在例⼦中，oldIndex 2 &gt; lastPlacedIndex 0，
则 lastPlacedIndex = 2;
c节点位置不变
继续遍历剩余newChildren

// 当前oldFiber：bd
// 当前newChildren：db
key === d 在 oldFiber中存在
const oldIndex = d（之前）.index;
oldIndex 3 &gt; lastPlacedIndex 2 // 之前节点为 abcd，所以d.index === 3
则 lastPlacedIndex = 3;
d节点位置不变
继续遍历剩余newChildren
// 当前oldFiber：b
// 当前newChildren：b
key === b 在 oldFiber中存在
const oldIndex = b（之前）.index;
oldIndex 1 &lt; lastPlacedIndex 3 // 之前节点为 abcd，所以b.index === 1
则 b节点需要向右移动
===第⼆轮遍历结束===
最终acd 3个节点都没有移动，b节点被标记为移动
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>demo 2</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 之前
abcd
// 之后
dabc
===第⼀轮遍历开始===
d（之后）vs a（之前）
key改变，不能复⽤，跳出遍历
===第⼀轮遍历结束===
===第⼆轮遍历开始===
newChildren === dabc，没⽤完，不需要执⾏删除旧节点
oldFiber === abcd，没⽤完，不需要执⾏插⼊新节点
将剩余oldFiber（abcd）保存为map
继续遍历剩余newChildren
// 当前oldFiber：abcd
// 当前newChildren dabc
key === d 在 oldFiber中存在
const oldIndex = d（之前）.index;
此时 oldIndex === 3; // 之前节点为 abcd，所以d.index === 3
⽐较 oldIndex 与 lastPlacedIndex;
oldIndex 3 &gt; lastPlacedIndex 0
则 lastPlacedIndex = 3;
d节点位置不变
继续遍历剩余newChildren
// 当前oldFiber：abc
// 当前newChildren abc
key === a 在 oldFiber中存在
const oldIndex = a（之前）.index; // 之前节点为 abcd，所以a.index === 0
此时 oldIndex === 0;
⽐较 oldIndex 与 lastPlacedIndex;
oldIndex 0 &lt; lastPlacedIndex 3
则 a节点需要向右移动
继续遍历剩余newChildren
// 当前oldFiber：bc
// 当前newChildren bc
key === b 在 oldFiber中存在
const oldIndex = b（之前）.index; // 之前节点为 abcd，所以b.index === 1
此时 oldIndex === 1;
⽐较 oldIndex 与 lastPlacedIndex;
oldIndex 1 &lt; lastPlacedIndex 3
则 b节点需要向右移动
继续遍历剩余newChildren
// 当前oldFiber：c
// 当前newChildren c
key === c 在 oldFiber中存在
const oldIndex = c（之前）.index; // 之前节点为 abcd，所以c.index === 2
此时 oldIndex === 2;
⽐较 oldIndex 与 lastPlacedIndex;
oldIndex 2 &lt; lastPlacedIndex 3
则 c节点需要向右移动
===第⼆轮遍历结束===
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，尽量减少节点从后⾯移动到前⾯的操作</p><ol><li>abcd -&gt; acdb：b移动到最右边</li><li>abcd -&gt; dabc：abc移动到最右边</li></ol><h2 id="状态更新" tabindex="-1"><a class="header-anchor" href="#状态更新" aria-hidden="true">#</a> 状态更新</h2><h3 id="概览" tabindex="-1"><a class="header-anchor" href="#概览" aria-hidden="true">#</a> 概览</h3><p>梳理下⼏个关键的节点：</p><ol><li>render阶段的开始<br> 开始于 performSyncWorkOnRoot 或 performConcurrentWorkOnRoot ⽅法的调⽤。这取决于本次更新是同步更新还是异步更新，render结束完后会进⼊commit</li><li>commit阶段的开始<br> 开始于 commitRoot ⽅法的调⽤。其中rootFiber会作为传参<br> 此时，状态为</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>触发状态更新（根据场景调⽤不同⽅法）
 |
 |
 v
 ？
 |
 |
 v
render阶段（\`performSyncWorkOnRoot\` 或 \`performConcurrentWorkOnRoot\`）
 |
 |
 v
commit阶段（\`commitRoot\`）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建update对象" tabindex="-1"><a class="header-anchor" href="#创建update对象" aria-hidden="true">#</a> 创建update对象</h3><p>在react⾥，触发状态更新的操作包括：</p><ul><li>ReactDOM.render</li><li>this.setState</li><li>this.forceUpdate</li><li>useState</li><li>useReducer</li></ul><p>Q：如何在调⽤场景不同的情况下，接⼊同⼀套状态管理机制？<br> 在每次状态更新，都会创建保存⼀个更新状态相关的对象，称为Update，在render的beginwork中会根据Update得到新的state</p><h3 id="从fiber到root" tabindex="-1"><a class="header-anchor" href="#从fiber到root" aria-hidden="true">#</a> 从fiber到root</h3><p>render阶段是从rootFiber开始向下遍历。那么如何从触发状态更新的fiber得到rootFiber呢？</p><p>调⽤markUpdateLaneFromFiberToRoot⽅法。</p>`,36),F=n("br",null,null,-1),I={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L636",target:"_blank",rel:"noopener noreferrer"},U=n("p",null,"该⽅法做的⼯作可以概括为：从触发状态更新的fiber⼀直向上遍历到rootFiber，并返回rootFiber。",-1),P=n("h3",{id:"调度更新",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#调度更新","aria-hidden":"true"},"#"),s(" 调度更新")],-1),L=n("p",null,[s("现在有⼀个rootFiber，该rootFiber对应的Fiber树中某个Fiber节点包含⼀个Update。"),n("br"),s(" 接下来通知Scheduler根据更新的优先级，决定以同步还是异步的⽅式调度本次更新。"),n("br"),s(" 这⾥调⽤的⽅法是ensureRootIsScheduled")],-1),E=n("br",null,null,-1),D={href:"https://github.com/facebook/react/blob/b6df4417c79c11cfb44f965fab55b573882b1d54/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L602",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>ensureRootIsScheduled核⼼代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>newCallbackPriority <span class="token operator">===</span> SyncLanePriority<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 任务已经过期，需要同步执⾏render阶段</span>
    newCallbackNode <span class="token operator">=</span> <span class="token function">scheduleSyncCallback</span><span class="token punctuation">(</span>
        <span class="token function">performSyncWorkOnRoot</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据任务优先级异步执⾏render阶段</span>
    <span class="token keyword">var</span> schedulerPriorityLevel <span class="token operator">=</span> <span class="token function">lanePriorityToSchedulerPriority</span><span class="token punctuation">(</span>
        newCallbackPriority
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    newCallbackNode <span class="token operator">=</span> <span class="token function">scheduleCallback</span><span class="token punctuation">(</span>
        schedulerPriorityLevel<span class="token punctuation">,</span>
        <span class="token function">performConcurrentWorkOnRoot</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⾄此，状态更新的流程已经通了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>触发状态更新（根据场景调⽤不同⽅法）
 |
 |
 v
创建Update对象（后⾯详解）
 |
 |
 v
从fiber到root（\`markUpdateLaneFromFiberToRoot\`）
 |
 |
 v
调度更新（\`ensureRootIsScheduled\`）
 |
 |
 v
render阶段（\`performSyncWorkOnRoot\` 或 \`performConcurrentWorkOnRoot\`）
 |
 |
 v
commit阶段（\`commitRoot\`）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> Update</h3><p>通过代码版本控制类⽐</p><ol><li>同步更新</li></ol><p>在没有代码版本控制前，我们在代码中逐步叠加功能。⼀切看起来井然有序，直到我们遇到了⼀个紧急线上bug（红⾊节点）</p><p>如果要修改，需要先将之前的代码提交；<br> 所有通过ReactDOM.render创建的应⽤都是通过类似的⽅式更新状态，没有优先级，⾼优先级需要排在其他更新的后⾯</p><ol start="2"><li>并发更新</li></ol><p>如果有了代码版本控制，需要发布urgent变更，暂存当前已有的修改，在master上直接修复</p><p>修复后使⽤ git rebase 和分⽀连接，当前开发的分⽀是基于修复bug的最新的master分⽀</p><p>在React中，通过ReactDOM.createBlockingRoot和ReactDOM.createRoot创建的应⽤会采⽤并发的⽅式更新状态；<br> ⾼优更新（红⾊节点）中断正在进⾏中的低优更新（蓝⾊节点），先完成render - commit流程；<br> 待⾼优更新完成后，低优更新基于⾼优更新的结果重新更新；</p><h4 id="update的分类" tabindex="-1"><a class="header-anchor" href="#update的分类" aria-hidden="true">#</a> update的分类</h4><p>触发⽅法 组件<br> ReactDOM.render HostRoot<br> this.setState ClassComponent<br> this.forceUpdate ClassComponent<br> useState FunctionComponent<br> useReducer FunctionComponent</p><table><thead><tr><th>触发方法</th><th>组件</th></tr></thead><tbody><tr><td>ReactDOM.render</td><td>HostRoot</td></tr><tr><td>this.setState</td><td>ClassComponent</td></tr><tr><td>this.forceUpdate</td><td>ClassComponent</td></tr><tr><td>useState</td><td>FunctionComponent</td></tr><tr><td>useReducer</td><td>FunctionComponent</td></tr></tbody></table><p>共有三种组件⽀持Update：HostRoot 、ClassComponent、FunctionComponent，其中，ClassComponent与HostRoot共⽤⼀套Update结构，FunctionComponent单独使⽤⼀种Update结构</p><p>虽然他们的结构不同，但是⼯作机制与⼯作流程⼤体相同。在本节我们介绍前⼀种Update，FunctionComponent对应的Update在后⾯讲解</p><h4 id="update结构" tabindex="-1"><a class="header-anchor" href="#update结构" aria-hidden="true">#</a> Update结构</h4><p>ClassComponent与HostRoot（即rootFiber.tag对应类型）共⽤同⼀种Update结构</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">update</span><span class="token operator">:</span> Update<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    eventTime<span class="token punctuation">,</span>
    lane<span class="token punctuation">,</span>
    suspenseConfig<span class="token punctuation">,</span>
    <span class="token literal-property property">tag</span><span class="token operator">:</span> UpdateState<span class="token punctuation">,</span>
    <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">callback</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>eventTime：任务时间，通过performance.now()获取的毫秒数；</li><li>lane：优先级相关字段；</li><li>suspenseConfig：Suspense相关；</li><li>tag：更新的类型，包括UpdateState | ReplaceState | ForceUpdate | CaptureUpdate；</li><li>payload：更新挂载的数据，不同类型组件挂载的数据不同。对于ClassComponent，payload为</li><li>this.setState的第⼀个传参。对于HostRoot，payload为ReactDOM.render的第⼀个传参；</li><li>callback：commit layout中⽀持的回调函数。</li><li>next：与其他Update连接形成链表。</li></ul><h4 id="update与fiber联系" tabindex="-1"><a class="header-anchor" href="#update与fiber联系" aria-hidden="true">#</a> Update与Fiber联系</h4><p>Fiber节点组成Fiber树，⻚⾯中最多同时存在两棵Fiber树：</p><ul><li>代表当前⻚⾯状态的current Fiber树</li><li>代表正在render阶段的workInProgress Fiber树<br> 类似Fiber节点组成Fiber树，Fiber节点上的多个Update会组成链表并被包含在fiber.updateQueue中。</li></ul><p>Q：什么情况下，⼀个Fiber节点会有多个Update</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Fiber节点最多同时存在两个updateQueue：<br> current fiber保存的updateQueue即current updateQueue<br> workInProgress fiber保存的updateQueue即workInProgress updateQueue</p><p>在commit阶段完成⻚⾯渲染后，workInProgress Fiber树变为current Fiber树，workInProgress Fiber树内Fiber节点的updateQueue就变成current updateQueue</p><h4 id="updatequeue" tabindex="-1"><a class="header-anchor" href="#updatequeue" aria-hidden="true">#</a> updateQueue</h4><p>updateQueue有三种类型，其中针对HostComponent的类型在completeWork⾥讲过。<br> 剩下两种类型和Update的两种类型对应<br> ClassComponent与HostRoot使⽤的UpdateQueue结构如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">queue</span><span class="token operator">:</span> UpdateQueue<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">baseState</span><span class="token operator">:</span> fiber<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span>
    <span class="token literal-property property">firstBaseUpdate</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lastBaseUpdate</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">effects</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>baseState：本次更新前该Fiber节点的state，Update基于该state计算更新后的state，可以将baseState类⽐⼼智模型中的master分⽀；</li><li>firstBaseUpdate与lastBaseUpdate：本次更新前该Fiber节点已保存的Update。以链表形式存在，链表头为firstBaseUpdate，链表尾为lastBaseUpdate。之所以在更新产⽣前该Fiber节点内就存在Update，是由于某些Update优先级较低所以在上次render阶段由Update计算state时被跳过，可以将baseUpdate类⽐⼼智模型中执⾏git rebase基于的commit（节点D）；</li><li>shared.pending：触发更新时，产⽣的Update会保存在shared.pending中形成单向环状链表。当由Update计算state时这个环会被剪开并连接在lastBaseUpdate后⾯，可以将shared.pending类⽐⼼智模型中本次需要提交的commit（节点ABC）。</li><li>effects：数组。保存update.callback !== null的Update；</li></ul><h4 id="demo-1" tabindex="-1"><a class="header-anchor" href="#demo-1" aria-hidden="true">#</a> demo</h4><p>假设有⼀个fiber刚经历commit阶段完成渲染。<br> 该fiber上有两个由于优先级过低所以在上次的render阶段并没有处理的Update。他们会成为下次更新的baseUpdate。</p><p>我们称其为u1和u2，其中u1.next === u2。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fiber<span class="token punctuation">.</span>updateQueue<span class="token punctuation">.</span>firstBaseUpdate <span class="token operator">===</span> u1<span class="token punctuation">;</span>
fiber<span class="token punctuation">.</span>updateQueue<span class="token punctuation">.</span>lastBaseUpdate <span class="token operator">===</span> u2<span class="token punctuation">;</span>
u1<span class="token punctuation">.</span>next <span class="token operator">===</span> u2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们⽤--&gt;表示链表的指向：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fiber<span class="token punctuation">.</span>updateQueue<span class="token punctuation">.</span>baseUpdate<span class="token operator">:</span> u1 <span class="token operator">--</span><span class="token operator">&gt;</span> u2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我们在fiber上触发两次状态更新，这会先后产⽣两个新的Update，我们称为u3和u4。每个 update 都会插⼊到 updateQueue 队列上<br> 当插⼊u3后：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fiber<span class="token punctuation">.</span>updateQueue<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>pending <span class="token operator">===</span> u3<span class="token punctuation">;</span>
u3<span class="token punctuation">.</span>next <span class="token operator">===</span> u3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>shared.pending的环状链表，⽤图表示为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fiber<span class="token punctuation">.</span>updateQueue<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>pending<span class="token operator">:</span> u3 ─────┐
                                    <span class="token operator">^</span>     <span class="token operator">|</span>

                                    └──────┘
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着插⼊u4之后：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fiber<span class="token punctuation">.</span>updateQueue<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>pending <span class="token operator">=</span> u4<span class="token punctuation">;</span>
u4<span class="token punctuation">.</span>next <span class="token operator">===</span> u3<span class="token punctuation">;</span>
u3<span class="token punctuation">.</span>next <span class="token operator">===</span> u4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>shared.pending是环状链表，⽤图表示为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fiber<span class="token punctuation">.</span>updateQueue<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>pending<span class="token operator">:</span> u4 ──<span class="token operator">&gt;</span> u3
                                    <span class="token operator">^</span>      <span class="token operator">|</span>

                                    └──────┘
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>shared.pending 会保证始终指向最后⼀个插⼊的update<br> 更新调度完成后进⼊render阶段<br> 此时shared.pending的环被剪开并连接在updateQueue.lastBaseUpdate后⾯：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fiber<span class="token punctuation">.</span>updateQueue<span class="token punctuation">.</span>baseUpdate<span class="token operator">:</span> u1 <span class="token operator">--</span><span class="token operator">&gt;</span> u2 <span class="token operator">--</span><span class="token operator">&gt;</span> u3 <span class="token operator">--</span><span class="token operator">&gt;</span> u4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来遍历updateQueue.baseUpdate链表，以fiber.updateQueue.baseState为初始state，依次与遍历到的每个Update计算并产⽣新的state；</p><p>在遍历时如果有优先级低的Update会被跳过；<br> 当遍历完成后获得的state，就是该Fiber节点在本次更新的state</p><p>state的变化在render阶段产⽣与上次更新不同的JSX对象，通过Diff算法产⽣effectTag，在commit阶段渲染在⻚⾯上，同时，渲染完成后workInProgress Fiber树变为current Fiber树，整个更新流程结束。</p><h2 id="深入理解优先级" tabindex="-1"><a class="header-anchor" href="#深入理解优先级" aria-hidden="true">#</a> 深入理解优先级</h2><h3 id="什么是优先级" tabindex="-1"><a class="header-anchor" href="#什么是优先级" aria-hidden="true">#</a> 什么是优先级</h3><p>状态更新由⽤户交互产⽣，⽤户⼼⾥对交互执⾏顺序有个预期。React根据⼈机交互研究的结果中⽤户对交互的预期顺序为交互产⽣的状态更新赋予不同优先级</p><ul><li>⽣命周期⽅法：同步执⾏；</li><li>受控的⽤户输⼊：⽐如输⼊框内输⼊⽂字，同步执⾏；</li><li>交互事件：⽐如动画，⾼优先级执⾏；</li><li>其他：⽐如数据请求，低优先级执⾏；</li></ul><h3 id="如何调度优先级" tabindex="-1"><a class="header-anchor" href="#如何调度优先级" aria-hidden="true">#</a> 如何调度优先级</h3><p>React会调⽤Scheduler提供的⽅法runWithPriority，该⽅法接收⼀个优先级常量与⼀个回调函数作为参数。回调函数会以优先级⾼低为顺序排列在⼀个定时器中并在合适的时间触发。</p>`,58),H=n("br",null,null,-1),M={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/scheduler/src/Scheduler.js#L217",target:"_blank",rel:"noopener noreferrer"},O=n("br",null,null,-1),A={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/scheduler/src/SchedulerPriorities.js",target:"_blank",rel:"noopener noreferrer"},N=t('<h3 id="demo-2" tabindex="-1"><a class="header-anchor" href="#demo-2" aria-hidden="true">#</a> demo</h3><figure><img src="'+r+`" alt="priority" tabindex="0" loading="lazy"><figcaption>priority</figcaption></figure><p>以上有两个Update。我们将“关闭⿊夜模式”产⽣的Update称为u1，输⼊字⺟“I”产⽣的Update称为u2其中u1先触发并进⼊render阶段。其优先级较低，执⾏时间较⻓。此时：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fiber<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">baseState</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">blackTheme</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;H&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">firstBaseUpdate</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lastBaseUpdate</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">pending</span><span class="token operator">:</span> u1
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">effects</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在u1完成render阶段前⽤户通过键盘输⼊字⺟“I”，产⽣了u2。u2属于受控的⽤户输⼊，优先级⾼于u1，于是中断u1产⽣的render阶段。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fiber<span class="token punctuation">.</span>updateQueue<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>pending <span class="token operator">===</span> u2 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span> u1
                                    <span class="token operator">^</span>        <span class="token operator">|</span>
                                    <span class="token operator">|</span>________<span class="token operator">|</span>
<span class="token comment">// 即</span>
u2<span class="token punctuation">.</span>next <span class="token operator">===</span> u1<span class="token punctuation">;</span>
u1<span class="token punctuation">.</span>next <span class="token operator">===</span> u2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中u2优先级⾼于u1。<br> 接下来进⼊u2产⽣的render阶段。<br> 在 processUpdateQueue ⽅法中，shared.pending环状链表会被剪开并拼接在baseUpdate后⾯。需要明确⼀点，shared.pending指向最后⼀个pending的update，所以实际执⾏时update的顺序为：<br> u1 -- u2</p><p>接下来遍历baseUpdate，处理优先级合适的Update（这⼀次处理的是更⾼优的u2）；<br> 由于u2不是baseUpdate中的第⼀个update，在其之前的u1由于优先级不够被跳过；<br> update之间可能有依赖关系，所以被跳过的update及其后⾯所有update会成为下次更新的baseUpdate。（即u1 -- u2）;<br> 最终u2完成render - commit阶段；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fiber<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">baseState</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">blackTheme</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;HI&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">firstBaseUpdate</span><span class="token operator">:</span> u1<span class="token punctuation">,</span>
    <span class="token literal-property property">lastBaseUpdate</span><span class="token operator">:</span> u2
    <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">effects</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在commit阶段结尾会再调度⼀次更新。在该次更新中会基于baseState中firstBaseUpdate保存的u1，开启⼀次新的render阶段。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fiber<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">baseState</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">blackTheme</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;HI&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">firstBaseUpdate</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lastBaseUpdate</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">effects</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，u2执⾏了2次，相对应的render阶段的⽣命周期 componentWillXXX也会执⾏2次，这就是为什么这些⽣命周期会被标记为unsafe_；</p><p>Q：render阶段可能会被中断，如何保证 updateQueue 中的Update不会丢失？</p><p>在render阶段，shared.pending的环被剪开并连接在updateQueue.lastBaseUpdate后⾯。实际上shared.pending会被同时连接在workInProgress updateQueue.lastBaseUpdate与currentupdateQueue.lastBaseUpdate后⾯。<br> 当render阶段被中断后重新开始时，会基于current updateQueue克隆出workInProgressupdateQueue。由于current updateQueue.lastBaseUpdate已经保存了上⼀次的Update，所以不会丢失<br> 当commit阶段完成渲染，由于workInProgress updateQueue.lastBaseUpdate中保存了上⼀次的Update，所以 workInProgress Fiber树变成current Fiber树后也不会造成Update丢失</p><p>Q：如何保证状态依赖的连续性？</p><p>当某个Update由于优先级低⽽被跳过时，保存在baseUpdate中的不仅是该Update，还包括链表中该Update之后的所有Update。</p><p>考虑如下例⼦：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">baseState</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
shared<span class="token punctuation">.</span>pending<span class="token operator">:</span> <span class="token constant">A1</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token constant">B2</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token constant">C1</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token constant">D2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中字⺟代表该Update要在⻚⾯插⼊的字⺟，数字代表优先级，值越低优先级越⾼。<br> 第⼀次render，优先级为1。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">baseState</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token literal-property property">baseUpdate</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token literal-property property">render阶段使⽤的Update</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A1</span><span class="token punctuation">,</span> <span class="token constant">C1</span><span class="token punctuation">]</span>
<span class="token literal-property property">memoizedState</span><span class="token operator">:</span> <span class="token string">&#39;AC&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中B2由于优先级为2，低于当前优先级，所以他及其后⾯的所有Update会被保存在baseUpdate中作为下次更新的Update（即B2 C1 D2）。</p><p>这么做是为了保持状态的前后依赖顺序。<br> 第⼆次render，优先级为2。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">baseState</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span>
<span class="token literal-property property">baseUpdate</span><span class="token operator">:</span> <span class="token constant">B2</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token constant">C1</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token constant">D2</span>
<span class="token literal-property property">render阶段使⽤的Update</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">B2</span><span class="token punctuation">,</span> <span class="token constant">C1</span><span class="token punctuation">,</span> <span class="token constant">D2</span><span class="token punctuation">]</span>
<span class="token literal-property property">memoizedState</span><span class="token operator">:</span> <span class="token string">&#39;ABCD&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，React能保证最终的状态⼀定和⽤户触发的交互⼀致，但是中间过程状态⽆法保证</p><h3 id="reactdom-render执行流程" tabindex="-1"><a class="header-anchor" href="#reactdom-render执行流程" aria-hidden="true">#</a> ReactDOM.render执行流程</h3><p>⾸次执⾏ReactDOM.render会创建fiberRootNode和rootFiber。其中fiberRootNode是整个应⽤的根节点，rootFiber是要渲染组件所在组件树的根节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// container指ReactDOM.render的第⼆个参数（即应⽤挂载的DOM节点）</span>
root <span class="token operator">=</span> container<span class="token punctuation">.</span>_reactRootContainer <span class="token operator">=</span> <span class="token function">legacyCreateRootFromDOMContainer</span><span class="token punctuation">(</span>
    container<span class="token punctuation">,</span>
    forceHydrate<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
fiberRoot <span class="token operator">=</span> root<span class="token punctuation">.</span>_internalRoot<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),W=n("br",null,null,-1),Q={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-dom/src/client/ReactDOMLegacy.js#L193",target:"_blank",rel:"noopener noreferrer"},z=t(`<p>legacyCreateRootFromDOMContainer⽅法内部会调⽤createFiberRoot⽅法完成fiberRootNode和rootFiber的创建以及关联。并初始化updateQueue</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createFiberRoot</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">containerInfo</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
    <span class="token literal-property property">tag</span><span class="token operator">:</span> RootTag<span class="token punctuation">,</span>
    <span class="token literal-property property">hydrate</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
    <span class="token literal-property property">hydrationCallbacks</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> SuspenseHydrationCallbacks<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> FiberRoot <span class="token punctuation">{</span>
    <span class="token comment">// 创建fiberRootNode</span>
    <span class="token keyword">const</span> <span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FiberRootNode</span><span class="token punctuation">(</span>containerInfo<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> hydrate<span class="token punctuation">)</span><span class="token operator">:</span>
    any<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建rootFiber</span>
    <span class="token keyword">const</span> uninitializedFiber <span class="token operator">=</span> <span class="token function">createHostRootFiber</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 连接rootFiber与fiberRootNode</span>
    root<span class="token punctuation">.</span>current <span class="token operator">=</span> uninitializedFiber<span class="token punctuation">;</span>
    uninitializedFiber<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token comment">// 初始化updateQueue</span>
    <span class="token function">initializeUpdateQueue</span><span class="token punctuation">(</span>uninitializedFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建update" tabindex="-1"><a class="header-anchor" href="#创建update" aria-hidden="true">#</a> 创建Update</h3>`,3),B=n("br",null,null,-1),V={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberReconciler.new.js#L255",target:"_blank",rel:"noopener noreferrer"},Y=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateContainer</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">element</span><span class="token operator">:</span> ReactNodeList<span class="token punctuation">,</span>
    <span class="token literal-property property">container</span><span class="token operator">:</span> OpaqueRoot<span class="token punctuation">,</span>
    <span class="token literal-property property">parentComponent</span><span class="token operator">:</span> <span class="token operator">?</span>React$Component<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">callback</span><span class="token operator">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Lane <span class="token punctuation">{</span>
    <span class="token comment">// ...省略与逻辑不相关代码</span>
    <span class="token comment">// 创建update</span>
    <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token function">createUpdate</span><span class="token punctuation">(</span>eventTime<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> suspenseConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// update.payload为需要挂载在根节点的组件</span>
    update<span class="token punctuation">.</span>payload <span class="token operator">=</span> <span class="token punctuation">{</span>element<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// callback为ReactDOM.render的第三个参数 —— 回调函数</span>
    callback <span class="token operator">=</span> callback <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> callback<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        update<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将⽣成的update加⼊updateQueue</span>
    <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调度更新</span>
    <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...省略与逻辑不相关代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以完整流程为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>创建fiberRootNode、rootFiber、updateQueue（\`legacyCreateRootFromDOMContainer
\`）
 |
 |
 v
创建Update对象（\`updateContainer\`）
 |
 |
 v
从fiber到root（\`markUpdateLaneFromFiberToRoot\`）
 |
 |
 v
调度更新（\`ensureRootIsScheduled\`）
 |
 |
 v
render阶段（\`performSyncWorkOnRoot\` 或 \`performConcurrentWorkOnRoot\`）
 |
 |
 v
commit阶段（\`commitRoot\`）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="react其他入口函数" tabindex="-1"><a class="header-anchor" href="#react其他入口函数" aria-hidden="true">#</a> React其他⼊⼝函数</h3><p>当前React共有三种模式：</p><ul><li>legacy，这是当前React使⽤的⽅式。当前没有计划删除本模式，但是这个模式可能不⽀持⼀些新功能；</li><li>blocking，开启部分concurrent模式特性的中间模式。⽬前正在实验中。作为迁移到concurrent模式的第⼀个步骤；</li><li>concurrent，⾯向未来的开发模式。我们之前讲的任务中断/任务优先级都是针对concurrent模式；</li></ul><p>基于此原因，可以通过不同的⼊⼝函数开启不同模式：</p><ul><li>legacy -- ReactDOM.render(/&lt;App //&gt;, rootNode)</li><li>blocking -- ReactDOM.createBlockingRoot(rootNode).render(/&lt;App //&gt;)</li><li>concurrent -- ReactDOM.createRoot(rootNode).render(/&lt;App //&gt;)</li></ul><h3 id="this-setstate" tabindex="-1"><a class="header-anchor" href="#this-setstate" aria-hidden="true">#</a> this.setState</h3><p>this.setState 会调⽤this.updater.enqueueSetState</p>`,10),J=n("br",null,null,-1),X={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react/src/ReactBaseClasses.js#L57",target:"_blank",rel:"noopener noreferrer"},$=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Component</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">partialState<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> partialState <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> partialState <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">||</span> partialState <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span> <span class="token string">&quot;setState(...): takes an object of state variables to update or a function which returns an object of state variables.&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">enqueueSetState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> partialState<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token string">&#39;setState&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>enqueueSetState就是我们从创建update到调度update</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">enqueueSetState</span><span class="token punctuation">(</span><span class="token parameter">inst<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过组件实例获取对应fiber</span>
    <span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>inst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> eventTime <span class="token operator">=</span> <span class="token function">requestEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> suspenseConfig <span class="token operator">=</span> <span class="token function">requestCurrentSuspenseConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取优先级</span>
    <span class="token keyword">const</span> lane <span class="token operator">=</span> <span class="token function">requestUpdateLane</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> suspenseConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建update</span>
    <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token function">createUpdate</span><span class="token punctuation">(</span>eventTime<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> suspenseConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    update<span class="token punctuation">.</span>payload <span class="token operator">=</span> payload<span class="token punctuation">;</span>
    <span class="token comment">// 赋值回调函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> callback <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        update<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将update插⼊updateQueue</span>
    <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调度update</span>
    <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="this-forceupdate" tabindex="-1"><a class="header-anchor" href="#this-forceupdate" aria-hidden="true">#</a> this.forceUpdate</h4><p>在this.updater上，除了enqueueSetState外，还存在enqueueForceUpdate，在this.forceUpdate时调⽤；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">enqueueForceUpdate</span><span class="token punctuation">(</span><span class="token parameter">inst<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>inst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> eventTime <span class="token operator">=</span> <span class="token function">requestEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> suspenseConfig <span class="token operator">=</span> <span class="token function">requestCurrentSuspenseConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> lane <span class="token operator">=</span> <span class="token function">requestUpdateLane</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> suspenseConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token function">createUpdate</span><span class="token punctuation">(</span>eventTime<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> suspenseConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 赋值tag为ForceUpdate</span>
    update<span class="token punctuation">.</span>tag <span class="token operator">=</span> ForceUpdate<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> callback <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        update<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，当某次更新含有tag为ForceUpdate的Update，那么当前ClassComponent不会受其他性能优化⼿段（shouldComponentUpdate|PureComponent）影响，⼀定会更新。</p><h2 id="极简hook实现" tabindex="-1"><a class="header-anchor" href="#极简hook实现" aria-hidden="true">#</a> 极简hook实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> updateNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>p onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">updateNum</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>通过⼀些途径产⽣更新，更新会造成组件render--updateNum；</li><li>组件render时useState返回的num为更新后的结果；</li></ol><p>其中步骤1的更新可以分为mount和update：</p><ol><li>调⽤ReactDOM.render会产⽣mount的更新，更新内容为useState的initialValue（即0）。</li><li>点击p标签触发updateNum会产⽣⼀次update的更新，更新内容为num =&gt; num + 1。</li></ol><h3 id="更新是什么" tabindex="-1"><a class="header-anchor" href="#更新是什么" aria-hidden="true">#</a> 更新是什么</h3><p>通过⼀些途径产⽣更新，更新会造成组件render</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 更新执⾏的函数</span>
    action<span class="token punctuation">,</span>
    <span class="token comment">// 与同⼀个Hook的其他更新形成链表</span>
    <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="update的数据结构" tabindex="-1"><a class="header-anchor" href="#update的数据结构" aria-hidden="true">#</a> update的数据结构</h3><p>加⼊有多个update，如何组合起来</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 之前</span>
<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">updateNum</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token comment">// 之后</span>
<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
 <span class="token function">updateNum</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">updateNum</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">updateNum</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过环形单向链表<br> 调⽤updateNum实际上是dispatchAction.bind(null, hook.queue)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">dispatchAction</span><span class="token punctuation">(</span><span class="token parameter">queue<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建update</span>
    <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token punctuation">{</span>
    action<span class="token punctuation">,</span>
        <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 环状单向链表操作</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>pending <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        update<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        update<span class="token punctuation">.</span>next <span class="token operator">=</span> queue<span class="token punctuation">.</span>pending<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        queue<span class="token punctuation">.</span>pending<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    queue<span class="token punctuation">.</span>pending <span class="token operator">=</span> update<span class="token punctuation">;</span>
    <span class="token comment">// 模拟React开始调度更新</span>
    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当产⽣第⼀个update（我们叫他u0），此时queue.pending === null。<br> update.next = update;即u0.next = u0，他会和⾃⼰⾸尾相连形成单向环状链表。<br> 然后queue.pending = update;即queue.pending = u0</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>queue<span class="token punctuation">.</span>pending <span class="token operator">=</span> u0 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span>
                <span class="token operator">^</span>       <span class="token operator">|</span>
                <span class="token operator">|</span>       <span class="token operator">|</span>
                <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当产⽣第⼆个update（我们叫他u1），update.next = queue.pending.next;，此时queue.pending.next === u0， 即u1.next = u0。<br> queue.pending.next = update;，即u0.next = u1。然后queue.pending = update;即queue.pending = u1</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>queue<span class="token punctuation">.</span>pending <span class="token operator">=</span> u1 <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> u0
                <span class="token operator">^</span>       <span class="token operator">|</span>
                <span class="token operator">|</span>       <span class="token operator">|</span>
                <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>queue.pending始终指向最后⼀个插⼊的update</p><h3 id="状态如何保存" tabindex="-1"><a class="header-anchor" href="#状态如何保存" aria-hidden="true">#</a> 状态如何保存</h3><p>更新产⽣的update对象会保存在queue中。<br> 不同于ClassComponent的实例可以存储数据<br> 对于FunctionComponent，queue存储对应的fiber中</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// App组件对应的fiber对象</span>
<span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 保存该FunctionComponent对应的Hooks链表</span>
    <span class="token literal-property property">memoizedState</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token comment">// 指向App函数</span>
    <span class="token literal-property property">stateNode</span><span class="token operator">:</span> App
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hooks数据结构" tabindex="-1"><a class="header-anchor" href="#hooks数据结构" aria-hidden="true">#</a> Hooks数据结构</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>hook <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 保存update的queue，即上⽂介绍的queue</span>
    <span class="token literal-property property">queue</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 保存hook对应的state</span>
    <span class="token literal-property property">memoizedState</span><span class="token operator">:</span> initialState<span class="token punctuation">,</span>
    <span class="token comment">// 与下⼀个Hook连接形成单向⽆环链表</span>
    <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Q：update与hook的关系<br> 每个useState对应⼀个hook对象。</p><p>调⽤const [num, updateNum] = useState(0);时updateNum（即上⽂介绍的dispatchAction）产⽣的update保存在useState对应的hook.queue中</p><h3 id="模拟react调度更新流程" tabindex="-1"><a class="header-anchor" href="#模拟react调度更新流程" aria-hidden="true">#</a> 模拟react调度更新流程</h3><p>实现通过操作产⽣更新，更新造成组件render</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">dispatchAction</span><span class="token punctuation">(</span><span class="token parameter">queue<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...创建update</span>

    <span class="token comment">// ...环状单向链表操作</span>
    <span class="token comment">// 模拟React开始调度更新</span>
    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 模拟调度</span>
<span class="token comment">// ⾸次render时是mount</span>
isMount <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 更新前将workInProgressHook重置为fiber保存的第⼀个Hook</span>
    workInProgressHook <span class="token operator">=</span> fiber<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
    <span class="token comment">// 触发组件render</span>
    fiber<span class="token punctuation">.</span><span class="token function">stateNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 组件⾸次render为mount，以后再触发的更新为update</span>
    isMount <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 每当遇到下⼀个useState，我们移动workInProgressHook的指针</span>
workInProgressHook <span class="token operator">=</span> workInProgressHook<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token comment">// 保证了每次组件render时useState的调⽤顺序及数量保持⼀致</span>
<span class="token comment">// 可以通过workInProgressHook找到当前useState对应的hook对象。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="计算state" tabindex="-1"><a class="header-anchor" href="#计算state" aria-hidden="true">#</a> 计算state</h3><p>组件render时，useState返回的值为更新后的结果，即⼀个完整的useState</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前useState使⽤的hook会被赋值该该变量</span>
    <span class="token keyword">let</span> hook<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isMount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        hook <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">queue</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token keyword">null</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">memoizedState</span><span class="token operator">:</span> initialState<span class="token punctuation">,</span>
            <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 将hook插⼊fiber.memoizedState链表末尾</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fiber<span class="token punctuation">.</span>memoizedState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fiber<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> hook<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            workInProgressHook<span class="token punctuation">.</span>next <span class="token operator">=</span> hook<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 移动workInProgressHook指针</span>
        workInProgressHook <span class="token operator">=</span> hook<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// update时找到对应hook</span>
        hook <span class="token operator">=</span> workInProgressHook<span class="token punctuation">;</span>
        <span class="token comment">// 移动workInProgressHook指针</span>
        workInProgressHook <span class="token operator">=</span> workInProgressHook<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> baseState <span class="token operator">=</span> hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hook<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取update环状单向链表中第⼀个update</span>
    <span class="token keyword">let</span> firstUpdate <span class="token operator">=</span> hook<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>pending<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执⾏update action</span>
        <span class="token keyword">const</span> action <span class="token operator">=</span> firstUpdate<span class="token punctuation">.</span>action<span class="token punctuation">;</span>
        baseState <span class="token operator">=</span> <span class="token function">action</span><span class="token punctuation">(</span>baseState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        firstUpdate <span class="token operator">=</span> firstUpdate<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

    <span class="token comment">// 最后⼀个update执⾏完后跳出循环</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>firstUpdate <span class="token operator">!==</span> hook<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>pending<span class="token punctuation">.</span>next<span class="token punctuation">)</span>

        <span class="token comment">// 清空queue.pending</span>
        hook<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>pending <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> baseState<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>baseState<span class="token punctuation">,</span> <span class="token function">dispatchAction</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> hook<span class="token punctuation">.</span>queue<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hooks数据结构-1" tabindex="-1"><a class="header-anchor" href="#hooks数据结构-1" aria-hidden="true">#</a> Hooks数据结构</h2><h3 id="dispatcher" tabindex="-1"><a class="header-anchor" href="#dispatcher" aria-hidden="true">#</a> dispatcher</h3><p>上⽂中，useState使⽤isMount区分mount和update<br> 在真实的Hooks中，组件mount时的hook与update时的hook来源于不同的对象，这类对象在源码中被称为dispatcher</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// mount时的Dispatcher</span>
<span class="token keyword">const</span> <span class="token literal-property property">HooksDispatcherOnMount</span><span class="token operator">:</span> Dispatcher <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">useCallback</span><span class="token operator">:</span> mountCallback<span class="token punctuation">,</span>
    <span class="token literal-property property">useContext</span><span class="token operator">:</span> readContext<span class="token punctuation">,</span>
    <span class="token literal-property property">useEffect</span><span class="token operator">:</span> mountEffect<span class="token punctuation">,</span>
    <span class="token literal-property property">useImperativeHandle</span><span class="token operator">:</span> mountImperativeHandle<span class="token punctuation">,</span>
    <span class="token literal-property property">useLayoutEffect</span><span class="token operator">:</span> mountLayoutEffect<span class="token punctuation">,</span>
    <span class="token literal-property property">useMemo</span><span class="token operator">:</span> mountMemo<span class="token punctuation">,</span>
    <span class="token literal-property property">useReducer</span><span class="token operator">:</span> mountReducer<span class="token punctuation">,</span>
    <span class="token literal-property property">useRef</span><span class="token operator">:</span> mountRef<span class="token punctuation">,</span>
    <span class="token literal-property property">useState</span><span class="token operator">:</span> mountState<span class="token punctuation">,</span>
    <span class="token comment">// ...省略</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// update时的Dispatcher</span>
<span class="token keyword">const</span> <span class="token literal-property property">HooksDispatcherOnUpdate</span><span class="token operator">:</span> Dispatcher <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">useCallback</span><span class="token operator">:</span> updateCallback<span class="token punctuation">,</span>
    <span class="token literal-property property">useContext</span><span class="token operator">:</span> readContext<span class="token punctuation">,</span>
    <span class="token literal-property property">useEffect</span><span class="token operator">:</span> updateEffect<span class="token punctuation">,</span>
    <span class="token literal-property property">useImperativeHandle</span><span class="token operator">:</span> updateImperativeHandle<span class="token punctuation">,</span>
    <span class="token literal-property property">useLayoutEffect</span><span class="token operator">:</span> updateLayoutEffect<span class="token punctuation">,</span>
    <span class="token literal-property property">useMemo</span><span class="token operator">:</span> updateMemo<span class="token punctuation">,</span>
    <span class="token literal-property property">useReducer</span><span class="token operator">:</span> updateReducer<span class="token punctuation">,</span>
    <span class="token literal-property property">useRef</span><span class="token operator">:</span> updateRef<span class="token punctuation">,</span>
    <span class="token literal-property property">useState</span><span class="token operator">:</span> updateState<span class="token punctuation">,</span>
    <span class="token comment">// ...省略</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mount时调⽤的hook和update时调⽤的hook其实是两个不同的函数。</p><p>在FunctionComponent render前，会根据FunctionComponent对应fiber的以下条件区分mount与update</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>current <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> current<span class="token punctuation">.</span>memoizedState <span class="token operator">===</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并将不同情况对应的dispatcher赋值给全局变量ReactCurrentDispatcher的current属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ReactCurrentDispatcher<span class="token punctuation">.</span>current <span class="token operator">=</span>
 current <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> current<span class="token punctuation">.</span>memoizedState <span class="token operator">===</span> <span class="token keyword">null</span>
 <span class="token operator">?</span> HooksDispatcherOnMount
 <span class="token operator">:</span> HooksDispatcherOnUpdate<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,47),K=n("br",null,null,-1),G={href:"https://github.com/acdlite/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.new.js#L409",target:"_blank",rel:"noopener noreferrer"},Z=t(`<h3 id="dispatch异常场景" tabindex="-1"><a class="header-anchor" href="#dispatch异常场景" aria-hidden="true">#</a> dispatch异常场景</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
 <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，ReactCurrentDispatcher.current已经指向ContextOnlyDispatcher，所以调⽤useState实际会调⽤throwInvalidHookError，直接抛出异常</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">ContextOnlyDispatcher</span><span class="token operator">:</span> Dispatcher <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">useCallback</span><span class="token operator">:</span> throwInvalidHookError<span class="token punctuation">,</span>
    <span class="token literal-property property">useContext</span><span class="token operator">:</span> throwInvalidHookError<span class="token punctuation">,</span>
    <span class="token literal-property property">useEffect</span><span class="token operator">:</span> throwInvalidHookError<span class="token punctuation">,</span>
    <span class="token literal-property property">useImperativeHandle</span><span class="token operator">:</span> throwInvalidHookError<span class="token punctuation">,</span>
    <span class="token literal-property property">useLayoutEffect</span><span class="token operator">:</span> throwInvalidHookError<span class="token punctuation">,</span>
 <span class="token comment">// ...省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),nn=n("br",null,null,-1),sn={href:"https://github.com/acdlite/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.new.js#L458",target:"_blank",rel:"noopener noreferrer"},an=t(`<h3 id="hook数据结构" tabindex="-1"><a class="header-anchor" href="#hook数据结构" aria-hidden="true">#</a> Hook数据结构</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token literal-property property">hook</span><span class="token operator">:</span> Hook <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">memoizedState</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">baseState</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">baseQueue</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">queue</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了memoizedState，其余与updateQueue⼀致<br> useState：对于const [state, updateState] = useState(initialState)，memoizedState保存state的值<br> useReducer：对于const [state, dispatch] = useReducer(reducer, {});，memoizedState保存state的值<br> useEffect：memoizedState保存包含useEffect回调函数、依赖项等的链表数据结构effect。effect<br> 链表同时会保存在fiber.updateQueue中<br> useRef：对于useRef(1)，memoizedState保存{current: 1}<br> useMemo：对于useMemo(callback, [depA])，memoizedState保存[callback(), depA]<br> useCallback：对于useCallback(callback, [depA])，memoizedState保存[callback, depA]。与useMemo的区别是，useCallback保存的是callback函数本身，⽽useMemo保存的是callback函数的执⾏结果<br> 有些hook是没有memoizedState的，⽐如：<br> useContext</p><h3 id="usestate与usereducer" tabindex="-1"><a class="header-anchor" href="#usestate与usereducer" aria-hidden="true">#</a> useState与useReducer</h3><p>useState和useReducer是Redux作者加⼊React后的⼀个核⼼贡献：将Redux的思想带⼊到React⾥本质来说，useState只是预置了reducer的useReducer</p><h4 id="概览-1" tabindex="-1"><a class="header-anchor" href="#概览-1" aria-hidden="true">#</a> 概览</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> updateNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>a<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">updateNum</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>声明阶段即App调⽤时，会依次执⾏useReducer与useState⽅法</li><li>调⽤阶段即点击按钮后，dispatch或updateNum被调⽤时</li></ul><h4 id="声明阶段" tabindex="-1"><a class="header-anchor" href="#声明阶段" aria-hidden="true">#</a> 声明阶段</h4><p>当FunctionComponent进⼊render阶段的beginWork时，会调⽤renderWithHooks⽅法该⽅法内部会执⾏FunctionComponent对应函数（即fiber.type）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> dispatcher <span class="token operator">=</span> <span class="token function">resolveDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dispatcher<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">useReducer</span><span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> initialArg<span class="token punctuation">,</span> init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> dispatcher <span class="token operator">=</span> <span class="token function">resolveDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dispatcher<span class="token punctuation">.</span><span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialArg<span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mount时</p><p>mount时，useReducer会调⽤mountReducer，useState会调⽤mountState</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> mountState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">S</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(
    initialState: (() =&gt; S) | S,
): [S, Dispatch&lt;BasicStateAction</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">S</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">&gt;] </span><span class="token punctuation">{</span>
    <span class="token comment">// 创建并返回当前的hook</span>
    <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">mountWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...赋值初始state</span>
    <span class="token comment">// 创建queue</span>
    <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">(</span>hook<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token literal-property property">dispatch</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token literal-property property">lastRenderedReducer</span><span class="token operator">:</span> basicStateReducer<span class="token punctuation">,</span>
        <span class="token literal-property property">lastRenderedState</span><span class="token operator">:</span> <span class="token punctuation">(</span>initialState<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...创建dispatch</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">
function mountReducer&lt;S, I, A&gt;(
    reducer: (S, A) =&gt; S,
    initialArg: I,
    init?: I =&gt; S,
): [S, Dispatch</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">] </span><span class="token punctuation">{</span>
    <span class="token comment">// 创建并返回当前的hook</span>
    <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">mountWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...赋值初始state</span>
    <span class="token comment">// 创建queue</span>
    <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">(</span>hook<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token literal-property property">dispatch</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token literal-property property">lastRenderedReducer</span><span class="token operator">:</span> reducer<span class="token punctuation">,</span>
        <span class="token literal-property property">lastRenderedState</span><span class="token operator">:</span> <span class="token punctuation">(</span>initialState<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...创建dispatch</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，mountWorkInProgressHook对应创建并返回对应的Hook，以上两个hooks的区别：queue参数的lastRenderedReducer字段</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">(</span>hook<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token comment">// 保存dispatchAction.bind()的值</span>
    <span class="token literal-property property">dispatch</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token comment">// 上⼀次render时使⽤的reducer</span>
    <span class="token literal-property property">lastRenderedReducer</span><span class="token operator">:</span> reducer<span class="token punctuation">,</span>
    <span class="token comment">// 上⼀次render时的state</span>
    <span class="token literal-property property">lastRenderedState</span><span class="token operator">:</span> <span class="token punctuation">(</span>initialState<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>useReducer的lastRenderedReducer为传⼊的reducer参数。useState的lastRenderedReducer为basicStateReducer，basicStateReducer如下：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> basicStateReducer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">S</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(state: S, action: BasicStateAction</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">S</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">): S </span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function">action</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">:</span> action<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>update时</p><p>在update时，useReducer和useState调⽤的是同⼀个函数 updateReducer</p>`,20),en=n("br",null,null,-1),tn={href:"https://github.com/acdlite/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.new.js#L665",target:"_blank",rel:"noopener noreferrer"},pn=t(`<div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 找到对应的hook，根据update计算该hook的新state并返回</span>
<span class="token keyword">function</span> updateReducer<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
    <span class="token function-variable function">reducer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">,</span>
    <span class="token literal-property property">initialArg</span><span class="token operator">:</span> <span class="token constant">I</span><span class="token punctuation">,</span>
    init<span class="token operator">?</span><span class="token operator">:</span> <span class="token parameter"><span class="token constant">I</span></span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">,</span> Dispatch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">] </span><span class="token punctuation">{</span>
    <span class="token comment">// 获取当前hook</span>
    <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">updateWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> queue <span class="token operator">=</span> hook<span class="token punctuation">.</span>queue<span class="token punctuation">;</span>

    queue<span class="token punctuation">.</span>lastRenderedReducer <span class="token operator">=</span> reducer<span class="token punctuation">;</span>
    <span class="token comment">// ...同update与updateQueue类似的更新逻辑</span>
    <span class="token keyword">const</span> <span class="token literal-property property">dispatch</span><span class="token operator">:</span> Dispatch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = (queue.dispatch: any);
    return [hook.memoizedState, dispatch];
}
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="调用阶段" tabindex="-1"><a class="header-anchor" href="#调用阶段" aria-hidden="true">#</a> 调⽤阶段</h4><p>调⽤阶段会执⾏dispatchAction，此时该FunctionComponent对应的fiber以及hook.queue已经通过调⽤bind⽅法预先作为参数传⼊</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 创建update，将update加⼊queue.pending中，并开启调度。</span>
<span class="token keyword">function</span> <span class="token function">dispatchAction</span><span class="token punctuation">(</span><span class="token parameter">fiber<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...创建update</span>
    <span class="token keyword">var</span> update <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">eventTime</span><span class="token operator">:</span> eventTime<span class="token punctuation">,</span>
        <span class="token literal-property property">lane</span><span class="token operator">:</span> lane<span class="token punctuation">,</span>
        <span class="token literal-property property">suspenseConfig</span><span class="token operator">:</span> suspenseConfig<span class="token punctuation">,</span>
        <span class="token literal-property property">action</span><span class="token operator">:</span> action<span class="token punctuation">,</span>
        <span class="token literal-property property">eagerReducer</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token literal-property property">eagerState</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// ...将update加⼊queue.pending</span>

    <span class="token keyword">var</span> alternate <span class="token operator">=</span> fiber<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber <span class="token operator">===</span> currentlyRenderingFiber$1 <span class="token operator">||</span> alternate <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> alternate <span class="token operator">===</span> currentlyRenderingFiber$1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// render阶段触发的更新</span>
        didScheduleRenderPhaseUpdateDuringThisPass <span class="token operator">=</span> didScheduleRenderPhaseUpd
        ate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>lanes <span class="token operator">===</span> NoLanes <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>alternate <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> alternate<span class="token punctuation">.</span>lanes <span class="token operator">===</span> NoLanes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...fiber的updateQueue为空，优化路径</span>
        <span class="token punctuation">}</span>
        <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useeffect" tabindex="-1"><a class="header-anchor" href="#useeffect" aria-hidden="true">#</a> useEffect</h3><p>参考commit阶段时useEffect⼯作流</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在flushPassiveEffects⽅法内部会从全局变量rootWithPendingPassiveEffects获取effectList。</p></div><h4 id="flushpassiveeffectsimpl" tabindex="-1"><a class="header-anchor" href="#flushpassiveeffectsimpl" aria-hidden="true">#</a> flushPassiveEffectsImpl</h4><p>flushPassiveEffects内部会设置优先级，并执⾏flushPassiveEffectsImpl</p>`,9),on=n("br",null,null,-1),ln={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L2458",target:"_blank",rel:"noopener noreferrer"},cn=t(`<p>flushPassiveEffectsImpl主要做三件事：</p><ul><li>调⽤该useEffect在上⼀次render时的销毁函数；</li><li>调⽤该useEffect在本次render时的回调函数；</li><li>如果存在同步任务，不需要等待下次事件循环的宏任务，提前执⾏；</li></ul><p>这⾥主要关注前两件事：</p><ul><li>销毁函数的执⾏</li></ul><p>useEffect的执⾏需要保证所有组件useEffect的销毁函数必须都执⾏完后才能执⾏任意⼀个组件的useEffect的回调函数。</p><p>这是因为多个组件间可能共⽤同⼀个ref。<br> 如果不是按照“全部销毁”再“全部执⾏”的顺序，那么在某个组件useEffect的销毁函数中修改的ref.current可能影响另⼀个组件useEffect的回调函数中的同⼀个ref的current属性。</p><p>在useLayoutEffect中也有同样的问题，所以他们都遵循“全部销毁”再“全部执⾏”的顺序。</p><p>所以，会遍历并执⾏所有useEffect的销毁函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// pendingPassiveHookEffectsUnmount中保存了所有需要执⾏销毁的useEffect</span>
<span class="token keyword">const</span> unmountEffects <span class="token operator">=</span> pendingPassiveHookEffectsUnmount<span class="token punctuation">;</span>
pendingPassiveHookEffectsUnmount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> unmountEffects<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>unmountEffects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> HookEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>unmountEffects<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> Fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> destroy <span class="token operator">=</span> effect<span class="token punctuation">.</span>destroy<span class="token punctuation">;</span>
    effect<span class="token punctuation">.</span>destroy <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> destroy <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 销毁函数存在则执⾏</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">captureCommitPhaseError</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中pendingPassiveHookEffectsUnmount数组的索引i保存需要销毁的effect，i+1保存该effect对应的fiber</p><ul><li>回调函数的执⾏</li></ul><p>遍历数组，执⾏对应effect的回调函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// pendingPassiveHookEffectsMount中保存了所有需要执⾏回调的useEffect</span>
<span class="token keyword">const</span> mountEffects <span class="token operator">=</span> pendingPassiveHookEffectsMount<span class="token punctuation">;</span>
pendingPassiveHookEffectsMount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mountEffects<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mountEffects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> HookEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mountEffects<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> Fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> create <span class="token operator">=</span> effect<span class="token punctuation">.</span>create<span class="token punctuation">;</span>
        effect<span class="token punctuation">.</span>destroy <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">captureCommitPhaseError</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useref" tabindex="-1"><a class="header-anchor" href="#useref" aria-hidden="true">#</a> useRef</h3><p>ref是reference（引⽤）的缩写。在React中，我们习惯⽤ref保存DOM。<br> 对于<code>useRef(1)</code>，memoizedState保存<code>{current: 1}</code></p><h4 id="useref的两个状态" tabindex="-1"><a class="header-anchor" href="#useref的两个状态" aria-hidden="true">#</a> useRef的两个状态</h4><p>在mount和update时对应了两个dispatcher</p>`,17),rn=n("br",null,null,-1),un={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.old.js#L1208-L1221",target:"_blank",rel:"noopener noreferrer"},dn=t(`<div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> mountRef<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">T</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(initialValue: T): </span><span class="token punctuation">{</span><span class="token operator">|</span>current<span class="token operator">:</span> <span class="token constant">T</span><span class="token operator">|</span><span class="token punctuation">}</span><span class="token plain-text"> </span><span class="token punctuation">{</span>
    <span class="token comment">// 获取当前useRef hook</span>
    <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">mountWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建ref</span>
    <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">current</span><span class="token operator">:</span> initialValue<span class="token punctuation">}</span><span class="token punctuation">;</span>
    hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> ref<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ref<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">
function updateRef</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">T</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(initialValue: T): </span><span class="token punctuation">{</span><span class="token operator">|</span>current<span class="token operator">:</span> <span class="token constant">T</span><span class="token operator">|</span><span class="token punctuation">}</span><span class="token plain-text"> </span><span class="token punctuation">{</span>
    <span class="token comment">// 获取当前useRef hook</span>
    <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">updateWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回保存的数据</span>
    <span class="token keyword">return</span> hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>useRef仅仅是返回⼀个包含current属性的对象，可以看React.createRef，证明了ref在mount时只有current属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> RefObject <span class="token punctuation">{</span>
    <span class="token keyword">const</span> refObject <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">current</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> refObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ref工作流程" tabindex="-1"><a class="header-anchor" href="#ref工作流程" aria-hidden="true">#</a> Ref⼯作流程</h4><p>在React中，HostComponent、ClassComponent、ForwardRef可以赋值ref属性。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// HostComponent</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>domRef<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">// ClassComponent / ForwardRef</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cpnRef<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，ForwardRef只是将ref作为第⼆个参数传递下去，不会进⼊ref的⼯作流程。</p><p>因为HostComponent在commit阶段的mutation阶段执⾏DOM操作。</p><p>所以，对应ref的更新也是发⽣在mutation阶段。<br> 同时，mutation阶段执⾏DOM操作的依据为effectTag。<br> 所以，对于HostComponent、ClassComponent如果包含ref操作，那么也会赋值相应的effectTag。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// ...</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> Placement <span class="token operator">=</span> <span class="token comment">/* */</span> <span class="token number">0b0000000000000010</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> Update <span class="token operator">=</span> <span class="token comment">/* */</span> <span class="token number">0b0000000000000100</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> Deletion <span class="token operator">=</span> <span class="token comment">/* */</span> <span class="token number">0b0000000000001000</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> Ref <span class="token operator">=</span> <span class="token comment">/* */</span> <span class="token number">0b0000000010000000</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，ref的⼯作流程可以分为两部分：</p><ol><li>render阶段为含有ref属性的fiber添加Ref effectTag</li><li>commit阶段为包含Ref effectTag的fiber执⾏对应操作</li></ol><h4 id="render阶段" tabindex="-1"><a class="header-anchor" href="#render阶段" aria-hidden="true">#</a> render阶段</h4><p>在render阶段的beginWork与completeWork中有个同名⽅法markRef⽤于为含有ref属性的fiber增加Ref effectTag</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// beginWork的markRef</span>
<span class="token keyword">function</span> <span class="token function">markRef</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ref <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>ref<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ref <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>ref <span class="token operator">!==</span> ref<span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Schedule a Ref effect</span>
        workInProgress<span class="token punctuation">.</span>effectTag <span class="token operator">|=</span> Ref<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// completeWork的markRef</span>
<span class="token keyword">function</span> <span class="token function">markRef</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    workInProgress<span class="token punctuation">.</span>effectTag <span class="token operator">|=</span> Ref<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),kn=n("br",null,null,-1),vn={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L693",target:"_blank",rel:"noopener noreferrer"},mn=n("br",null,null,-1),bn={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCompleteWork.old.js#L153",target:"_blank",rel:"noopener noreferrer"},gn=t('<p>在beginWork中，如下两处调⽤了markRef：</p><ul><li>updateClassComponent内的finishClassComponent，对应ClassComponent；注意 ClassComponent 即使 shouldComponentUpdate 为false该组件也会调⽤markRef</li><li>updateHostComponent，对应HostComponent；<br> 在completeWork中，如下两处调⽤了markRef：</li><li>completeWork中的HostComponent类型</li><li>completeWork中的ScopeComponent类型</li></ul><p>总结下组件对应fiber被赋值Ref effectTag需要满⾜的条件：</p><ul><li>fiber类型为HostComponent、ClassComponent</li><li>对于mount，workInProgress.ref !== null，即存在ref属性</li><li>对于update，current.ref !== workInProgress.ref，即ref属性改变</li></ul><h4 id="commit阶段" tabindex="-1"><a class="header-anchor" href="#commit阶段" aria-hidden="true">#</a> commit阶段</h4><p>在commit阶段的mutation阶段中，对于ref属性改变的情况，需要先移除之前的ref。</p>',6),hn=n("br",null,null,-1),fn={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L2342",target:"_blank",rel:"noopener noreferrer"},yn=t(`<div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">commitMutationEffects</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot<span class="token punctuation">,</span> renderPriorityLevel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> effectTag <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>effectTag<span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> Ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 移除之前的ref</span>
                <span class="token function">commitDetachRef</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">function</span> <span class="token function">commitDetachRef</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> currentRef <span class="token operator">=</span> current<span class="token punctuation">.</span>ref<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentRef <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> currentRef <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// function类型ref，调⽤他，传参为null</span>
                <span class="token function">currentRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 对象类型ref，current赋值为null</span>
            currentRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来进⼊ref的赋值阶段，commitLayoutEffect会执⾏commitAttachRef（赋值ref）</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">commitAttachRef</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">finishedWork</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ref <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>ref<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取ref属性对应的Component实例</span>
        <span class="token keyword">const</span> instance <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>
        <span class="token keyword">let</span> instanceToUse<span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span>
            instanceToUse <span class="token operator">=</span> <span class="token function">getPublicInstance</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
            instanceToUse <span class="token operator">=</span> instance<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 赋值ref</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ref <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">ref</span><span class="token punctuation">(</span>instanceToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            ref<span class="token punctuation">.</span>current <span class="token operator">=</span> instanceToUse<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usememo与usecallback" tabindex="-1"><a class="header-anchor" href="#usememo与usecallback" aria-hidden="true">#</a> useMemo与useCallback</h3><h4 id="mount" tabindex="-1"><a class="header-anchor" href="#mount" aria-hidden="true">#</a> mount</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> mountMemo<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
    <span class="token function-variable function">nextCreate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">,</span>
    <span class="token literal-property property">deps</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>mixed<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建并返回当前hook</span>
    <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">mountWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> nextDeps <span class="token operator">=</span> deps <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> deps<span class="token punctuation">;</span>
    <span class="token comment">// 计算value</span>
    <span class="token keyword">const</span> nextValue <span class="token operator">=</span> <span class="token function">nextCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将value与deps保存在hook.memoizedState</span>
    hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> <span class="token punctuation">[</span>nextValue<span class="token punctuation">,</span> nextDeps<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nextValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> mountCallback<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>callback<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">deps</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>mixed<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span>
<span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建并返回当前hook</span>
    <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">mountWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> nextDeps <span class="token operator">=</span> deps <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> deps<span class="token punctuation">;</span>
    <span class="token comment">// 将value与deps保存在hook.memoizedState</span>
    hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">,</span> nextDeps<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> callback<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>mountMemo会将回调函数(nextCreate)的执⾏结果作为value保存</li><li>mountCallback会将回调函数作为value保存</li></ul><h4 id="update-1" tabindex="-1"><a class="header-anchor" href="#update-1" aria-hidden="true">#</a> update</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> updateMemo<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
    <span class="token function-variable function">nextCreate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">,</span>
    <span class="token literal-property property">deps</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>mixed<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回当前hook</span>
    <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">updateWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> nextDeps <span class="token operator">=</span> deps <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> deps<span class="token punctuation">;</span>
    <span class="token keyword">const</span> prevState <span class="token operator">=</span> hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevState <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextDeps <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token literal-property property">prevDeps</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>mixed<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> prevState<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 判断update前后value是否变化</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">areHookInputsEqual</span><span class="token punctuation">(</span>nextDeps<span class="token punctuation">,</span> prevDeps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 未变化</span>
                <span class="token keyword">return</span> prevState<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 变化，重新计算value</span>
    <span class="token keyword">const</span> nextValue <span class="token operator">=</span> <span class="token function">nextCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> <span class="token punctuation">[</span>nextValue<span class="token punctuation">,</span> nextDeps<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nextValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> updateCallback<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>callback<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">deps</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>mixed<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span>
<span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回当前hook</span>
    <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">updateWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> nextDeps <span class="token operator">=</span> deps <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> deps<span class="token punctuation">;</span>
    <span class="token keyword">const</span> prevState <span class="token operator">=</span> hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevState <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextDeps <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token literal-property property">prevDeps</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>mixed<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> prevState<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 判断update前后value是否变化</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">areHookInputsEqual</span><span class="token punctuation">(</span>nextDeps<span class="token punctuation">,</span> prevDeps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 未变化</span>
                <span class="token keyword">return</span> prevState<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 变化，将新的callback作为value</span>
    hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">,</span> nextDeps<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> callback<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于update，这两个hook的唯⼀区别也是是回调函数本身还是回调函数的执⾏结果作为value。</p><h2 id="concurrent-mode" tabindex="-1"><a class="header-anchor" href="#concurrent-mode" aria-hidden="true">#</a> Concurrent Mode</h2><h3 id="概览-2" tabindex="-1"><a class="header-anchor" href="#概览-2" aria-hidden="true">#</a> 概览</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Concurrent 模式是⼀组 React 的新功能，可帮助应⽤保持响应，并根据⽤户的设备性能和⽹速进⾏适当的调整。</p></div><p>Concurrent Mode是React16年重构 Fiber架构 的源动⼒，也是React未来的发展⽅向。</p><h4 id="底层架构-fiber架构" tabindex="-1"><a class="header-anchor" href="#底层架构-fiber架构" aria-hidden="true">#</a> 底层架构--fiber架构</h4><p>oncurrent Mode最关键的⼀点是：实现异步可中断的更新。<br> Fiber架构的意义在于，他将单个组件作为⼯作单元，使以组件为粒度的“异步可中断的更新”成为可能。</p><h4 id="架构的驱动力-scheduler" tabindex="-1"><a class="header-anchor" href="#架构的驱动力-scheduler" aria-hidden="true">#</a> 架构的驱动⼒--Scheduler</h4><p>当同步运⾏Fiber架构（通过ReactDOM.render），则Fiber架构与V15并⽆区别。<br> 但是当我们配合时间切⽚，就能根据宿主环境性能，为每个⼯作单元分配⼀个可运⾏时间，实现“异步可中断的更新”</p><h4 id="架构运行策略-lane" tabindex="-1"><a class="header-anchor" href="#架构运行策略-lane" aria-hidden="true">#</a> 架构运⾏策略--lane</h4><p>基于当前的架构，当⼀次更新在运⾏过程中被中断，过段时间再继续运⾏，这就是“异步可中断的更新”；</p><p>当⼀次更新在运⾏过程中被中断，转⽽重新开始⼀次新的更新，我们可以说：后⼀次更新打断了前⼀次更新；<br> 这就是优先级的概念：后⼀次更新的优先级更⾼，就会打断正在进⾏的前⼀次更新。<br> 多个优先级之间如何互相打断？优先级能否升降？本次更新应该赋予什么优先级？<br> 这就需要⼀个模型控制不同优先级之间的关系与⾏为，也就是lane</p><h4 id="上层实现" tabindex="-1"><a class="header-anchor" href="#上层实现" aria-hidden="true">#</a> 上层实现</h4><p>从源码层⾯讲，Concurrent Mode是⼀套可控的“多优先级更新架构”，落地的上层实现包括：</p><ol><li>batchUpdates</li><li>Suspense</li><li>useDeferredValue</li></ol><h3 id="scheduler原理及实现" tabindex="-1"><a class="header-anchor" href="#scheduler原理及实现" aria-hidden="true">#</a> scheduler原理及实现</h3><p>scheduler实现功能：</p><ol><li>时间切⽚</li><li>优先级调度</li></ol><h4 id="时间切片原理" tabindex="-1"><a class="header-anchor" href="#时间切片原理" aria-hidden="true">#</a> 时间切⽚原理</h4><p>时间切⽚的本质是模拟实现requestIdleCallback</p><p>requestIdleCallback是在“浏览器重排/重绘”后如果当前帧还有空余时间时被调⽤的。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⼀个task(宏任务) --
队列中全部job(微任务) --
requestAnimationFrame --
浏览器重排/重绘 --
requestIdleCallback
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除去“浏览器重排/重绘”，下图是浏览器⼀帧中可以⽤于执⾏JS的时机。<br> ⼀个task(宏任务) -- 队列中全部job(微任务) -- requestAnimationFrame -- 浏览器重排/重绘 --requestIdleCallback<br> requestIdleCallback是在“浏览器重排/重绘”后如果当前帧还有空余时间时被调⽤的。</p><p>浏览器并没有提供其他API能够在同样的时机（浏览器重排/重绘后）调⽤以模拟其实现。唯⼀能精准控制调⽤时机的API是requestAnimationFrame，他能让我们在“浏览器重排/重绘”之前执⾏JS。<br> 这也是为什么我们通常⽤这个API实现JS动画 —— 这是浏览器渲染前的最后时机，所以动画能快速被渲染。</p><p>所以，Scheduler的时间切⽚功能是通过task（宏任务）实现的。<br> setTimeout：最常⻅<br> MessageChannel：执⾏时机⽐setTimeout更早</p><p>所以Scheduler将需要被执⾏的回调函数作为MessageChannel的回调执⾏。如果当前宿主环境不⽀持MessageChannel，则使⽤setTimeout</p>`,35),wn=n("br",null,null,-1),xn={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L47-L55",target:"_blank",rel:"noopener noreferrer"},jn=n("br",null,null,-1),Cn=n("br",null,null,-1),Rn={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L228-L234",target:"_blank",rel:"noopener noreferrer"},Sn=t(`<p>在React的render阶段，开启Concurrent Mode时，每次遍历前，都会通过Scheduler提供的shouldYield⽅法判断是否需要中断遍历，使浏览器有时间渲染：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">workLoopConcurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Perform work until Scheduler asks us to yield</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">shouldYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Schdeduler中，为任务分配的初始剩余时间为5ms，但随着应⽤运⾏，会通过fps动态调整分配给任务的可执⾏时间。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">forceFrameRate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fps <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> fps <span class="token operator">&gt;</span> <span class="token number">125</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Using console[&#39;error&#39;] to evade Babel and ESLint</span>
        console<span class="token punctuation">[</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>
        <span class="token string">&#39;forceFrameRate takes a positive int between 0 and 125, &#39;</span> <span class="token operator">+</span>
        <span class="token string">&#39;forcing frame rates higher than 125 fps is not unsupported&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fps <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        yieldInterval <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">/</span> fps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// reset the framerate</span>
        yieldInterval <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="优先级调度" tabindex="-1"><a class="header-anchor" href="#优先级调度" aria-hidden="true">#</a> 优先级调度</h4><p>Scheduler是独⽴于React的包，对外暴露了⼀个⽅法unstable_runWithPriority。<br> 这个⽅法接受⼀个优先级与⼀个回调函数，在回调函数内部调⽤获取优先级的⽅法都会取得第⼀个参数对应的优先级：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">unstable_runWithPriority</span><span class="token punctuation">(</span><span class="token parameter">priorityLevel<span class="token punctuation">,</span> eventHandler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>priorityLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token literal-property property">ImmediatePriority</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token literal-property property">UserBlockingPriority</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token literal-property property">NormalPriority</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token literal-property property">LowPriority</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token literal-property property">IdlePriority</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
        priorityLevel <span class="token operator">=</span> NormalPriority<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> previousPriorityLevel <span class="token operator">=</span> currentPriorityLevel<span class="token punctuation">;</span>
    currentPriorityLevel <span class="token operator">=</span> priorityLevel<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">eventHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        currentPriorityLevel <span class="token operator">=</span> previousPriorityLevel<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⼀共有5种优先级</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// Times out immediately</span>
<span class="token keyword">var</span> <span class="token constant">IMMEDIATE_PRIORITY_TIMEOUT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// Eventually times out</span>
<span class="token keyword">var</span> <span class="token constant">USER_BLOCKING_PRIORITY_TIMEOUT</span> <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token constant">NORMAL_PRIORITY_TIMEOUT</span> <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token constant">LOW_PRIORITY_TIMEOUT</span> <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
<span class="token comment">// Never times out</span>
<span class="token keyword">var</span> <span class="token constant">IDLE_PRIORITY_TIMEOUT</span> <span class="token operator">=</span> maxSigned31BitInt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lane模型" tabindex="-1"><a class="header-anchor" href="#lane模型" aria-hidden="true">#</a> lane模型</h3><p>lane模型就是react优先级的机制，可以⽤来</p><ul><li>可以表示优先级的不同</li><li>可能同时存在⼏个同优先级的更新，所以还得能表示批的概念</li><li>⽅便进⾏优先级相关计算</li></ul><h4 id="表示优先级不同" tabindex="-1"><a class="header-anchor" href="#表示优先级不同" aria-hidden="true">#</a> 表示优先级不同</h4><p>lane模型使⽤31位的⼆进制表示31条赛道，位数越⼩的优先级越⾼，某些相邻的位拥有相同优先级。</p><h4 id="表示-批-的概念" tabindex="-1"><a class="header-anchor" href="#表示-批-的概念" aria-hidden="true">#</a> 表示“批”的概念</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">InputDiscreteLanes</span><span class="token operator">:</span> Lanes <span class="token operator">=</span> <span class="token comment">/* */</span> <span class="token number">0b0000000000000000000000000011000</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">DefaultLanes</span><span class="token operator">:</span> Lanes <span class="token operator">=</span> <span class="token comment">/* */</span> <span class="token number">0b0000000000000000000111000000000</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token literal-property property">TransitionLanes</span><span class="token operator">:</span> Lanes <span class="token operator">=</span> <span class="token comment">/* */</span> <span class="token number">0b0000000001111111110000000000000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的某些变量占了多个位，这就是批<br> 其中InputDiscreteLanes是“⽤户交互”触发更新会拥有的优先级范围。<br> DefaultLanes是“请求数据返回后触发更新”拥有的优先级范围。<br> TransitionLanes是Suspense、useTransition、useDeferredValue拥有的优先级范围。<br> 这其中有个细节，越低优先级的lanes占⽤的位越多。⽐如InputDiscreteLanes占了2个位，TransitionLanes占了9个位。<br> 原因在于：越低优先级的更新越容易被打断，导致积压下来，所以需要更多的位。相反，最⾼优的同步更新的SyncLane不需要多余的lanes</p><h4 id="方便进行优先级相关计算" tabindex="-1"><a class="header-anchor" href="#方便进行优先级相关计算" aria-hidden="true">#</a> ⽅便进⾏优先级相关计算</h4><p>使⽤位运算符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 判断a b是否有交集</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">includesSomeLane</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> Lanes <span class="token operator">|</span> Lane<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> Lanes <span class="token operator">|</span> Lane</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">!==</span> NoLanes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 计算b这个lanes是否是a对应的lanes的⼦集，只需要判断a与b按位与的结果是否为b：</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isSubsetOfLanes</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">set</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span> <span class="token literal-property property">subset</span><span class="token operator">:</span> Lanes <span class="token operator">|</span> Lane</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">(</span>set <span class="token operator">&amp;</span> subset<span class="token punctuation">)</span> <span class="token operator">===</span> subset<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 将两个lane或lanes的位合并只需要执⾏按位或操作：</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> Lanes <span class="token operator">|</span> Lane<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> Lanes <span class="token operator">|</span> Lane</span><span class="token punctuation">)</span><span class="token operator">:</span> Lanes <span class="token punctuation">{</span>
 <span class="token keyword">return</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20);function _n(qn,Fn){const a=o("ExternalLinkIcon");return l(),c("div",null,[d,k,v,n("p",null,[s("官⽹对diff算法的介绍："),n("a",m,[s("https://zh-hans.reactjs.org/docs/reconciliation.html#the-diffing-algorithm"),e(a)])]),b,n("p",null,[s("地址："),g,n("a",h,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L1280"),e(a)])]),f,n("p",null,[s("地址："),y,n("a",w,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L1141"),e(a)])]),x,n("p",null,[s("地址："),j,n("a",C,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L818"),e(a)])]),R,n("p",null,[s("地址："),S,n("a",_,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L869"),e(a)])]),q,n("p",null,[s("地址："),F,n("a",I,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L636"),e(a)])]),U,P,L,n("p",null,[s("地址："),E,n("a",D,[s("https://github.com/facebook/react/blob/b6df4417c79c11cfb44f965fab55b573882b1d54/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L602"),e(a)])]),T,n("p",null,[s("unstable_runWithPriority地址："),H,n("a",M,[s("https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/scheduler/src/Scheduler.js#L217"),e(a)])]),n("p",null,[s("scheduler优先级常量定义地址："),O,n("a",A,[s("https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/scheduler/src/SchedulerPriorities.js"),e(a)])]),N,n("p",null,[s("地址："),W,n("a",Q,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-dom/src/client/ReactDOMLegacy.js#L193"),e(a)])]),z,n("p",null,[s("地址："),B,n("a",V,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberReconciler.new.js#L255"),e(a)])]),Y,n("p",null,[s("地址："),J,n("a",X,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react/src/ReactBaseClasses.js#L57"),e(a)])]),$,n("p",null,[s("地址："),K,n("a",G,[s("https://github.com/acdlite/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.new.js#L409"),e(a)])]),Z,n("p",null,[s("地址："),nn,n("a",sn,[s("https://github.com/acdlite/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.new.js#L458"),e(a)])]),an,n("p",null,[s("地址："),en,n("a",tn,[s("https://github.com/acdlite/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.new.js#L665"),e(a)])]),pn,n("p",null,[s("地址："),on,n("a",ln,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L2458"),e(a)])]),cn,n("p",null,[s("地址："),rn,n("a",un,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.old.js#L1208-L1221"),e(a)])]),dn,n("p",null,[s("markRef在beginWork地址："),kn,n("a",vn,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L693"),e(a)])]),n("p",null,[s("在completeWork地址："),mn,n("a",bn,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCompleteWork.old.js#L153"),e(a)])]),gn,n("p",null,[s("地址："),hn,n("a",fn,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L2342"),e(a)])]),yn,n("p",null,[s("setTimeout："),wn,n("a",xn,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L47-L55"),e(a)]),jn,s(" MessageChannel："),Cn,n("a",Rn,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L228-L234"),e(a)])]),Sn])}const Un=p(u,[["render",_n],["__file","3.html.vue"]]);export{Un as default};
