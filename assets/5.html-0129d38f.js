const e=JSON.parse('{"key":"v-00d3608c","path":"/vue/%E9%AB%98%E7%BA%A7/5.html","title":"vue3源码解析下","lang":"zh-CN","frontmatter":{"date":"2022-05-20T00:00:00.000Z","category":["vue2"],"tag":["vue高级","vue3"],"description":"vue3源码解析下 Diff算法 diff算法的⽬的是为了找到哪些节点发⽣了变化，哪些节点没有发⽣变化可以复⽤。如果⽤最传统的diff算法，如下图所示，每个节点都要遍历另⼀棵树上的所有节点做⽐较，这就是o(n2)的复杂度，加上更新节点时的o(n)复杂度，那就总共达到了o(n3)的复杂度，这对于⼀个结构复杂节点数众多的⻚⾯，成本是⾮常⼤的。 diff 实际上vue和react都对虚拟dom的diff算法做了⼀定的优化，将复杂度降低到了o(n)级别，具体的策略是：同层的节点才相互⽐较；","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/vue/%E9%AB%98%E7%BA%A7/5.html"}],["meta",{"property":"og:title","content":"vue3源码解析下"}],["meta",{"property":"og:description","content":"vue3源码解析下 Diff算法 diff算法的⽬的是为了找到哪些节点发⽣了变化，哪些节点没有发⽣变化可以复⽤。如果⽤最传统的diff算法，如下图所示，每个节点都要遍历另⼀棵树上的所有节点做⽐较，这就是o(n2)的复杂度，加上更新节点时的o(n)复杂度，那就总共达到了o(n3)的复杂度，这对于⼀个结构复杂节点数众多的⻚⾯，成本是⾮常⼤的。 diff 实际上vue和react都对虚拟dom的diff算法做了⼀定的优化，将复杂度降低到了o(n)级别，具体的策略是：同层的节点才相互⽐较；"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-26T07:20:20.000Z"}],["meta",{"property":"article:author","content":"xiaokai"}],["meta",{"property":"article:tag","content":"vue高级"}],["meta",{"property":"article:tag","content":"vue3"}],["meta",{"property":"article:published_time","content":"2022-05-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-26T07:20:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue3源码解析下\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-26T07:20:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xiaokai\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Diff算法","slug":"diff算法","link":"#diff算法","children":[]},{"level":2,"title":"vue2 diff———双端比较","slug":"vue2-diff———双端比较","link":"#vue2-diff———双端比较","children":[{"level":3,"title":"patch","slug":"patch","link":"#patch","children":[]},{"level":3,"title":"patchVnode","slug":"patchvnode","link":"#patchvnode","children":[]},{"level":3,"title":"updateChildren","slug":"updatechildren","link":"#updatechildren","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}]},{"level":2,"title":"Vue3 diff——最⻓递增⼦序列","slug":"vue3-diff——最⻓递增子序列","link":"#vue3-diff——最⻓递增子序列","children":[{"level":3,"title":"Vue3 diff 优化点","slug":"vue3-diff-优化点","link":"#vue3-diff-优化点","children":[]},{"level":3,"title":"实现思路","slug":"实现思路-1","link":"#实现思路-1","children":[]},{"level":3,"title":"最⻓递增⼦序列","slug":"最⻓递增子序列","link":"#最⻓递增子序列","children":[]}]}],"git":{"createdTime":1698304820000,"updatedTime":1698304820000,"contributors":[{"name":"xiaokai-liu","email":"1404197328@qq.com","commits":1}]},"readingTime":{"minutes":25.64,"words":7693},"filePathRelative":"vue/高级/5.md","localizedDate":"2022年5月20日","excerpt":"<h1> vue3源码解析下</h1>\\n<h2> Diff算法</h2>\\n<p>diff算法的⽬的是为了找到哪些节点发⽣了变化，哪些节点没有发⽣变化可以复⽤。如果⽤最传统的diff算法，如下图所示，每个节点都要遍历另⼀棵树上的所有节点做⽐较，这就是o(n<sup>2)的复杂度，加上更新节点时的o(n)复杂度，那就总共达到了o(n</sup>3)的复杂度，这对于⼀个结构复杂节点数众多的⻚⾯，成本是⾮常⼤的。</p>\\n<figure><figcaption>diff</figcaption></figure>\\n<p>实际上vue和react都对虚拟dom的diff算法做了⼀定的优化，将复杂度降低到了o(n)级别，具体的策略是：同层的节点才相互⽐较；</p>","autoDesc":true}');export{e as data};
