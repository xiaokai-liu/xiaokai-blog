import{_ as l,r as c,o as p,c as o,e as t,w as i,f as a,a as n,b as s}from"./app-02fa1acf.js";const r="/assets/flex-3ef95ebf.png",u="/assets/row-8a779bcf.png",d="/assets/row-reverse-82a15036.png",k="/assets/column-4cbad82a.png",g="/assets/column-reverse-9cb80317.png",m="/assets/nowrap-bae57bec.png",v="/assets/wrap-f6a6533a.png",f="/assets/wrap-reverse-ab30d622.png",x="/assets/flex-start-dbed931b.png",b="/assets/flex-end-209e25f3.png",h="/assets/center-03d981c1.png",w="/assets/space-between-805ca0aa.png",y="/assets/space-around-cac33c82.png",_="/assets/stretch-2adabf80.png",z="/assets/flex-start2-84dbc759.png",q="/assets/flex-end2-33c20c1f.png",S="/assets/center2-df186adb.png",F="/assets/baseline-flex-f046fb2a.png",N="/assets/stretch2-f28e4030.png",J="/assets/flex-start3-51a72639.png",B="/assets/flex-end3-03e4c359.png",R="/assets/center3-f0376f17.png",E="/assets/space-between3-640f57c5.png",I="/assets/space-around3-3d8b1abb.png",O="/assets/order-5029dec9.png",X="/assets/flex-grow-50f289ce.png",G="/assets/flex-shink-6dd80839.png",U="/assets/align-self-4a339bb6.png",Q="/assets/align-self2-7914c2c0.png",j={},C=a('<h1 id="flex-布局详解" tabindex="-1"><a class="header-anchor" href="#flex-布局详解" aria-hidden="true">#</a> Flex 布局详解</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>弹性盒子是 CSS3 的一种新的布局模式。CSS3 弹性盒（ Flexible Box 或 flexbox），是一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。引入弹性盒布局模型的目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。</p><p>弹性盒子由弹性容器(Flex container)和弹性子元素(Flex item)组成。弹性容器通过设置 display 属性的值为 flex 或 inline-flex将其定义为弹性容器。弹性容器内包含了一个或多个弹性子元素。</p><h2 id="flex-基本概念" tabindex="-1"><a class="header-anchor" href="#flex-基本概念" aria-hidden="true">#</a> Flex 基本概念</h2><figure><img src="'+r+`" alt="flex" tabindex="0" loading="lazy"><figcaption>flex</figcaption></figure><ul><li><p>在 flex 容器中默认存在两条轴，<mark>水平主轴(main axis) 和垂直的交叉轴(cross axis)</mark>，这是默认的设置，当然你可以通过修改使垂直方向变为主轴，水平方向变为交叉轴。</p></li><li><p>在容器中的每个单元块被称之为 <mark>flex item</mark>，每个项目占据的主轴空间为 (main size), 占据的交叉轴的空间为 (cross size)。</p></li><li><p>这里需要强调，不能先入为主认为宽度就是 main size，高度就是 cross size，这个还要取决于你主轴的方向，如果你垂直方向是主轴，那么项目的高度就是 main size。</p></li></ul><h2 id="flex-容器" tabindex="-1"><a class="header-anchor" href="#flex-容器" aria-hidden="true">#</a> Flex 容器</h2><p>首先，实现 flex 布局需要先指定一个容器，任何一个容器都可以被指定为 flex 布局，这样容器内部的元素就可以使用 flex 来进行布局。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex | inline-flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分别生成一个块状或行内的 flex 容器盒子。简单说来，如果你使用块元素如 div，你就可以使用 flex，而如果你使用行内元素，你可以使用 inline-flex。</p><p><strong>注：当时设置 flex 布局之后，子元素的 float、clear、vertical-align 的属性将会失效。</strong></p><p>有下面六种属性可以设置在容器上，它们分别是：</p><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><h3 id="flex-direction-决定主轴的方向-即项目的排列方向" tabindex="-1"><a class="header-anchor" href="#flex-direction-决定主轴的方向-即项目的排列方向" aria-hidden="true">#</a> flex-direction: 决定主轴的方向(即项目的排列方向)</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
    <span class="token property">flex-direction</span><span class="token punctuation">:</span> row | row-reverse | column | column-reverse<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>默认值：row，主轴为水平方向，起点在左端。</strong></p><figure><img src="`+u+'" alt="row" tabindex="0" loading="lazy"><figcaption>row</figcaption></figure><p><strong>row-reverse：主轴为水平方向，起点在右端</strong></p><figure><img src="'+d+'" alt="row-reverse" tabindex="0" loading="lazy"><figcaption>row-reverse</figcaption></figure><p><strong>column：主轴为垂直方向，起点在上沿</strong></p><figure><img src="'+k+'" alt="column" tabindex="0" loading="lazy"><figcaption>column</figcaption></figure><p><strong>column-reverse：主轴为垂直方向，起点在下沿</strong></p><figure><img src="'+g+'" alt="column-reverse" tabindex="0" loading="lazy"><figcaption>column-reverse</figcaption></figure><h3 id="flex-wrap-决定容器内项目是否可换行" tabindex="-1"><a class="header-anchor" href="#flex-wrap-决定容器内项目是否可换行" aria-hidden="true">#</a> flex-wrap: 决定容器内项目是否可换行</h3><p>默认情况下，项目都排在主轴线上，使用 flex-wrap 可实现项目的换行。</p><p><strong>默认值：nowrap 不换行，即当主轴尺寸固定时，当空间不足时，项目尺寸会随之调整(变形)而并不会挤到下一行。</strong></p><figure><img src="'+m+'" alt="nowrap" tabindex="0" loading="lazy"><figcaption>nowrap</figcaption></figure><p><strong>wrap：项目主轴总尺寸超出容器时换行，第一行在上方</strong></p><figure><img src="'+v+'" alt="wrap" tabindex="0" loading="lazy"><figcaption>wrap</figcaption></figure><p><strong>wrap-reverse：换行，第一行在下方</strong></p><figure><img src="'+f+`" alt="wrap-reverse" tabindex="0" loading="lazy"><figcaption>wrap-reverse</figcaption></figure><h3 id="flex-flow-flex-direction-和-flex-wrap-的简写形式" tabindex="-1"><a class="header-anchor" href="#flex-flow-flex-direction-和-flex-wrap-的简写形式" aria-hidden="true">#</a> flex-flow: flex-direction 和 flex-wrap 的简写形式</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
    <span class="token property">flex-flow</span><span class="token punctuation">:</span> &lt;flex-direction&gt; || &lt;flex-wrap&gt;<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="justify-content-定义了项目在主轴的对齐方式。" tabindex="-1"><a class="header-anchor" href="#justify-content-定义了项目在主轴的对齐方式。" aria-hidden="true">#</a> justify-content：定义了项目在主轴的对齐方式。</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>建立在主轴为水平方向时测试，即 flex-direction: row</strong></p><p><strong>默认值: flex-start 左对齐</strong></p><figure><img src="`+x+'" alt="flex-start" tabindex="0" loading="lazy"><figcaption>flex-start</figcaption></figure><p><strong>flex-end：右对齐</strong></p><figure><img src="'+b+'" alt="flex-end" tabindex="0" loading="lazy"><figcaption>flex-end</figcaption></figure><p><strong>center：居中</strong></p><figure><img src="'+h+'" alt="center" tabindex="0" loading="lazy"><figcaption>center</figcaption></figure><p><strong>space-between：两端对齐，项目之间的间隔相等，即剩余空间等分成间隙。</strong></p><figure><img src="'+w+'" alt="space-between" tabindex="0" loading="lazy"><figcaption>space-between</figcaption></figure><p><strong>space-around：每个项目两侧的间隔相等，所以项目之间的间隔比项目与边缘的间隔大一倍。(边0.5，间隔1)</strong></p><figure><img src="'+y+`" alt="space-around" tabindex="0" loading="lazy"><figcaption>space-around</figcaption></figure><h3 id="align-items-定义了项目在交叉轴上的对齐方式" tabindex="-1"><a class="header-anchor" href="#align-items-定义了项目在交叉轴上的对齐方式" aria-hidden="true">#</a> align-items: 定义了项目在交叉轴上的对齐方式</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>建立在主轴为水平方向时测试，即 flex-direction: row</strong></p><p><strong>默认值为 stretch 即如果项目未设置高度或者设为 auto，将占满整个容器的高度。</strong></p><figure><img src="`+_+'" alt="stretch" tabindex="0" loading="lazy"><figcaption>stretch</figcaption></figure>',52),V=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("container"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("one"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("1"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("one two"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("2"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("one three"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("3"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("one"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("4"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("one"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("5"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Z=n("div",{class:"language-css line-numbers-mode","data-ext":"css"},[n("pre",{class:"language-css"},[n("code",null,[n("span",{class:"token selector"},".container"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"height"),n("span",{class:"token punctuation"},":"),s(" 180px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),s(" 600px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"display"),n("span",{class:"token punctuation"},":"),s(" flex"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"justify-content"),n("span",{class:"token punctuation"},":"),s(" space-between"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"font-size"),n("span",{class:"token punctuation"},":"),s(" 40px"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token selector"},".one"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"background-color"),n("span",{class:"token punctuation"},":"),s(" aqua"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),s("100px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"text-align"),n("span",{class:"token punctuation"},":"),s(" center"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token selector"},".two"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"height"),n("span",{class:"token punctuation"},":"),s(" 100px"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token selector"},".three"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"height"),n("span",{class:"token punctuation"},":"),s(" auto"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`


`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=a('<p>假设容器高度设置为 180px，而项目没有设置高度的情况下，则项目的高度也为 180px。</p><p><strong>flex-start：交叉轴的起点对齐</strong></p><figure><img src="'+z+'" alt="flex-start" tabindex="0" loading="lazy"><figcaption>flex-start</figcaption></figure><p><strong>flex-end：交叉轴的终点对齐</strong></p><figure><img src="'+q+'" alt="flex-end" tabindex="0" loading="lazy"><figcaption>flex-end</figcaption></figure><p><strong>center：交叉轴的中点对齐</strong></p><figure><img src="'+S+'" alt="center" tabindex="0" loading="lazy"><figcaption>center</figcaption></figure><p><strong>baseline: 项目的第一行文字的基线对齐</strong></p><p><strong>以文字的baseline为主，仔细看图可以理解。</strong></p><figure><img src="'+F+`" alt="baseline" tabindex="0" loading="lazy"><figcaption>baseline</figcaption></figure><h3 id="align-content-定义了多根轴线的对齐方式-如果项目只有一根轴线-那么该属性将不起作用" tabindex="-1"><a class="header-anchor" href="#align-content-定义了多根轴线的对齐方式-如果项目只有一根轴线-那么该属性将不起作用" aria-hidden="true">#</a> align-content: 定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
    <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around | stretch<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你 flex-wrap 设置为 nowrap 的时候，容器仅存在一根轴线，因为项目不会换行，就不会产生多条轴线。</p><p>当你 flex-wrap 设置为 wrap 的时候，容器可能会出现多条轴线，这时候你就需要去设置多条轴线之间的对齐方式了。</p><p>建立在主轴为水平方向时测试，即 flex-direction: row, flex-wrap: wrap</p><p><strong>默认值为 stretch，看下面的图就很好理解了</strong></p><figure><img src="`+N+'" alt="stretch" tabindex="0" loading="lazy"><figcaption>stretch</figcaption></figure><p><strong>flex-start：轴线全部在交叉轴上的起点对齐(左上角)</strong></p><figure><img src="'+J+'" alt="flex-start" tabindex="0" loading="lazy"><figcaption>flex-start</figcaption></figure><p><strong>flex-end：轴线全部在交叉轴上的终点对齐(右下角)</strong></p><figure><img src="'+B+'" alt="flex-end" tabindex="0" loading="lazy"><figcaption>flex-end</figcaption></figure><p><strong>center：轴线全部在交叉轴上的中间对齐</strong></p><figure><img src="'+R+'" alt="center" tabindex="0" loading="lazy"><figcaption>center</figcaption></figure><p><strong>space-between：轴线两端对齐，之间的间隔相等，即剩余空间等分成间隙。(类比justify-content)</strong></p><figure><img src="'+E+'" alt="space-between" tabindex="0" loading="lazy"><figcaption>space-between</figcaption></figure><p><strong>space-around：每个轴线两侧的间隔相等，所以轴线之间的间隔比轴线与边缘的间隔大一倍。</strong></p><figure><img src="'+I+`" alt="space-around" tabindex="0" loading="lazy"><figcaption>space-around</figcaption></figure><h2 id="flex-项目属性" tabindex="-1"><a class="header-anchor" href="#flex-项目属性" aria-hidden="true">#</a> Flex 项目属性</h2><p>有六种属性可运用在 item 项目上：</p><ul><li>order</li><li>flex-basis</li><li>flex-grow</li><li>flex-shrink</li><li>flex</li><li>align-self</li></ul><h3 id="order" tabindex="-1"><a class="header-anchor" href="#order" aria-hidden="true">#</a> order</h3><p>定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为 0</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">order</span><span class="token punctuation">:</span> &lt;integer&gt;<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+O+`" alt="order" tabindex="0" loading="lazy"><figcaption>order</figcaption></figure><p>在 HTML 结构中，虽然 -2，-1 的 item 排在后面，但是由于分别设置了 order，使之能够排到最前面。</p><h3 id="flex-basis" tabindex="-1"><a class="header-anchor" href="#flex-basis" aria-hidden="true">#</a> flex-basis</h3><p>定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> &lt;length&gt; | auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认值：auto，即项目本来的大小, 这时候 item 的宽高取决于 width 或 height 的值。</p><p>当主轴为水平方向的时候，当设置了 flex-basis，项目的宽度设置值会失效，flex-basis 需要跟 flex-grow 和 flex-shrink 配合使用才能发挥效果。</p><ul><li>当 flex-basis 值为 0 % 时，是把该项目视为零尺寸的，故即使声明该尺寸为 140px，也并没有什么用。</li><li>当 flex-basis 值为 auto 时，则跟根据尺寸的设定值(假如为 100px)，则这 100px 不会纳入剩余空间。</li></ul>`,41),M=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("container"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("one"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("1"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("one two"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("2"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-css line-numbers-mode","data-ext":"css"},[n("pre",{class:"language-css"},[n("code",null,[n("span",{class:"token selector"},".container"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"height"),n("span",{class:"token punctuation"},":"),s(" 100px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),s(" 220px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"display"),n("span",{class:"token punctuation"},":"),s(" flex"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"justify-content"),n("span",{class:"token punctuation"},":"),s(" space-between"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"font-size"),n("span",{class:"token punctuation"},":"),s(" 40px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"line-height"),n("span",{class:"token punctuation"},":"),s(" 100px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"border"),n("span",{class:"token punctuation"},":"),s(" 1px solid #ccc"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token selector"},".one"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"background-color"),n("span",{class:"token punctuation"},":"),s(" aqua"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"/* 默认值 */"),s(`
    `),n("span",{class:"token property"},"flex-basis"),n("span",{class:"token punctuation"},":"),s(" auto"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),s("100px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"text-align"),n("span",{class:"token punctuation"},":"),s(" center"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token selector"},".two"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"background-color"),n("span",{class:"token punctuation"},":"),s(" skyblue"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"text-align"),n("span",{class:"token punctuation"},":"),s(" center"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"flex-basis"),n("span",{class:"token punctuation"},":"),s(" 70px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"/* flex-basis已经设置，width设置无效 */"),s(`
    `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),s(" 400px"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`


`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),W=a(`<h3 id="flex-grow" tabindex="-1"><a class="header-anchor" href="#flex-grow" aria-hidden="true">#</a> flex-grow</h3><p>定义项目的放大比例</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> &lt;number&gt;<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认值为 0，即如果存在剩余空间，也不放大(依照basis)</p><figure><img src="`+X+'" alt="flex-grow" tabindex="0" loading="lazy"><figcaption>flex-grow</figcaption></figure>',5),Y=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("container"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("one"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("1"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("two"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("2"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("three"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("3"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("four"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("4"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("five"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("5"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=n("div",{class:"language-css line-numbers-mode","data-ext":"css"},[n("pre",{class:"language-css"},[n("code",null,[n("span",{class:"token selector"},".container"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"height"),n("span",{class:"token punctuation"},":"),s(" 100px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),s(" 1000px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"display"),n("span",{class:"token punctuation"},":"),s(" flex"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"font-size"),n("span",{class:"token punctuation"},":"),s(" 40px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"line-height"),n("span",{class:"token punctuation"},":"),s(" 100px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"border"),n("span",{class:"token punctuation"},":"),s(" 1px solid #000"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token selector"},".container div"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"background-color"),n("span",{class:"token punctuation"},":"),s(" aqua"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"text-align"),n("span",{class:"token punctuation"},":"),s(" center"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"flex-grow"),n("span",{class:"token punctuation"},":"),s(" 1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"margin-right"),n("span",{class:"token punctuation"},":"),s("10px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"flex-basis"),n("span",{class:"token punctuation"},":"),s(" 100px"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token selector"},"#three"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"flex-grow"),n("span",{class:"token punctuation"},":"),s(" 2"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token selector"},"#five"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"margin-right"),n("span",{class:"token punctuation"},":"),s(" 0px"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=a(`<ul><li><p>当所有的项目都以 flex-basis 的值进行排列后，仍有剩余空间，那么这时候 flex-grow 就会发挥作用了。</p></li><li><p>如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间。(如果有的话)</p></li><li><p>如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p></li><li><p>当然如果当所有项目以 flex-basis 的值排列完后发现空间不够了，且 flex-wrap：nowrap 时，此时 flex-grow 则不起作用了，这时候就需要接下来的这个属性。</p></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>margin的值也会占用剩余空间</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>demo中的例子
flex-basis的剩余空间空间 width = 1000px - 100 *5px - 10*4px = 460px

flex-grow共有  1 + 1 + 2 + 1 + 1 = 6份

所以 item1 width = 100px + 460/6px = 176.67px
    item3 width = 100px + 460/6px * 2 = 253.33px  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>当子元素felx-grow之和大于0时，子元素的宽度为：本身宽度+剩余宽度ｘ（flex-grow值/flex-grow值之和）
当子元素felx-grow之和小0时，宽度为：本身宽度+剩余宽度ｘflex-grow，和felx-grow之和大于0相比，把flex-grow之和看成1就好了
flex-grow 还会受到 max-width 的影响。如果最终 grow 后的结果大于 max-width 指定的值，max-width 的值将会优先使用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="flex-shrink" tabindex="-1"><a class="header-anchor" href="#flex-shrink" aria-hidden="true">#</a> flex-shrink</h3><p>定义了项目的缩小比例</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> &lt;number&gt;<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认值: 1，即如果空间不足，该项目将缩小，负值对该属性无效。</p><figure><img src="`+G+`" alt="flex-shrink" tabindex="0" loading="lazy"><figcaption>flex-shrink</figcaption></figure><p>每个项目会被同比例进行缩小，因为默认值为 1。</p><p>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。<br> 如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>当子元素felx-grow之和大于0时，子元素的宽度为：本身宽度-溢出宽度ｘ（flex-shrink值ｘ本身宽度/各个flex-shrink值ｘ各自本身宽度之和）
当子元素felx-grow之和小于0时，子元素的宽度为：本身宽度-（溢出宽度 ｘ flex-shrink值之和）ｘ（flex-shrink值ｘ本身宽度/各个flex-shrink值ｘ各自本身宽度之和）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="flex" tabindex="-1"><a class="header-anchor" href="#flex" aria-hidden="true">#</a> flex</h3><p>flex-grow, flex-shrink 和 flex-basis的简写</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span><span class="token punctuation">{</span>
    <span class="token property">flex</span><span class="token punctuation">:</span> none | [ &lt;<span class="token string">&#39;flex-grow&#39;</span>&gt; &lt;<span class="token string">&#39;flex-shrink&#39;</span>&gt;? || &lt;<span class="token string">&#39;flex-basis&#39;</span>&gt; ]
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>flex 的默认值是以上三个属性值的组合。假设以上三个属性同样取默认值，则 flex 的默认值是 0 1 auto。(不放大，缩小，占据主轴空间为自身的width或者)</p><p><strong>有关快捷值：auto (1 1 auto) 和 none (0 0 auto)</strong></p><p><strong>当 flex 取值为一个非负数字，则该数字为 <mark>flex-grow</mark> 值，flex-shrink 取 1，flex-basis 取 0%，如下是等同的：</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当 flex 取值为一个长度或百分比，则视为 <mark>flex-basis</mark> 值，flex-grow 取 1，flex-shrink 取 1，有如下等同情况（注意 0% 是一个百分比而不是一个非负数字）</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item-1</span> <span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">.item-1</span> <span class="token punctuation">{</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">​
.item-2</span> <span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">.item-2</span> <span class="token punctuation">{</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当 flex 取值为两个非负数字，则分别视为 flex-grow 和 flex-shrink 的值，flex-basis 取 0%，如下是等同的：</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> 2 3<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>
    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当 flex 取值为一个非负数字和一个长度或百分比，则分别视为 flex-grow 和 flex-basis 的值，flex-shrink 取 1，如下是等同的：</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> 11 32px<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 11<span class="token punctuation">;</span>
    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>建议优先使用这个属性，而不是单独写三个分离的属性。</li><li>grow 和 shrink 是一对，grow 表示扩张因子，shrink 表示是收缩因子。</li></ul><h3 id="align-self" tabindex="-1"><a class="header-anchor" href="#align-self" aria-hidden="true">#</a> align-self</h3><p>align-self 属性则施加在 flex 容器中的 item 上，允许单个项目有与其他项目不一样的对齐方式，它覆盖了外部容器规定的 align-items 属性，同样也只规定在交叉轴上的对齐方式，如果想设置某一个item有不一样的对齐方式的时候，可以用它（图片来自阮大博客）</p><figure><img src="`+U+'" alt="align-self" tabindex="0" loading="lazy"><figcaption>align-self</figcaption></figure><p>对比 align-items 和 align-self 直接移动 item 自身在交叉轴上的基线，align-content 移动的是容器自身的 flex line，并仅对多行的项目起作用（图片来自阮大博客）</p><figure><img src="'+Q+'" alt="align-self" tabindex="0" loading="lazy"><figcaption>align-self</figcaption></figure>',30);function K(A,L){const e=c("CodeDemo");return p(),o("div",null,[C,t(e,{id:"code-demo-189",type:"normal",title:"stretch",code:"eJyFkNFSwyAQRX9lh2dTG62Og9UvyQslm4AiRNiY1k7/3cUkanVs4YGZPXcve3cvDL04IcW6tm+gnUrpoRI6eFLWY6zEY+WBzxEOHhmU60su/sOBhsCaq9MaEzE7XZ9SMV+d4Tczn19xIXRKnGrxlQT2Y7tB2xqSUN4tu+39WBtsTUbC7fK7VNvUObWT0Dica099ItvsiuyJnj1SpzQWG6QB0U+ihmGR7DtKWI12h8ovctppgI3Sz20Mva/ZyIUoQb326miS8scghFsqlLOtl6D5V4yTJS/4T6ap7xPn3f4WqJ7CyPMVhw8lD6XU"},{default:i(()=>[V,Z]),_:1}),H,t(e,{id:"code-demo-348",type:"normal",title:"flex-basis",code:"eJx9kb1OwzAUhV/FMltF+qdKSKHwJFkc57YxNXaIHdpSVWJkQGJCMDIwd2BhaOFt+sPEK3BDnIYiSjJEOefmnO/GExrbc0l92o3EJeGSGXMSUK6VZUJBGtDTQBG8dmytAI1Wt4HiHp/YocaZdjlTPukh5cZgX33bQSZFRAyiH1uftJrNZHRcaEMR2dgn7XYlRcIkko190pNQameZsaI39vJMUJhhEsbBC8EOAZQb6qHpGXEFPulUcRIRvL+qQ51GkKKWjIjRUkTkgHOO5jRQ9XxDhx0yPuinOlMR1kuNX7CLjLmQRo18zB83s+fl9YLUGg4Ewb2QGWFwNrN6Z9efCBZG1mNS9JVPOO4FqavHn7u/3gzGoczgv4zfFEdVJxJXzvL1ZT2/28ze12+zz8XtN2Hxtnp4Wt3fbFdy59Rx8MiY33T6Bbkk0vw="},{default:i(()=>[M,T]),_:1}),W,t(e,{id:"code-demo-365",type:"normal",title:"flex-basis",code:"eJx1kcFygyAURX+FwW1pY5pubNovcYOA+qYELGC0zeTf+0SJ6SRx48y97953gBNtw0HTgu4lHInQ3PuPkgprAgejXEk/S0PwizZI9KxRqOb7F1RuzDBYNLcPzNapKft6365tP+3bPXDhOGXfkpv+9IkK7/EAzxdocprDrYKmDQXJN5tufJ+1AWRoo7RqEnyn+U9Baq2SVmMZ8/CrCrJbJzXWs3u1lXVSOdS6kXirQZIMN6B5Ls0V2HSaBa7i4qtxtjeSCastZvl3z5e6oMbAuIbGFEQoE5RLWEjIMDbgqkU6cNeAYS5C5StSHK24B7+iIk1psvgOieOqcTtPZNNVJ/tfO7m00PMfFHe04g=="},{default:i(()=>[Y,D]),_:1}),P])}const nn=l(j,[["render",K],["__file","3.html.vue"]]);export{nn as default};
