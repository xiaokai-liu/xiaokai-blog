import{_ as p,r as o,o as c,c as l,a as n,b as s,e,f as t}from"./app-ecd677b5.js";const i="/assets/schedule-d06b1f9a.png",r="/assets/digui-73fc39e3.png",u={},d=t(`<h1 id="react核心源码解析" tabindex="-1"><a class="header-anchor" href="#react核心源码解析" aria-hidden="true">#</a> React核心源码解析</h1><h2 id="react理念" tabindex="-1"><a class="header-anchor" href="#react理念" aria-hidden="true">#</a> React理念</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>我们认为，React 是⽤ JavaScript 构建快速响应的⼤型 Web 应⽤程序的⾸选⽅式。在 Facebook 和Instagram 上表现优秀。ui = render (data) -&gt; 单向数据流</p></div><p>如何提升⻚⾯响应交互？<br> CPU卡顿：⼤量计算操作导致的性能问题<br> IO卡顿：⽹络请求延时的，⽆法快速响应</p><ol><li>CPU卡顿<br> 在浏览器刷新频率为60HZ的情况下（即1000ms / 60HZ = 16.6ms）浏览器刷新⼀次浏览器⾥JS线程与GUI线程是互斥的，不可同时执⾏，所以JS脚本和浏览器的render、painting不能同时执⾏，所以执⾏顺序为： JS脚本执⾏ -&gt;样式布局 -&gt;样式绘制 ，JS执⾏时间超过16.6ms，<br> 就不会执⾏render与painting了</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ReactDOM.render(&lt;App /&gt;, rootElement);</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// APP.js</span>
<span class="token keyword">import</span> <span class="token string">&quot;./styles.css&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token punctuation">{</span><span class="token function">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>React 是如何解决这个问题的？<br> 在浏览器每⼀帧的时间中，预留⼀些时间给JS线程，React利⽤这部分时间更新组件（预留的初始时间是5ms）。</p><p>时间切⽚：把更新过程碎⽚化，把⼀个耗时⻓的任务分成很多⼩⽚。执⾏⾮阻塞渲染，基于优先级应⽤更新以及在后台预渲染内容。</p><p>在开启concurrent mode后</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 通过使⽤ReactDOM.unstable_createRoot开启Concurrent Mode</span>
<span class="token comment">// ReactDOM.render(&lt;App/&gt;, rootEl);</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>rootEl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启时间切⽚后，React⻓尾任务会被切到每⼀帧任务⾥，执⾏时间在5ms左右，就可以保障rendering与painting时间了</p><ol start="2"><li>IO卡顿</li></ol><p>假设⻚⾯加载，是否展示loading<br> 停留时间⻓：显示loading，加载完成后隐藏<br> 停留时间短：不显示loading，⽤户⽆感知，不然loading闪⼀下</p>`,13),k={href:"https://17.reactjs.org/docs/concurrent-mode-suspense.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://17.reactjs.org/docs/concurrent-modereference.html#usedeferredvalue",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"总结：快速响应 -> 同步的⻓尾更新转为可中断的异步更新",-1),b=n("h3",{id:"新老react架构对比",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#新老react架构对比","aria-hidden":"true"},"#"),s(" 新老react架构对比")],-1),f=n("p",null,"React15：",-1),g=n("p",null,[s("Reconciler（协调器）—— 负责找出变化的组件"),n("br"),s(" Renderer（渲染器）—— 负责将变化的组件渲染到⻚⾯上")],-1),h=n("br",null,null,-1),y={href:"https://zh-hans.reactjs.org/docs/codebase-overview.html#reconcilers",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,[s("在React中可以通过this.setState、this.forceUpdate、ReactDOM.render等API触发更新。"),n("br"),s(" 每当有更新发⽣时，Reconciler会做如下⼯作：")],-1),_=n("ol",null,[n("li",null,"调⽤函数组件、或class组件的render⽅法，将返回的JSX转化为虚拟DOM"),n("li",null,"将虚拟DOM和上次更新时的虚拟DOM对⽐"),n("li",null,"通过对⽐找出本次更新中变化的虚拟DOM"),n("li",null,"通知Renderer将变化的虚拟DOM渲染到⻚⾯上")],-1),x=n("br",null,null,-1),R={href:"https://zh-hans.reactjs.org/docs/codebase-overview.html#renderers",target:"_blank",rel:"noopener noreferrer"},F=t("<p>由于React⽀持跨平台，所以不同平台有不同的Renderer。我们前端最熟悉的是负责在浏览器环境渲染的Renderer —— ReactDOM。<br> 除此之外，还有：<br> ReactNative：渲染App原⽣组件<br> ReactArt：渲染到Canvas, SVG 或 VML (IE8)<br> 在每次更新发⽣时，Renderer接到Reconciler通知，将变化的组件渲染在当前宿主环境。</p><p>React 15架构的缺点<br> 在Reconciler中，mount的组件会调⽤mountComponent，update的组件会调⽤updateComponent。这两个⽅法会递归更新⼦组件</p><p>递归的缺点：</p><ol><li>当层级很深时，递归更新时间超过了16ms，⽤户交互就会卡顿</li><li>React 15不⽀持⽤可中断的异步更新代替同步的更新</li></ol>",4),j=n("br",null,null,-1),E={href:"https://codesandbox.io/s/fervent-sutherland-pf7sg?file=/src/App.js",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>React16：</p><p>Scheduler（调度器）—— 调度任务的优先级，⾼优任务优先进⼊Reconciler<br> Reconciler（协调器）—— 负责找出变化的组件<br> Renderer（渲染器）—— 负责将变化的组件渲染到⻚⾯上</p><p>Scheduler（调度器）：</p><p>需要⼀种机制，当浏览器有剩余时间时通知我们，从⽽完成任务调度。<br> 部分浏览器已经实现了这个API，这就是requestIdleCallback。但是由于以下因素，React放弃使⽤：</p><p>浏览器兼容性</p><ul><li>触发频率不稳定，受很多因素影响。⽐如当我们的浏览器切换tab后，之前tab注册的</li><li>requestIdleCallback触发的频率会变得很低</li></ul><p>基于以上原因，React实现了功能更完备的requestIdleCallbackpolyfill，这就是Scheduler。除了在空闲<br> 时触发回调的功能外，Scheduler还提供了多种调度优先级供任务设置。</p><p>Reconciler（协调器）<br> 我们知道，在React15中Reconciler是递归处理虚拟DOM的。让我们看看React16的Reconciler</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 更新⼯作从递归变成了可以中断的循环过程。每次循环都会调⽤shouldYield判断当前是否有剩余时间。</span>
<span class="token comment">/** @noinline */</span>
<span class="token keyword">function</span> <span class="token function">workLoopConcurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Perform work until Scheduler asks us to yield</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">shouldYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        workInProgress <span class="token operator">=</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Q：如何处理中断更新时DOM渲染不完全？</p><p>在React16中，Reconciler与Renderer不再是交替⼯作。当Scheduler将任务交给Reconciler后，Reconciler会为变化的虚拟DOM打上代表增/删/更新的标记</p><p>整个Scheduler与Reconciler的⼯作都在内存中进⾏。只有当所有组件都完成Reconciler的⼯作，才会统⼀交给Renderer。</p>`,12),P=n("br",null,null,-1),L={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactSideEffectTags.js",target:"_blank",rel:"noopener noreferrer"},D=t('<figure><img src="'+i+`" alt="react" tabindex="0" loading="lazy"><figcaption>react</figcaption></figure><p>其中红框中的步骤随时可能由于以下原因被中断：</p><ul><li>有其他更⾼优任务需要先更新</li><li>当前帧没有剩余时间</li></ul><p>由于红框中的⼯作都在内存中进⾏，不会更新⻚⾯上的DOM，所以即使反复中断，⽤户也不会看⻅更新不完全的DOM<br> 同时，由于Scheduler和Reconciler都是平台⽆关的，所以React为他们分别单独发布了⼀个包</p><h3 id="fiber架构详解" tabindex="-1"><a class="header-anchor" href="#fiber架构详解" aria-hidden="true">#</a> Fiber架构详解</h3><p>fiber的核⼼思路：在react中遵循代数效应（algebraic effects）</p><p>代数效应是函数式编程中的⼀个概念，⽤于将副作⽤从函数调⽤中分离。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">getTotalPicNum</span><span class="token punctuation">(</span><span class="token parameter">user1<span class="token punctuation">,</span> user2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> picNum1 <span class="token operator">=</span> <span class="token function">getPicNum</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> picNum2 <span class="token operator">=</span> <span class="token function">getPicNum</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> picNum1 <span class="token operator">+</span> picNum2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设getPickNum需要异步请求：async await？<br> 破坏了上下⽂的⼀致性，需要调⽤它的函数也时async</p><p>假如有⼀个类似的try...catch语法 ------try...handle、perform、resume</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">getPicNum</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> picNum <span class="token operator">=</span> perform name<span class="token punctuation">;</span>
        <span class="token keyword">return</span> picNum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">getTotalPicNum</span><span class="token punctuation">(</span><span class="token string">&#39;xiaokai&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;houwan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token function">handle</span> <span class="token punctuation">(</span><span class="token parameter">who</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>who<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&#39;xiaokai&#39;</span><span class="token operator">:</span>
        resume <span class="token keyword">with</span> <span class="token number">230</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&#39;houwan&#39;</span><span class="token operator">:</span>
        resume <span class="token keyword">with</span> <span class="token number">122</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
        resume <span class="token keyword">with</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代数效应：将副作⽤（例⼦中为请求图⽚数量）从函数逻辑中分离，使函数关注点保持纯粹，也就是不⽤关⼼是同步还是异步<br> Example：Hooks，不⽤关⼼useState中state是如何保存变化的，我们只需要使⽤即可</p><p>React Fiber</p><ol><li><p>定义：React内部实现的⼀套状态更新机制。⽀持任务不同优先级，可中断与恢复，并且恢复后可以复⽤之前的中间状态。</p></li><li><p>功能：</p></li></ol><p>a. 作为架构来说，之前React15的Reconciler采⽤递归的⽅式执⾏，数据保存在递归调⽤栈中，所以被称为stack Reconciler。React16的Reconciler基于Fiber节点实现，被称为FiberReconciler；<br> b. 作为静态的数据结构来说，每个Fiber节点对应⼀个React element，保存了该组件的类型（函数组件/类组件/原⽣组件...）、对应的DOM节点等信息；<br> c. 作为动态的⼯作单元来说，每个Fiber节点保存了本次更新中该组件改变的状态、要执⾏的⼯作（需要被删除/被插⼊⻚⾯中/被更新...）；</p>`,15),W=n("br",null,null,-1),I=n("br",null,null,-1),O={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiber.new.js#L117",target:"_blank",rel:"noopener noreferrer"},M=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">FiberNode</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">tag</span><span class="token operator">:</span> WorkTag<span class="token punctuation">,</span>
    <span class="token literal-property property">pendingProps</span><span class="token operator">:</span> mixed<span class="token punctuation">,</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> string<span class="token punctuation">,</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> TypeOfMode<span class="token punctuation">,</span></span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Instance，静态节点的数据结构属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>elementType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>stateNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// Fiber，⽤来链接其他fiber节点形成的fiber树</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>return <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sibling <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 作为动态的⼯作单元的属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pendingProps <span class="token operator">=</span> pendingProps<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedProps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dependencies <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">=</span> mode<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>effectTag <span class="token operator">=</span> NoEffect<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subtreeTag <span class="token operator">=</span> NoSubtreeEffect<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>deletions <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>firstEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 作为调度优先级的属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>childLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
    <span class="token comment">// 指向该fiber在另⼀次更新时对应的fiber</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>alternate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>enableProfilerTimer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Note: The following is done to avoid a v8 performance cliff.</span>
        <span class="token comment">//</span>
        <span class="token comment">// Initializing the fields below to smis and later updating them with</span>
        <span class="token comment">// double values will cause Fibers to end up having separate shapes.</span>
        <span class="token comment">// This behavior/bug has something to do with Object.preventExtension</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
        <span class="token comment">// Fortunately this only impacts DEV builds.</span>
        <span class="token comment">// Unfortunately it makes React unusably slow for some applications.</span>
        <span class="token comment">// To work around this, initialize the fields below with doubles.</span>
        <span class="token comment">//</span>
        <span class="token comment">// Learn more about this here:</span>
        <span class="token comment">// https://github.com/facebook/react/issues/14365</span>
        <span class="token comment">// https://bugs.chromium.org/p/v8/issues/detail?id=8538</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>actualDuration <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token number">NaN</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>actualStartTime <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token number">NaN</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>selfBaseDuration <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token number">NaN</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>treeBaseDuration <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token number">NaN</span><span class="token punctuation">;</span>
        <span class="token comment">// It&#39;s okay to replace the initial doubles with smis after initializa</span>
        tion<span class="token punctuation">.</span>
        <span class="token comment">// This won&#39;t trigger the performance cliff mentioned above,</span>
        <span class="token comment">// and it simplifies other profiler code (including DevTools).</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>actualDuration <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>actualStartTime <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>selfBaseDuration <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>treeBaseDuration <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// This isn&#39;t directly used but is handy for debugging internals:</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_debugID <span class="token operator">=</span> debugCounter<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_debugSource <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_debugOwner <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_debugNeedsRemount <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_debugHookTypes <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasBadMapPolyfill <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Object<span class="token punctuation">.</span>preventExtensions <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>架构层面</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 指向⽗级Fiber节点</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>return <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 指向⼦Fiber节点</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 指向右边第⼀个兄弟Fiber节点</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>sibling <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 表示的组件结构</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            i am
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">xianzao</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Q：为什么指向的⽗节点是return⽽不是parent？</p><p>因为作为⼀个⼯作单元，return指节点执⾏完completeWork后会返回的下⼀个节点。⼦Fiber节点及其兄弟节点完成⼯作后会返回其⽗级节点，所以⽤return指代⽗级节点</p><ul><li>作为静态数据结构</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// Fiber对应组件的类型 Function/Class...</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>
<span class="token comment">// key属性</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
<span class="token comment">// ⼤部分情况同type，某些情况不同，⽐如FunctionComponent使⽤React.memo包裹</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>elementType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 对于 FunctionComponent，指函数本身，对于ClassComponent，指class</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// Fiber对应的真实DOM节点</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>stateNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>作作为动态⼯作单元</li></ul><p>记录更新相关的信息，主要是updateQueue</p><p>Q：React Fiber 如何更新DOM？</p><p>使⽤“双缓存”<br> 在内存中绘制当前的fiber dom，绘制完毕后直接替换上⼀帧的fiber dom，由于省去了两帧替换间的计算时间，不会出现从⽩屏到出现画⾯的闪烁情况<br> 在React中最多会同时存在两棵Fiber树。当前屏幕上显示内容对应的Fiber树称为current Fiber，正在内存中构建的Fiber树称为workInProgress Fiber，两者通过alternate连接</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>currentFiber<span class="token punctuation">.</span>alternate <span class="token operator">===</span> workInProgressFiber<span class="token punctuation">;</span>
workInProgressFiber<span class="token punctuation">.</span>alternate <span class="token operator">===</span> currentFiber<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>React应⽤的根节点通过current指针指向不同的fiber dom切换，当update时，workInProgressFiberrende完成后会跟currentFiber 替换，下⼀次更新会将当前currentFiber（上⼀次的<br> workInProgressFiber）替换</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> add<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">add</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>mount</li></ul><ol><li>⾸次执⾏ReactDOM.render会创建fiberRootNode（源码中叫fiberRoot）和rootFiber。其中fiberRootNode是整个应⽤的根节点，rootFiber是&lt;App/&gt;所在组件树的根节点；</li></ol><p>a. 区分fiberRootNode与rootFiber：因为在应⽤中我们可以多次调⽤ReactDOM.render渲染不同的组件树，他们会拥有不同的rootFiber。但是整个应⽤的根节点只有⼀个，那就是<br> fiberRootNode；<br> b. fiberRootNode的current会指向当前⻚⾯上已渲染内容对应Fiber树，即current Fiber；<br> c. 因为是⾸次渲染，此时⻚⾯还没有挂在所有的DOM，所以rootFiber还没有⼦fiber dom</p><ol start="2"><li>render阶段，根据组件返回的JSX在内存中依次创建Fiber节点并连接在⼀起构建Fiber树，被称为workInProgress Fiber；</li></ol><p>a. 在构建workInProgress Fiber树时会尝试复⽤current Fiber树中已有的Fiber节点内的属性（后续的diff），在⾸屏渲染时只有rootFiber存在对应的current fiber（即rootFiber.alternate）</p><ol start="3"><li>alternate阶段：此时workInProgress fiber已经构建完成，fiberRootNode的current指向了workInProgress fiber</li></ol><ul><li>update</li></ul><ol><li><p>假设p元素更新，这会开启⼀次新的render阶段并构建⼀棵新的workInProgress Fiber 树，且会尽可能服⽤显有的current Fiber</p></li><li><p>alternate阶段</p></li></ol><p>workInProgress fiber在更换完后，fiberRootNode的current指针更换</p><h2 id="前置知识" tabindex="-1"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h2>`,24),S={href:"https://github.com/facebook/react",target:"_blank",rel:"noopener noreferrer"},N=n("h3",{id:"目录结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目录结构","aria-hidden":"true"},"#"),s(" 目录结构")],-1),T=n("p",null,"主要内容在packages中",-1),U=n("br",null,null,-1),A={href:"https://github.com/facebook/react/tree/main/packages/react",target:"_blank",rel:"noopener noreferrer"},H=n("br",null,null,-1),B=n("br",null,null,-1),X={href:"https://github.com/facebook/react/tree/main/packages/scheduler",target:"_blank",rel:"noopener noreferrer"},q=n("br",null,null,-1),z=n("br",null,null,-1),V={href:"https://github.com/facebook/react/tree/main/packages/shared",target:"_blank",rel:"noopener noreferrer"},J=n("br",null,null,-1),Q=n("li",null,"Render相关",-1),Y=t(`<div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token operator">-</span> react<span class="token operator">-</span>art
<span class="token operator">-</span> react<span class="token operator">-</span>dom # 注意这同时是<span class="token constant">DOM</span>和<span class="token constant">SSR</span>（服务端渲染）的⼊⼝
<span class="token operator">-</span> react<span class="token operator">-</span>native<span class="token operator">-</span>renderer
<span class="token operator">-</span> react<span class="token operator">-</span>noop<span class="token operator">-</span>renderer # ⽤于debug fiber（后⾯会介绍fiber）
<span class="token operator">-</span> react<span class="token operator">-</span>test<span class="token operator">-</span>renderer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实验性⽂件</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token operator">-</span> react<span class="token operator">-</span>server # 创建⾃定义<span class="token constant">SSR</span>流
<span class="token operator">-</span> react<span class="token operator">-</span>client # 创建⾃定义的client
<span class="token operator">-</span> react<span class="token operator">-</span>fetch # ⽤于数据请求
<span class="token operator">-</span> react<span class="token operator">-</span>interactions # ⽤于测试交互相关的内部特性，⽐如React的事件模型
<span class="token operator">-</span> react<span class="token operator">-</span>reconciler # Reconciler的实现，你可以⽤他构建⾃⼰的Renderer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>辅助包</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token operator">-</span> react<span class="token operator">-</span>is # ⽤于测试组件是否是某类型
<span class="token operator">-</span> react<span class="token operator">-</span>client # 创建⾃定义的流
<span class="token operator">-</span> react<span class="token operator">-</span>fetch # ⽤于数据请求
<span class="token operator">-</span> react<span class="token operator">-</span>refresh # “热重载”的React官⽅实现
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),$=n("br",null,null,-1),G={href:"https://github.com/facebook/react/tree/main/packages/react-reconciler",target:"_blank",rel:"noopener noreferrer"},K=n("br",null,null,-1),Z=n("h3",{id:"深入理解jsx",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#深入理解jsx","aria-hidden":"true"},"#"),s(" 深入理解JSX")],-1),nn=n("p",null,[s("JSX和Fiber节点是同⼀个东⻄么？"),n("br"),s(" React Component、React Element是同⼀个东⻄么，他们和JSX有什么关系？")],-1),sn=n("p",null,"JSX在编译时会被Babel编译为React.createElement⽅法，这也是为什么要引⼊ import React from 'react'; 的原因",-1),an=n("br",null,null,-1),en={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react/src/ReactElement.js#L348",target:"_blank",rel:"noopener noreferrer"},tn=t(`<div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> config<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> propName<span class="token punctuation">;</span>
    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> source <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将 config 处理后赋值给 props</span>
    <span class="token comment">// ...省略</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> childrenLength <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment">// 处理 children，会被赋值给props.children</span>
    <span class="token comment">// ...省略</span>
    <span class="token comment">// 处理 defaultProps</span>
    <span class="token comment">// ...省略</span>
    <span class="token keyword">return</span> <span class="token function">ReactElement</span><span class="token punctuation">(</span>
        type<span class="token punctuation">,</span>
        key<span class="token punctuation">,</span>
        ref<span class="token punctuation">,</span>
        self<span class="token punctuation">,</span>
        source<span class="token punctuation">,</span>
        ReactCurrentOwner<span class="token punctuation">.</span>current<span class="token punctuation">,</span>
        props<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">ReactElement</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> self<span class="token punctuation">,</span> source<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token comment">// 标记这是个 React Element</span>
        $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> type<span class="token punctuation">,</span>
        <span class="token literal-property property">key</span><span class="token operator">:</span> key<span class="token punctuation">,</span>
        <span class="token literal-property property">ref</span><span class="token operator">:</span> ref<span class="token punctuation">,</span>
        <span class="token literal-property property">props</span><span class="token operator">:</span> props<span class="token punctuation">,</span>
        <span class="token literal-property property">_owner</span><span class="token operator">:</span> owner<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> element<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在全局API isValidElement⾥，通过$$typeof判断为REACT_ELEMENT_TYPE即为react元素，所以JSX返回的结构也是react element</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isValidElement</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token keyword">typeof</span> object <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>
        object <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
        object<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span> <span class="token operator">===</span> <span class="token constant">REACT_ELEMENT_TYPE</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>React根据classComponent原型上的isReactComponent判断是否为ClassComponent</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token class-name">ClassComponent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isReactComponent<span class="token punctuation">;</span> <span class="token comment">// {}</span>
<span class="token class-name">FunctionComponent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isReactComponent<span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>JSX与Fiber节点的关系</p><ul><li>JSX是⼀种描述当前组件内容的数据结构，他不包含组件schedule、reconcile、render所需的相关信息 <ul><li>⽐如如下信息就不包括在JSX中：组件在更新中的优先级、组件的state、组件被打上的⽤于Renderer的标记</li></ul></li><li>Fiber更多地是⼀种更新机制 <ul><li>在组件mount时，Reconciler根据JSX描述的组件内容⽣成组件对应的Fiber节点</li><li>在update时，Reconciler将JSX与Fiber节点保存的数据对⽐，⽣成组件对应的Fiber节点，并根据对⽐结果为Fiber节点打上标记</li></ul></li></ul><h2 id="架构篇" tabindex="-1"><a class="header-anchor" href="#架构篇" aria-hidden="true">#</a> 架构篇</h2><h2 id="render阶段" tabindex="-1"><a class="header-anchor" href="#render阶段" aria-hidden="true">#</a> render阶段</h2><p>内容：Fiber节点是如何被创建并构建成render树的</p><p>在render的阶段中，根据是同步还是异步，执⾏performSyncWorkOnRoot 和performConcurrentWorkOnRoot</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// performSyncWorkOnRoot会调⽤该⽅法</span>
<span class="token keyword">function</span> <span class="token function">workLoopSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// performConcurrentWorkOnRoot会调⽤该⽅法</span>
<span class="token keyword">function</span> <span class="token function">workLoopConcurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">shouldYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>区别：是否调⽤shouldYield。如果当前浏览器帧没有剩余时间，shouldYield会中⽌循环，直到浏览器有空闲时间后再继续遍历</p><p>说明：<br> workInProgress 代表当前已创建的 workInProgress fiber ；<br> performUnitOfWork ⽅法会创建下⼀个Fiber节点并赋值给 workInProgress ，并将 workInProgress 与已创建的Fiber节点连接起来构成Fiber树；</p><p>虽然fiber reconciler是从stack reconciler重构⽽来，但都是通过遍历的⽅式实现可中断的异步递归</p><ol><li>递</li></ol><p>⾸先从 rootFiber 开始向下深度优先遍历。为遍历到的每个Fiber节点调⽤beginWork（下⾯详细讲）；<br> 该⽅法会根据传⼊的Fiber节点创建⼦Fiber节点，并将这两个Fiber节点连接起来；<br> 当遍历到叶⼦节点（即没有⼦组件的组件）时就会进⼊“归”阶段；</p><ol start="2"><li>归</li></ol><p>在“归”阶段会调⽤completeWork（下⾯详细讲)处理Fiber节点。<br> 当某个Fiber节点执⾏完completeWork，如果其存在兄弟Fiber节点（即fiber.sibling !== null），会进⼊其兄弟Fiber的“递”阶段；<br> 如果不存在兄弟Fiber，会进⼊⽗级Fiber的“归”阶段；“递”和“归”阶段会交错执⾏直到“归”到rootFiber</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            i am
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">text</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="recurrence" tabindex="0" loading="lazy"><figcaption>recurrence</figcaption></figure><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token number">1.</span> rootFiber beginWork
<span class="token number">2.</span> App Fiber beginWork
<span class="token number">3.</span> div Fiber beginWork
<span class="token number">4.</span> <span class="token string">&quot;i am&quot;</span> Fiber beginWork
<span class="token number">5.</span> <span class="token string">&quot;i am&quot;</span> Fiber completeWork
<span class="token number">6.</span> span Fiber beginWork
<span class="token number">7.</span> span Fiber completeWork
<span class="token number">8.</span> div Fiber completeWork
<span class="token number">9.</span> App Fiber completeWork
<span class="token number">10.</span> rootFiber completeWork
<span class="token comment">// 没有叶⼦节点是因为React针对只有单⼀⽂本⼦节点的Fiber节点做了性能优化</span>
<span class="token comment">// 递归的格式</span>
<span class="token keyword">function</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span><span class="token parameter">fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执⾏beginWork</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 执⾏completeWork</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>sibling<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="beginwork" tabindex="-1"><a class="header-anchor" href="#beginwork" aria-hidden="true">#</a> beginWork</h3>`,23),pn=n("br",null,null,-1),on={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L3075",target:"_blank",rel:"noopener noreferrer"},cn=t(`<p>beginWork的⼯作是传⼊当前Fiber节点，创建⼦Fiber节点</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
    <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...省略函数体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>current：当前组件对应的Fiber节点在上⼀次更新时的Fiber节点，即workInProgress.alternate</li><li>workInProgress：当前组件对应的Fiber节点</li><li>renderLanes：优先级相关，后⾯讲</li></ul><p>可以根据current!==null，判断组件时mount还是update</p><ul><li>mount：⾸次渲染，当前组件的fiber节点为null；</li><li>update：之前已经mount，fiber节点不为null；</li></ul><p>基于此原因，beginWork的⼯作可以分为两部分：</p><p>update时：如果current存在，在满⾜⼀定条件时可以复⽤current节点，（diff）这样就能克隆current.child作为workInProgress.child，⽽不需要新建workInProgress.child；<br> mount时：除fiberRootNode以外，current === null。会根据fiber.tag不同，创建不同类型的⼦Fiber节点；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
    <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token comment">// update时：如果current存在可能存在优化路径，可以复⽤current（即上⼀次更新的Fiber节点）</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...省略</span>
        <span class="token comment">// 复⽤current</span>
        <span class="token keyword">return</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>
            current<span class="token punctuation">,</span>
            workInProgress<span class="token punctuation">,</span>
            renderLanes<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// mount时：根据tag不同，创建不同的⼦Fiber节点</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token literal-property property">IndeterminateComponent</span><span class="token operator">:</span>
        <span class="token comment">// ...省略</span>
        <span class="token keyword">case</span> <span class="token literal-property property">LazyComponent</span><span class="token operator">:</span>
        <span class="token comment">// ...省略</span>
        <span class="token keyword">case</span> <span class="token literal-property property">FunctionComponent</span><span class="token operator">:</span>
        <span class="token comment">// ...省略</span>
        <span class="token keyword">case</span> <span class="token literal-property property">ClassComponent</span><span class="token operator">:</span>
        <span class="token comment">// ...省略</span>
        <span class="token keyword">case</span> <span class="token literal-property property">HostRoot</span><span class="token operator">:</span>
        <span class="token comment">// ...省略</span>
        <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span>
        <span class="token comment">// ...省略</span>
        <span class="token keyword">case</span> <span class="token literal-property property">HostText</span><span class="token operator">:</span>
        <span class="token comment">// ...省略</span>
        <span class="token comment">// ...省略其他类型</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>update时</li></ul><p>didReceiveUpdate = false：不需要新建fiber，可以直接复⽤<br> !includesSomeLane(renderLanes, updateLanes)，即当前Fiber节点优先级不够（后⾯讲）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> oldProps <span class="token operator">=</span> current<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">;</span>
    <span class="token keyword">const</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
        oldProps <span class="token operator">!==</span> newProps <span class="token operator">||</span>
        <span class="token function">hasLegacyContextChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>__DEV__ <span class="token operator">?</span> workInProgress<span class="token punctuation">.</span>type <span class="token operator">!==</span> current<span class="token punctuation">.</span>type <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">includesSomeLane</span><span class="token punctuation">(</span>renderLanes<span class="token punctuation">,</span> updateLanes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 省略处理</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>
        current<span class="token punctuation">,</span>
        workInProgress<span class="token punctuation">,</span>
        renderLanes<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),ln=n("p",null,"mount时",-1),rn=n("li",null,[n("p",null,"根据fiber.tag不同，进⼊不同逻辑的fiber创建")],-1),un=n("br",null,null,-1),dn={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactWorkTags.js",target:"_blank",rel:"noopener noreferrer"},kn=n("li",null,[n("p",null,"对于常⻅的组件（FunctionComponent、ClassComponent），会执⾏reconcileChildren")],-1),vn=t(`<div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// mount时：根据tag不同，创建不同的Fiber节点</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">IndeterminateComponent</span><span class="token operator">:</span>
    <span class="token comment">// ...省略</span>
    <span class="token keyword">case</span> <span class="token literal-property property">LazyComponent</span><span class="token operator">:</span>
    <span class="token comment">// ...省略</span>
    <span class="token keyword">case</span> <span class="token literal-property property">FunctionComponent</span><span class="token operator">:</span>
    <span class="token comment">// ...省略</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ClassComponent</span><span class="token operator">:</span>
    <span class="token comment">// ...省略</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostRoot</span><span class="token operator">:</span>
    <span class="token comment">// ...省略</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span>
    <span class="token comment">// ...省略</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostText</span><span class="token operator">:</span>
    <span class="token comment">// ...省略</span>
    <span class="token comment">// ...省略其他类型</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>reconcileChildren <ul><li>mount组件：创建新的⼦Fiber节点；</li><li>update组件：将当前组件与该组件在上次更新时对应的Fiber节点⽐较（Diff），将⽐较的结果⽣成新Fiber节点；</li></ul></li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reconcileChildren</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
    <span class="token literal-property property">nextChildren</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
    <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 对于mount的组件</span>
        workInProgress<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token function">mountChildFibers</span><span class="token punctuation">(</span>
            workInProgress<span class="token punctuation">,</span>
            <span class="token keyword">null</span><span class="token punctuation">,</span>
            nextChildren<span class="token punctuation">,</span>
            renderLanes<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 对于update的组件</span>
        workInProgress<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token function">reconcileChildFibers</span><span class="token punctuation">(</span>
            workInProgress<span class="token punctuation">,</span>
            current<span class="token punctuation">.</span>child<span class="token punctuation">,</span>
            nextChildren<span class="token punctuation">,</span>
            renderLanes<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>mountChildFibers &amp; reconcileChildFibers</p><ul><li>都会⽣成新的fiber节点返回给workInProgress.child，作为本次beginWork的返回值，在下次performUnitOfWork执⾏时workInProgress的⼊参</li></ul></li><li><p>effectTag</p><ul><li>render阶段的⼯作是在内存中进⾏，当⼯作结束后会通知Renderer需要执⾏的DOM操作。要执⾏DOM操作的具体类型就保存在fiber.effectTag中</li></ul></li></ul><h3 id="completework" tabindex="-1"><a class="header-anchor" href="#completework" aria-hidden="true">#</a> completeWork</h3>`,5),mn=n("li",null,"作⽤：针对不同的fiber.tag调⽤不同的处理逻辑",-1),bn=n("br",null,null,-1),fn={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCompleteWork.new.js#L673",target:"_blank",rel:"noopener noreferrer"},gn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">completeWork</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
    <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token literal-property property">IndeterminateComponent</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token literal-property property">LazyComponent</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token literal-property property">SimpleMemoComponent</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token literal-property property">FunctionComponent</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token literal-property property">ForwardRef</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token literal-property property">Fragment</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token literal-property property">Mode</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token literal-property property">Profiler</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token literal-property property">ContextConsumer</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token literal-property property">MemoComponent</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token literal-property property">ClassComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...省略</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token literal-property property">HostRoot</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...省略</span>
            <span class="token function">updateHostContainer</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...省略</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 <span class="token comment">// ...省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>判断update时我们还需要考虑workInProgress.stateNode != null ?（即该Fiber节点是否存在对应的DOM节点）</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">popHostContext</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rootContainerInstance <span class="token operator">=</span> <span class="token function">getRootHostContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> type <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// update的情况</span>
    <span class="token comment">// ...省略</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// mount的情况</span>
    <span class="token comment">// ...省略</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>当update时，Fiber节点已经存在对应DOM节点，所以不需要⽣成DOM节点。需要做的主要是处理props，⽐如：</p><ul><li>onClick、onChange等回调函数的注册</li><li>处理style prop</li><li>处理DANGEROUSLY_SET_INNER_HTML prop</li><li>处理children prop</li></ul></li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// update的情况</span>
    <span class="token function">updateHostComponent</span><span class="token punctuation">(</span>
        current<span class="token punctuation">,</span>
        workInProgress<span class="token punctuation">,</span>
        type<span class="token punctuation">,</span>
        newProps<span class="token punctuation">,</span>
        rootContainerInstance<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),hn=n("br",null,null,-1),yn={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCompleteWork.new.js#L225",target:"_blank",rel:"noopener noreferrer"},wn=n("li",null,[n("p",null,[s("在updateHostComponent内部，被处理完的props会被赋值给workInProgress.updateQueue，并最终会在commit阶段被渲染在⻚⾯上，其中updatePayload为数组形式，他的偶数索引的值"),n("br"),s(" 为变化的prop key，奇数索引的值为变化的prop value")])],-1),_n=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>workInProgress<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> <span class="token punctuation">(</span>updatePayload<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>mount时 <ul><li>为Fiber节点⽣成对应的DOM节点</li><li>将⼦孙DOM节点插⼊刚⽣成的DOM节点中</li><li>与update逻辑中的updateHostComponent类似的处理props的过程</li></ul></li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// mount的情况</span>
<span class="token comment">// ...省略服务端渲染相关逻辑</span>
<span class="token keyword">const</span> currentHostContext <span class="token operator">=</span> <span class="token function">getHostContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 为fiber创建对应DOM节点</span>
<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>
    type<span class="token punctuation">,</span>
    newProps<span class="token punctuation">,</span>
    rootContainerInstance<span class="token punctuation">,</span>
    currentHostContext<span class="token punctuation">,</span>
    workInProgress<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将⼦孙DOM节点插⼊刚⽣成的DOM节点中</span>
<span class="token function">appendAllChildren</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// DOM节点赋值给fiber.stateNode</span>
workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> instance<span class="token punctuation">;</span>
<span class="token comment">// 与update逻辑中的updateHostComponent类似的处理props的过程</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token function">finalizeInitialChildren</span><span class="token punctuation">(</span>
        instance<span class="token punctuation">,</span>
        type<span class="token punctuation">,</span>
        newProps<span class="token punctuation">,</span>
        rootContainerInstance<span class="token punctuation">,</span>
        currentHostContext<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">markUpdate</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>effectList</li></ul><p>Q：作为DOM操作的依据，commit阶段需要找到所有有effectTag的Fiber节点并依次执⾏effectTag对应操作。难道需要在commit阶段再遍历⼀次Fiber树寻找effectTag !== null的Fiber节点么？</p><p>completeWork在上层函数completeUnitOfWork上维护了⼀个单向链表<br> effectList中第⼀个Fiber节点保存在fiber.firstEffect，最后⼀个元素保存在fiber.lastEffect。</p><p>类似appendAllChildren，在“归”阶段，所有有effectTag的Fiber节点都会被追加在effectList中，最终形成⼀条以rootFiber.firstEffect为起点的单向链表。</p>`,7),xn=n("br",null,null,-1),Rn={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1744",target:"_blank",rel:"noopener noreferrer"},Fn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>                       nextEffect          nextEffect
rootFiber<span class="token punctuation">.</span>firstEffect <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> fiber <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> fiber
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在performSyncWorkOnRoot函数中fiberRootNode被传递给commitRoot⽅法，开启commit阶段⼯作流程</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">commitRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="commit阶段" tabindex="-1"><a class="header-anchor" href="#commit阶段" aria-hidden="true">#</a> commit阶段</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">commitRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在rootFiber.firstEffect上保存了⼀条需要执⾏副作⽤的Fiber节点的单向链表effectList，这些Fiber节点的updateQueue中保存了变化的props<br> 这些副作⽤对应的DOM操作在commit阶段执⾏。</p>`,6),jn=n("br",null,null,-1),En={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L2001",target:"_blank",rel:"noopener noreferrer"},Cn=t(`<p>除此之外，⼀些⽣命周期钩⼦（⽐如componentDidXXX）、hook（⽐如useEffect）需要在commit阶段执⾏。</p><p>commit阶段的主要⼯作（即Renderer的⼯作流程）分为三部分：</p><ol><li>before mutation阶段（执⾏DOM操作前）</li><li>mutation阶段（执⾏DOM操作）</li><li>layout阶段（执⾏DOM操作后）</li></ol><ul><li>before mutation</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token comment">// 触发useEffect回调与其他同步任务。由于这些任务可能触发新的渲染，所以这⾥要⼀直遍历执⾏直到没有任务</span>
    <span class="token function">flushPassiveEffects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>rootWithPendingPassiveEffects <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// root指 fiberRootNode</span>
 <span class="token comment">// root.finishedWork指当前应⽤的rootFiber</span>
 <span class="token keyword">const</span> finishedWork <span class="token operator">=</span> root<span class="token punctuation">.</span>finishedWork<span class="token punctuation">;</span>
 <span class="token comment">// 凡是变量名带lane的都是优先级相关</span>
 <span class="token keyword">const</span> lanes <span class="token operator">=</span> root<span class="token punctuation">.</span>finishedLanes<span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>finishedWork <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 root<span class="token punctuation">.</span>finishedWork <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 root<span class="token punctuation">.</span>finishedLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
 <span class="token comment">// 重置Scheduler绑定的回调函数</span>
 root<span class="token punctuation">.</span>callbackNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 root<span class="token punctuation">.</span>callbackId <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
 <span class="token keyword">let</span> remainingLanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>lanes<span class="token punctuation">,</span> finishedWork<span class="token punctuation">.</span>childLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 重置优先级相关变量</span>
 <span class="token function">markRootFinished</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> remainingLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 清除已完成的discrete updates，例如：⽤户⿏标点击触发的更新。</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>rootsWithPendingDiscreteUpdates <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token operator">!</span><span class="token function">hasDiscreteLanes</span><span class="token punctuation">(</span>remainingLanes<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        rootsWithPendingDiscreteUpdates<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rootsWithPendingDiscreteUpdates<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token comment">// 重置全局变量</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> workInProgressRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    workInProgressRoot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    workInProgress <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    workInProgressRootRenderLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>

 <span class="token punctuation">}</span>
<span class="token comment">// 将effectList赋值给firstEffect</span>
 <span class="token comment">// 由于每个fiber的effectList只包含他的⼦孙节点</span>
 <span class="token comment">// 所以根节点如果有effectTag则不会被包含进来</span>
 <span class="token comment">// 所以这⾥将有effectTag的根节点插⼊到effectList尾部</span>
 <span class="token comment">// 这样才能保证有effect的fiber都在effectList中</span>
 <span class="token keyword">let</span> firstEffect<span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>effectTag <span class="token operator">&gt;</span> PerformedWork<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>lastEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    finishedWork<span class="token punctuation">.</span>lastEffect<span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> finishedWork<span class="token punctuation">;</span>
    firstEffect <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>firstEffect<span class="token punctuation">;</span>
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    firstEffect <span class="token operator">=</span> finishedWork<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根节点没有effectTag</span>
    firstEffect <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>firstEffect<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>before mutation之前主要做⼀些变量赋值，状态重置的⼯作。</p><ul><li>layout</li></ul><p>主要包括三点内容：</p><ol><li>useEffect相关的处理：后⾯详细讲</li><li>性能追踪相关：代码⾥有很多和interaction相关的变量。他们都和追踪React渲染时间、性能相关，在Profiler API和DevTool中使⽤，你可以在这⾥看到interaction的定义</li><li>在commit阶段会触发⼀些⽣命周期钩⼦（如 componentDidXXX）和hook（如useLayoutEffect、useEffect）。在这些回调⽅法中可能触发新的更新，新的更新会开启新的render-commit流程。</li></ol><h4 id="before-mutation-执行dom前" tabindex="-1"><a class="header-anchor" href="#before-mutation-执行dom前" aria-hidden="true">#</a> before mutation（执⾏DOM前）</h4><p>遍历effectList并调⽤commitBeforeMutationEffects函数处理。</p>`,11),Pn=n("br",null,null,-1),Ln={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L2104-L2127",target:"_blank",rel:"noopener noreferrer"},Dn=t(`<div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 保存之前的优先级，以同步优先级执⾏，执⾏完毕后恢复之前优先级</span>
<span class="token keyword">const</span> previousLanePriority <span class="token operator">=</span> <span class="token function">getCurrentUpdateLanePriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setCurrentUpdateLanePriority</span><span class="token punctuation">(</span>SyncLanePriority<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将当前上下⽂标记为CommitContext，作为commit阶段的标志</span>
<span class="token keyword">const</span> prevExecutionContext <span class="token operator">=</span> executionContext<span class="token punctuation">;</span>
executionContext <span class="token operator">|=</span> CommitContext<span class="token punctuation">;</span>
<span class="token comment">// 处理focus状态</span>
focusedInstanceHandle <span class="token operator">=</span> <span class="token function">prepareForCommit</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>containerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
shouldFireAfterActiveInstanceBlur <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token comment">// beforeMutation阶段的主函数</span>
<span class="token function">commitBeforeMutationEffects</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
focusedInstanceHandle <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要讲下 commitBeforeMutationEffects</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">commitBeforeMutationEffects</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldFireAfterActiveInstanceBlur <span class="token operator">&amp;&amp;</span> focusedInstanceHandle <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...focus blur相关</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> effectTag <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>effectTag<span class="token punctuation">;</span>
        <span class="token comment">// 调⽤getSnapshotBeforeUpdate</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> Snapshot<span class="token punctuation">)</span> <span class="token operator">!==</span> NoEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">commitBeforeMutationEffectOnFiber</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 调度useEffect</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> Passive<span class="token punctuation">)</span> <span class="token operator">!==</span> NoEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rootDoesHavePassiveEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                rootDoesHavePassiveEffects <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token function">scheduleCallback</span><span class="token punctuation">(</span>NormalSchedulerPriority<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token function">flushPassiveEffects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        nextEffect <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>处理DOM节点渲染、删除后的autoFocus、blur等操作；</li><li>调⽤getSnapshotBeforeUpdate</li><li>调度 useEffect</li></ol><p>调⽤getSnapshotBeforeUpdate</p>`,5),Wn=n("br",null,null,-1),In=n("br",null,null,-1),On={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L222",target:"_blank",rel:"noopener noreferrer"},Mn=t(`<p>因为在V16版本后，componentWillXXX钩⼦为UNSAFE_，所以，React提供了替代的⽣命周期钩⼦getSnapshotBeforeUpdate，getSnapshotBeforeUpdate是在commit阶段内的before mutation阶段调⽤的，由于commit阶段是同步的，所以不会遇到多次调⽤的问题</p><p>为什么从Reactv16开始，componentWillXXX钩⼦前增加了UNSAFE_前缀？</p><p>从React15升级为React16后，源码改动如此之⼤，说React被重构可能更贴切些。正是由于变动如此之⼤，使得⼀些特性在新旧版本React中表现不⼀致</p><p>在Stack Reconciler重构为Fiber Reconciler后，render阶段的任务可能中断/重新开始，对应的组件在render阶段的⽣命周期钩⼦（即componentWillXXX）可能触发多次。<br> 这种⾏为和Reactv15不⼀致，所以标记为UNSAFE_。</p><ul><li>componentWillMount -- componentDidMount</li><li>componentWillRecieveProps -- getDerivedStateFromProps</li><li>componentWillUpdate -- getDerivedStateFromProps</li></ul><p>在React更新⾥，每次发起更新都会创建⼀个Update对象，同⼀组件的多个Update，会以链表的形式保存在updateQueue中。</p><ul><li>update</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">update</span><span class="token operator">:</span> Update<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...省略当前不需要关注的字段</span>
    lane<span class="token punctuation">,</span> <span class="token comment">// 表示调度优先级</span>
    <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 更新挂载的数据，对于this.setState创建的更新，payload为this.setState的传参</span>
    <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token comment">// 与其他update形成链表</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>updateQueue</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">queue</span><span class="token operator">:</span> UpdateQueue<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">baseState</span><span class="token operator">:</span> fiber<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> <span class="token comment">// 更新基于哪个state开始</span>
    <span class="token literal-property property">firstBaseUpdate</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 更新开始和结束的update</span>
    <span class="token literal-property property">lastBaseUpdate</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 更新的单个或多个update形成的链表</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 其他参数省略...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// baseUpdate + shared.pending会作为本次更新需要执⾏的Update</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设，某个组件updateQueue 存在4个update，数字代表优先级</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>baseState <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token constant">A1</span> <span class="token operator">-</span> <span class="token constant">B2</span> <span class="token operator">-</span> <span class="token constant">C1</span> <span class="token operator">-</span> <span class="token constant">D2</span>
<span class="token comment">// 为了保证更新的连贯性，第⼀个被跳过的update（B）和后⾯的update会作为第⼆次渲染的baseUpdate</span>
<span class="token comment">// 为BCD</span>
<span class="token comment">// ⾸次渲染后</span>
<span class="token literal-property property">baseState</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token literal-property property">Updates</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A1</span><span class="token punctuation">,</span> <span class="token constant">C1</span><span class="token punctuation">]</span>
Result state<span class="token operator">:</span> <span class="token string">&#39;AC&#39;</span>
<span class="token comment">// 第⼆次渲染，B在第⼀次渲染时被跳过，所以在他之后的C造成的渲染结果不会体现在第⼆次渲染的baseState中。所以baseState为A⽽不是上次渲染的Result state AC</span>
<span class="token comment">// 。这也是为了保证更新的连贯性</span>
<span class="token literal-property property">baseState</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span> <span class="token comment">// 为了保证⼀致性，C不在</span>
<span class="token literal-property property">Updates</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">B2</span><span class="token punctuation">,</span> <span class="token constant">C1</span><span class="token punctuation">,</span> <span class="token constant">D2</span><span class="token punctuation">]</span>
Result state<span class="token operator">:</span> <span class="token string">&#39;ABCD&#39;</span>
<span class="token comment">// Updates⾥出现了两次C</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>调度useEffect</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 调度useEffect</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> Passive<span class="token punctuation">)</span> <span class="token operator">!==</span> NoEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rootDoesHavePassiveEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rootDoesHavePassiveEffects <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">scheduleCallback</span><span class="token punctuation">(</span>NormalSchedulerPriority<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// scheduler提供，调度优先级的回调</span>
            <span class="token comment">// 触发useEffect</span>
            <span class="token function">flushPassiveEffects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 具体⻅后⽂hooks</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在flushPassiveEffects⽅法内部会从全局变量rootWithPendingPassiveEffects获取effectList，就是会遍历rootWithPendingPassiveEffects（即effectList）执⾏effect回调函数。</p>`,15),Sn=n("br",null,null,-1),Nn={href:"https://zh-hans.reactjs.org/docs/hooks-reference.html#timing-of-effects",target:"_blank",rel:"noopener noreferrer"},Tn=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"提示"),n("p",null,"与 componentDidMount、componentDidUpdate 不同的是，在浏览器完成布局与绘制之后，传给useEffect 的函数会延迟调⽤。这使得它适⽤于许多常⻅的副作⽤场景，⽐如设置订阅和事件处理等情况，因此不应在函数中执⾏阻塞浏览器更新屏幕的操作。")],-1),Un=n("p",null,"防⽌同步执⾏时阻塞浏览器渲染",-1),An=n("h4",{id:"mutation-执行dom中",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mutation-执行dom中","aria-hidden":"true"},"#"),s(" mutation（执⾏DOM中）")],-1),Hn=n("p",null,"类似 before mutation，mutation遍历effectList执⾏函数。这⾥执⾏的是commitMutationEffects。",-1),Bn=n("br",null,null,-1),Xn={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L2091",target:"_blank",rel:"noopener noreferrer"},qn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>nextEffect <span class="token operator">=</span> firstEffect<span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
 <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">commitMutationEffects</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> renderPriorityLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">invariant</span><span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;Should be working on an effect.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">captureCommitPhaseError</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    nextEffect <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">commitMutationEffects</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot<span class="token punctuation">,</span> renderPriorityLevel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遍历effectList</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> effectTag <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>effectTag<span class="token punctuation">;</span>
        <span class="token comment">// 根据 ContentReset effectTag重置⽂字节点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> ContentReset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">commitResetTextContent</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 更新ref</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> Ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">commitDetachRef</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 根据 effectTag 分别处理</span>
        <span class="token keyword">const</span> primaryEffectTag <span class="token operator">=</span>
        effectTag <span class="token operator">&amp;</span> <span class="token punctuation">(</span>Placement <span class="token operator">|</span> Update <span class="token operator">|</span> Deletion <span class="token operator">|</span> Hydrating<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>primaryEffectTag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 插⼊DOM</span>
            <span class="token keyword">case</span> <span class="token literal-property property">Placement</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token function">commitPlacement</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
                nextEffect<span class="token punctuation">.</span>effectTag <span class="token operator">&amp;=</span> <span class="token operator">~</span>Placement<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 插⼊DOM 并 更新DOM</span>
            <span class="token keyword">case</span> <span class="token literal-property property">PlacementAndUpdate</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token comment">// 插⼊</span>
                <span class="token function">commitPlacement</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
                nextEffect<span class="token punctuation">.</span>effectTag <span class="token operator">&amp;=</span> <span class="token operator">~</span>Placement<span class="token punctuation">;</span>
                <span class="token comment">// 更新</span>
                <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
                <span class="token function">commitWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// SSR</span>
            <span class="token keyword">case</span> <span class="token literal-property property">Hydrating</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                nextEffect<span class="token punctuation">.</span>effectTag <span class="token operator">&amp;=</span> <span class="token operator">~</span>Hydrating<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// SSR</span>
            <span class="token keyword">case</span> <span class="token literal-property property">HydratingAndUpdate</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                nextEffect<span class="token punctuation">.</span>effectTag <span class="token operator">&amp;=</span> <span class="token operator">~</span>Hydrating<span class="token punctuation">;</span>
                <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
                <span class="token function">commitWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 更新DOM</span>
            <span class="token keyword">case</span> <span class="token literal-property property">Update</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
                <span class="token function">commitWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 删除DOM</span>
            <span class="token keyword">case</span> <span class="token literal-property property">Deletion</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token function">commitDeletion</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> nextEffect<span class="token punctuation">,</span> renderPriorityLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        nextEffect <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执⾏内容：</p><ol><li>根据ContentReset effectTag重置⽂字节点</li><li>更新ref</li><li>根据effectTag分别处理，其中effectTag包括(Placement | Update | Deletion | Hydrating)，hydrate是SSR，不考虑</li></ol><ul><li>placement effect：插⼊DOM</li></ul><p>调⽤：commitPlacement</p>`,6),zn=n("br",null,null,-1),Vn={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L1156",target:"_blank",rel:"noopener noreferrer"},Jn=t(`<p>实现内容：</p><ol><li>获取⽗DOM节点，其中finishedWork为传⼊的Fiber节点。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> parentFiber <span class="token operator">=</span> <span class="token function">getHostParentFiber</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ⽗级DOM节点</span>
<span class="token keyword">const</span> parentStateNode <span class="token operator">=</span> parentFiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>获取fiber节点的DOM兄弟节点</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> before <span class="token operator">=</span> <span class="token function">getHostSibling</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>根据DOM的兄弟节点是否存在调⽤parentNode.insertBefore 或者 parentNode.appendChild，插⼊DOM</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// parentStateNode是否是rootFiber</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token function">insertOrAppendPlacementNodeIntoContainer</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">,</span> before<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
 <span class="token function">insertOrAppendPlacementNode</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">,</span> before<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Q：渲染DOM中时间复杂度最⾼的操作是？<br> getHostSibling（获取兄弟DOM节点）<br> 当在同⼀个⽗Fiber节点下依次执⾏多个插⼊操作，getHostSibling算法的复杂度为指数级。<br> 这是由于Fiber节点不只包括HostComponent，所以Fiber树和渲染的DOM树节点并不是⼀⼀对应的。要从Fiber节点找到DOM节点很可能跨层级遍历</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">;
}
function App() </span><span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">(</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
 <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token plain-text">
ReactDOM.render(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">, document.getElementById(&#39;root&#39;));
// Fiber树
 child child child child
rootFiber -----&gt; App -----&gt; div -----&gt; Item -----&gt; li
// DOM树
#root ---&gt; div ---&gt; li
// 在div的⼦节点Item前加⼀个p
function App() </span><span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">(</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
 <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token plain-text">
// Fiber树
 child child child
rootFiber -----&gt; App -----&gt; div -----&gt; p
 | sibling child
| -------&gt; Item -----&gt; li
// DOM树
#root ---&gt; div ---&gt; p
 |
 ---&gt; li
// 此时dom中p的兄弟节点是li
// fiber中fiberP的兄弟节点是fiberItem，fiberItem的⼦节点才是li
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>update effect</li></ul>`,10),Qn=n("br",null,null,-1),Yn=n("br",null,null,-1),$n={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L1441",target:"_blank",rel:"noopener noreferrer"},Gn=n("p",null,"主要关注：FunctionComponent和HostComponent",-1),Kn=n("ol",null,[n("li",null,"FunctionComponent mutation")],-1),Zn=n("br",null,null,-1),ns=n("br",null,null,-1),ss=n("br",null,null,-1),as={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L314",target:"_blank",rel:"noopener noreferrer"},es=n("ol",{start:"2"},[n("li",null,"HostComponent mutation")],-1),ts=n("br",null,null,-1),ps=n("br",null,null,-1),os={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-dom/src/client/ReactDOMHostConfig.js#L423",target:"_blank",rel:"noopener noreferrer"},cs=n("br",null,null,-1),ls=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> updatePayload<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> propKey <span class="token operator">=</span> updatePayload<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> propValue <span class="token operator">=</span> updatePayload<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 处理 style</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>propKey <span class="token operator">===</span> <span class="token constant">STYLE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setValueForStyles</span><span class="token punctuation">(</span>domElement<span class="token punctuation">,</span> propValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 处理 DANGEROUSLY_SET_INNER_HTML</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>propKey <span class="token operator">===</span> <span class="token constant">DANGEROUSLY_SET_INNER_HTML</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setInnerHTML</span><span class="token punctuation">(</span>domElement<span class="token punctuation">,</span> propValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 处理 children</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>propKey <span class="token operator">===</span> <span class="token constant">CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTextContent</span><span class="token punctuation">(</span>domElement<span class="token punctuation">,</span> propValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理剩余 props</span>
        <span class="token function">setValueForProperty</span><span class="token punctuation">(</span>domElement<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> propValue<span class="token punctuation">,</span> isCustomComponentTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>deletion effect</li></ul><p>当Fiber节点含有Deletion effectTag，意味着该Fiber节点对应的DOM节点需要从⻚⾯中删除。调⽤的⽅法为commitDeletion。</p>`,3),is=n("br",null,null,-1),rs={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L1421",target:"_blank",rel:"noopener noreferrer"},us=t(`<ol><li>递归调⽤Fiber节点及其⼦孙Fiber节点中fiber.tag为ClassComponent的componentWillUnmount⽣命周期钩⼦，从⻚⾯移除Fiber节点对应DOM节点</li><li>解绑ref</li><li>调度useEffect的销毁函数</li></ol><h4 id="layout-执行dom后" tabindex="-1"><a class="header-anchor" href="#layout-执行dom后" aria-hidden="true">#</a> layout（执⾏DOM后）</h4><p>之所以称为layout，因为该阶段的代码都是在DOM渲染完成（mutation阶段完成）后执⾏的。该阶段触发的⽣命周期钩⼦和hook可以直接访问到已经改变后的DOM，即该阶段是可以参与DOM layout的阶段</p><ul><li>layout阶段也是遍历effectList</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>root<span class="token punctuation">.</span>current <span class="token operator">=</span> finishedWork<span class="token punctuation">;</span>
nextEffect <span class="token operator">=</span> firstEffect<span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">commitLayoutEffects</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> lanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">invariant</span><span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Should be working on an effect.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">captureCommitPhaseError</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        nextEffect <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
nextEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>commitLayoutEffects</li></ul>`,6),ds=n("br",null,null,-1),ks={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L2302",target:"_blank",rel:"noopener noreferrer"},vs=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">commitLayoutEffects</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot<span class="token punctuation">,</span> <span class="token literal-property property">committedLanes</span><span class="token operator">:</span> Lanes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> effectTag <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>effectTag<span class="token punctuation">;</span>
        <span class="token comment">// 调⽤⽣命周期钩⼦和hook</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> <span class="token punctuation">(</span>Update <span class="token operator">|</span> Callback<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
            <span class="token function">commitLayoutEffectOnFiber</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> current<span class="token punctuation">,</span> nextEffect<span class="token punctuation">,</span> committedLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 赋值ref</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> Ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">commitAttachRef</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        nextEffect <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>commitLayoutEffectOnFiber（调⽤⽣命周期钩⼦和hook相关操作）</li><li>commitAttachRef（赋值 ref）</li></ol><ul><li>commitLayoutEffectOnFiber</li></ul>`,3),ms=n("br",null,null,-1),bs={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L459",target:"_blank",rel:"noopener noreferrer"},fs=t(`<ol><li>对于ClassComponent</li></ol><p>a. 通过current === null?区分是mount还是update，调⽤componentDidMount 或者componentDidUpdate<br> b. 触发状态更新的this.setState如果赋值了第⼆个参数回调函数，也会在此时调⽤</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">xxx</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;i am update~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>对于FunctionComponent及相关类型（如ForwardRef、React.memo或者HOC），他会调⽤useLayoutEffect hook的回调函数，调度useEffect的销毁与回调函数</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 以下都是FunctionComponent及相关类型</span>
    <span class="token keyword">case</span> <span class="token literal-property property">FunctionComponent</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ForwardRef</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">SimpleMemoComponent</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">Block</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执⾏useLayoutEffect的回调函数</span>
    <span class="token function">commitHookEffectListMount</span><span class="token punctuation">(</span>HookLayout <span class="token operator">|</span> HookHasEffect<span class="token punctuation">,</span> finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调度useEffect的销毁函数与回调函数</span>
    <span class="token function">schedulePassiveEffects</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>commitAttachRef</li></ul><p>获取DOM实例，更新Ref</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">commitAttachRef</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">finishedWork</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ref <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>ref<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> instance <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>
        <span class="token comment">// 获取DOM实例</span>
        <span class="token keyword">let</span> instanceToUse<span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span>
            instanceToUse <span class="token operator">=</span> <span class="token function">getPublicInstance</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
            instanceToUse <span class="token operator">=</span> instance<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ref <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果ref是函数形式，调⽤回调函数</span>
            <span class="token function">ref</span><span class="token punctuation">(</span>instanceToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果ref是ref实例形式，赋值ref.current</span>
            ref<span class="token punctuation">.</span>current <span class="token operator">=</span> instanceToUse<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>current fiber切换</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>root<span class="token punctuation">.</span>current <span class="token operator">=</span> finishedWork<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为双缓存策略，workInProgress Fiber树在commit阶段完成渲染后会变为current Fiber树。这⾏代码的作⽤就是切换fiberRootNode指向的current Fiber树。</p><p>Q：双缓存切换执⾏时间<br> mutation阶段结束后，layout阶段开始前</p><p>所以</p><ol><li>componentWillUnmount在mutation阶段执⾏。此时current Fiber树还指向前⼀次更新的Fiber树，在⽣命周期钩⼦内获取的DOM还是更新前的；</li><li>componentDidMount和componentDidUpdate会在layout阶段执⾏。此时current Fiber树已经指向更新后的Fiber树，在⽣命周期钩⼦内获取的DOM就是更新后的；</li></ol>`,14);function gs(hs,ys){const a=o("ExternalLinkIcon");return c(),l("div",null,[d,n("ul",null,[n("li",null,[s("Suspense："),n("a",k,[s("https://17.reactjs.org/docs/concurrent-mode-suspense.html"),e(a)])]),n("li",null,[s("useDeferredValue："),n("a",v,[s("https://17.reactjs.org/docs/concurrent-modereference.html#usedeferredvalue"),e(a)])])]),m,b,f,g,n("ul",null,[n("li",null,[s("Reconciler："),h,n("a",y,[s("https://zh-hans.reactjs.org/docs/codebase-overview.html#reconcilers"),e(a)])])]),w,_,n("ul",null,[n("li",null,[s("Renderer："),x,n("a",R,[s("https://zh-hans.reactjs.org/docs/codebase-overview.html#renderers"),e(a)])])]),F,n("p",null,[s("demo："),j,n("a",E,[s("https://codesandbox.io/s/fervent-sutherland-pf7sg?file=/src/App.js"),e(a)])]),C,n("p",null,[s("详细官⽅介绍："),P,n("a",L,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactSideEffectTags.js"),e(a)])]),D,n("p",null,[s("react fiber node定义"),W,s(" 地址："),I,n("a",O,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiber.new.js#L117"),e(a)])]),M,n("p",null,[s("github地址："),n("a",S,[s("https://github.com/facebook/react"),e(a)])]),N,T,n("ul",null,[n("li",null,[s("react："),U,s(" 地址："),n("a",A,[s("https://github.com/facebook/react/tree/main/packages/react"),e(a)]),H,s(" 内容：全局React API，如React.createElement、React.Component等")]),n("li",null,[s("scheduler："),B,s(" 地址："),n("a",X,[s("https://github.com/facebook/react/tree/main/packages/scheduler"),e(a)]),q,s(" 内容：scheduler实现")]),n("li",null,[s("Shared："),z,s(" 地址："),n("a",V,[s("https://github.com/facebook/react/tree/main/packages/shared"),e(a)]),J,s(" 内容：其他模块中公⽤的⽅法和全局变量")]),Q]),Y,n("ul",null,[n("li",null,[s("react-reconciler（核⼼关注点）"),$,s(" 地址："),n("a",G,[s("https://github.com/facebook/react/tree/main/packages/react-reconciler"),e(a)]),K,s(" 内容：React16核⼼更新内容")])]),Z,nn,sn,n("p",null,[s("地址："),an,n("a",en,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react/src/ReactElement.js#L348"),e(a)])]),tn,n("p",null,[s("地址："),pn,n("a",on,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L3075"),e(a)])]),cn,n("ul",null,[n("li",null,[ln,n("ul",null,[rn,n("li",null,[n("p",null,[s("官⽹地址："),un,n("a",dn,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactWorkTags.js"),e(a)])])]),kn])])]),vn,n("ul",null,[mn,n("li",null,[s("地址："),bn,n("a",fn,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCompleteWork.new.js#L673"),e(a)])])]),gn,n("ul",null,[n("li",null,[n("p",null,[s("updateHostComponent git地址："),hn,n("a",yn,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCompleteWork.new.js#L225"),e(a)])])]),wn]),_n,n("p",null,[s("地址："),xn,n("a",Rn,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1744"),e(a)])]),Fn,n("p",null,[s("源码地址："),jn,n("a",En,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L2001"),e(a)])]),Cn,n("p",null,[s("地址："),Pn,n("a",Ln,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L2104-L2127"),e(a)])]),Dn,n("p",null,[s("commitBeforeMutationEffectOnFiber是commitBeforeMutationLifeCycles的别名，在该⽅法内会调⽤getSnapshotBeforeUpdate。"),Wn,s(" 地址："),In,n("a",On,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L222"),e(a)])]),Mn,n("p",null,[s("Q：为什么要异步调度："),Sn,n("a",Nn,[s("https://zh-hans.reactjs.org/docs/hooks-reference.html#timing-of-effects"),e(a)])]),Tn,Un,An,Hn,n("p",null,[s("地址："),Bn,n("a",Xn,[s("https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L2091"),e(a)])]),qn,n("p",null,[s("地址："),zn,n("a",Vn,[s("https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L1156"),e(a)])]),Jn,n("p",null,[s("调⽤的⽅法为commitWork，他会根据Fiber.tag分别处理。"),Qn,s(" 地址："),Yn,n("a",$n,[s("https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L1441"),e(a)])]),Gn,Kn,n("p",null,[s("当fiber.tag为FunctionComponent，会调⽤commitHookEffectListUnmount。该⽅法会遍历"),Zn,s(" effectList，执⾏所有useLayoutEffect hook的销毁函数"),ns,s(" 地址："),ss,n("a",as,[s("https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L314"),e(a)])]),es,n("p",null,[s("当fiber.tag为HostComponent，会调⽤commitUpdate。"),ts,s(" 地址："),ps,n("a",os,[s("https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-dom/src/client/ReactDOMHostConfig.js#L423"),e(a)]),cs,s(" 最终会在updateDOMProperties中将render阶段 completeWork中为Fiber节点赋值的updateQueue对应的内容渲染在⻚⾯上。")]),ls,n("p",null,[s("地址："),is,n("a",rs,[s("https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L1421"),e(a)])]),us,n("p",null,[s("地址："),ds,n("a",ks,[s("https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L2302"),e(a)])]),vs,n("p",null,[s("地址："),ms,n("a",bs,[s("https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L459"),e(a)])]),fs])}const _s=p(u,[["render",gs],["__file","2.html.vue"]]);export{_s as default};
