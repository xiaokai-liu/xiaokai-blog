import{_ as t,r as p,o,c,a as n,b as s,e as l,f as a}from"./app-02fa1acf.js";const i={},d=a(`<h1 id="js正则表达式简介" tabindex="-1"><a class="header-anchor" href="#js正则表达式简介" aria-hidden="true">#</a> js正则表达式简介</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>正则表达式(Regular Expression) 是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个规则字符串，这个规则字符串用来表达对字符串的一种过滤逻辑。</p><p>可以使用字面量形式或者new的方式来创建正则表达式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用直接字面量创建 ，推荐使用，性能更好，注意这里pattern不能为空，不然以为是注释</span>
<span class="token keyword">var</span> exp1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>

<span class="token comment">//使用RegExp对象创建</span>
<span class="token keyword">var</span> exp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;\\d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模式中使用的所有元字符都建议在之前加\\转义，正则表达式中的元字符包括：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>( [ { \\ ^ $ | ) ? * + . ] }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="匹配模式" tabindex="-1"><a class="header-anchor" href="#匹配模式" aria-hidden="true">#</a> 匹配模式</h2><p>修饰符表示正则表达式的匹配模式</p><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>执行对大小写不敏感的匹配</td></tr><tr><td>g</td><td>执行全局匹配，查找所有匹配而非在找到第一个匹配后停止</td></tr><tr><td>m</td><td>执行多行匹配，会改变^和$的行为</td></tr><tr><td>u</td><td>可以匹配4字节的unicode编码</td></tr><tr><td>s</td><td>dotAll模式, <code>.</code>可以匹配换行符</td></tr></tbody></table><p>加了u修饰符，会正确处理大于\\uFFFF的unicode，比如4字节的🐪 \\uD83D\\uDC2A</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\uD83D</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\\uD83D\\uDC2A&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
<span class="token operator">/</span><span class="token operator">^</span>\\uD83D<span class="token operator">/</span>u<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\\uD83D\\uDC2A&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，<code>.</code>可以匹配任意字符，除了换行符，且<code>.</code>不能匹配Unicode字符，需要使用u选项启用Unicode模式才行。</p><p>ES2018引入了dotAll模式，通过s选项可以启用，这样，<code>.</code>就可以匹配换行符了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo.bar</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;foo\\nbar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token comment">// false</span>
<span class="token operator">/</span>foo<span class="token punctuation">.</span>bar<span class="token operator">/</span>s<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;foo\\nbar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// true   </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h2><p>类使用<code>[]</code>来表达，用于查找某个范围内的字符</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td><code>[abc]</code></td><td>查找方括号之间的任何字符</td></tr><tr><td><code>[0-9]</code></td><td>查找任何从0至9的数字</td></tr></tbody></table><p>还有一些预定义类方便我们使用：</p><table><thead><tr><th>预定义类</th><th>等价</th><th>描述</th></tr></thead><tbody><tr><td><code>\\s</code></td><td><code>[\\t\\n\\x0B\\f\\r]</code></td><td>空格</td></tr><tr><td><code>\\S</code></td><td><code>[^\\t\\n\\x0B\\f\\r]</code></td><td>非空格</td></tr><tr><td><code>\\d</code></td><td><code>[0-9]</code></td><td>数字</td></tr><tr><td><code>\\D</code></td><td><code>[^0-9]</code></td><td>非数字</td></tr><tr><td><code>\\w</code></td><td><code>[a-zA-Z_0-9]</code></td><td>单词字符(字母数字下划线)</td></tr><tr><td><code>\\W</code></td><td><code>[^a-zA-Z_0-9]</code></td><td>非单词字符</td></tr><tr><td><code>.</code></td><td><code>[^\\r\\n]</code></td><td>任意字符，除了回车与换行外所有字符</td></tr><tr><td><code>\\f</code></td><td><code>\\x0c \\cL</code></td><td>匹配一个换页符</td></tr><tr><td><code>\\n</code></td><td><code>\\x0a \\cJ</code></td><td>匹配一个换行符</td></tr><tr><td><code>\\r</code></td><td><code>\\x0d \\cM</code></td><td>匹配一个回车符</td></tr><tr><td><code>\\t</code></td><td><code>\\x09 \\cI</code></td><td>匹配一个制表符</td></tr><tr><td><code>\\v</code></td><td><code>\\x0b \\cK</code></td><td>匹配一个垂直制表符</td></tr><tr><td><code>\\xxx</code></td><td></td><td>查找以八进制数 xxx 规定的字符</td></tr><tr><td><code>\\xdd</code></td><td></td><td>查找以十六进制数 dd 规定的字符</td></tr><tr><td><code>\\uxxxx</code></td><td></td><td>查找以十六进制数 xxxx 规定的 Unicode 字符</td></tr></tbody></table><h2 id="量词" tabindex="-1"><a class="header-anchor" href="#量词" aria-hidden="true">#</a> 量词</h2><p>量词表示匹配多少个目标对象，精确匹配长度使用<code>{}</code></p><table><thead><tr><th>量词</th><th>等价</th><th>描述</th></tr></thead><tbody><tr><td>n<code>*</code></td><td><code>{0,}</code></td><td>匹配零个或多个n</td></tr><tr><td>n<code>+</code></td><td><code>{1,}</code></td><td>匹配至少一个 n 的字符串</td></tr><tr><td>n<code>?</code></td><td><code>{0,1}</code></td><td>匹配零个或一个n</td></tr><tr><td><code>{n}</code></td><td></td><td>匹配n次</td></tr><tr><td><code>{n,m}</code></td><td></td><td>匹配n到m次</td></tr><tr><td><code>{n,}</code></td><td></td><td>至少匹配n次</td></tr></tbody></table><h2 id="边界" tabindex="-1"><a class="header-anchor" href="#边界" aria-hidden="true">#</a> 边界</h2><table><thead><tr><th>边界</th><th>描述</th></tr></thead><tbody><tr><td><code>^</code></td><td>以xx开始，在类<code>[ ]</code>中表示非</td></tr><tr><td><code>$</code></td><td>以xx结束</td></tr><tr><td><code>\\b</code></td><td>单词边界</td></tr><tr><td><code>\\B</code></td><td>非单词边界</td></tr></tbody></table><p><code>^</code>匹配字符串开始位置，也就是位置0，如果设置了 RegExp 对象的 Multiline 属性m，<code>^</code> 也匹配 &#39;\\n&#39; 或 &#39;\\r&#39; 之后的位置</p><p><code>$</code>一般匹配字符串结束位置，如果设置了 RegExp 对象的 Multiline 属性m，<code>$</code> 也匹配 &#39;\\n&#39; 或 &#39;\\r&#39; 之前的位置</p><p><code>\\b</code>匹配一个单词边界，也就是指单词和空格间的位置，如 er<code>\\b</code>可以匹配&quot;never&quot; 中的 &#39;er&#39;，但不能匹配 &quot;verb&quot; 中的 &#39;er&#39;</p><p><code>\\B</code>匹配非单词边界。如 er<code>\\B</code>能匹配 &quot;verb&quot; 中的 &#39;er&#39;，但不能匹配 &quot;never&quot; 中的 &#39;er&#39;</p><h2 id="分组" tabindex="-1"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h2><p>分组使用<code>()</code>作用是提取相匹配的字符串，使量词作用于分组 比如<code>hehe{3}</code>是把e匹配了3次而不是单词，如果希望作用于单词，可以使用分组<code>(hehe){3}</code></p><h3 id="或" tabindex="-1"><a class="header-anchor" href="#或" aria-hidden="true">#</a> 或 |</h3><p>分组中使用 | 可以达到或的效果 比如：T(oo|ii)m可以匹配 Toom 和 Tiim</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">abToomhaTiimmm</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">T(oo|ii)m</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>                <span class="token comment">// ab-ha-mm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="反向引用" tabindex="-1"><a class="header-anchor" href="#反向引用" aria-hidden="true">#</a> 反向引用</h3><p>使用<code>()</code>后可以使用$1-$9等来匹配</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;2018-02-11&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})\\-(\\d{2})\\-(\\d{2})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$2/$3/$1&#39;</span><span class="token punctuation">)</span>            <span class="token comment">//  02/11/2018</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="后向引用" tabindex="-1"><a class="header-anchor" href="#后向引用" aria-hidden="true">#</a> 后向引用</h3><p>\\n 表示后向引用，\\1是指在正则表达式中，从左往右数第1个( )中的内容；以此类推，\\2表示第2个( )，\\0表示整个表达式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//匹配日期格式，表达式中的\\1代表重复(\\-|\\/|.)</span>
<span class="token keyword">var</span> rgx <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{4}(\\-|\\/|.)\\d{1,2}\\1\\d{1,2}</span><span class="token regex-delimiter">/</span></span>
rgx<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;2016-03-26&quot;</span><span class="token punctuation">)</span>             <span class="token comment">// true</span>
rgx<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;2016-03.26&quot;</span><span class="token punctuation">)</span>             <span class="token comment">// false</span>
rgx<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;2016.03.06&quot;</span><span class="token punctuation">)</span>             <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分组命名-es9" tabindex="-1"><a class="header-anchor" href="#分组命名-es9" aria-hidden="true">#</a> 分组命名(ES9)</h3><p>ES2018 之前的分组是通过数字命名的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;2018-10-25&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印&quot;2018-10-25&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印&quot;2018&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印&quot;10&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印&quot;25&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在可以通过指定分组的名称，增加代码可读性，便于维护：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;2018-10-25&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 打印&quot;2018&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 打印&quot;10&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 打印&quot;25&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分组命名还可以和String.prototype.replace方法结合：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> reDate <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token string">&#39;2018-10-25&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> USADate <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reDate<span class="token punctuation">,</span> <span class="token string">&#39;$&lt;month&gt;-$&lt;day&gt;-$&lt;year&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>USADate<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 10-25-2018</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="忽略分组" tabindex="-1"><a class="header-anchor" href="#忽略分组" aria-hidden="true">#</a> 忽略分组</h3><p>如果不希望捕获某些分组，在分组内加上<code>?:</code>即可 比如<code>(?:tom).(ok)</code>那么这里$1指的就是ok</p><h3 id="前瞻" tabindex="-1"><a class="header-anchor" href="#前瞻" aria-hidden="true">#</a> 前瞻</h3><p>前瞻 Lookahead 是RegExp匹配到规则的时候，向后检查是否符合断言，后顾JS目前不支持 (ES2018已经支持)</p><table><thead><tr><th>名称</th><th>正则</th><th>描述</th></tr></thead><tbody><tr><td>正向前瞻</td><td><code>(?= )</code></td><td>后面要有xx</td></tr><tr><td>负向前瞻</td><td><code>(?!)</code></td><td>后面不能有xx</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;1a2bc*456v8&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w(?=\\d)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>        <span class="token comment">//  1-2bc*--6-8    匹配后面是数字的单词字符</span>
<span class="token string">&#39;1a2bc*456v8&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w(?!\\d)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>               <span class="token comment">//  -a---*45-v-    匹配后面不是数字的单词字符</span>
 
<span class="token keyword">const</span> pattern1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+(?= dollars)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">;</span>             <span class="token comment">// 正向前瞻，匹配字符串中紧跟着是dollars的数字</span>
<span class="token keyword">const</span> result1 <span class="token operator">=</span> pattern1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;42 dollars&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                    <span class="token comment">// 打印42</span>
 
<span class="token keyword">const</span> pattern2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+(?! dollars)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">;</span>           <span class="token comment">// 负向前瞻，匹配字符串中紧跟着的不是dollars的数字</span>
<span class="token keyword">const</span> result2 <span class="token operator">=</span> pattern2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;42 pesos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">// 打印42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="后顾" tabindex="-1"><a class="header-anchor" href="#后顾" aria-hidden="true">#</a> 后顾</h3><p>后顾 Lookbehind 是RegExp匹配到规则的时候，向前检查是否符合断言</p><table><thead><tr><th>名称</th><th>正则</th><th>描述</th></tr></thead><tbody><tr><td>正向后顾</td><td><code>(?&lt;= )</code></td><td>前面有xx</td></tr><tr><td>负向后顾</td><td><code>(?&lt;! )</code></td><td>前面面不能有xx</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pattern1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=\\$)\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">;</span>           <span class="token comment">// 正向后顾，匹配字符串中前面是\\$的数字</span>
<span class="token keyword">const</span> result1 <span class="token operator">=</span> pattern1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;$42&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 打印42 </span>
 
<span class="token keyword">const</span> pattern2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;!\\$)\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">;</span>           <span class="token comment">// 负向后顾，匹配字符串中前面不是是\\$的数字</span>
<span class="token keyword">const</span> result2 <span class="token operator">=</span> pattern2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;€42&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 打印42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="贪婪模式与非贪婪模式" tabindex="-1"><a class="header-anchor" href="#贪婪模式与非贪婪模式" aria-hidden="true">#</a> 贪婪模式与非贪婪模式</h2><p>正则表达式在匹配的时候默认会尽可能多的匹配，叫贪婪模式。通过在限定符后加?可以进行非贪婪匹配 比如\\d{3,6}默认会匹配6个数字而不是3个，在量词{ }后加一个?就可以修改成非贪婪模式，匹配3次</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">12345678</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{3,6}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>                <span class="token comment">// -78</span>
<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">12345678</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{3,6}?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>                <span class="token comment">// -45678</span>
<span class="token string">&#39;abbbb&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab+?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>                <span class="token comment">//  -bbb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级" aria-hidden="true">#</a> 优先级</h2><p>优先级从高到底：</p><ul><li><p>转义 \\</p></li><li><p>括号( )、(?: )<code>忽略分组</code>、(?= )<code>前瞻</code>、[ ]</p></li><li><p>字符和位置</p></li><li><p>或 |</p></li></ul><h2 id="常用属性与方法" tabindex="-1"><a class="header-anchor" href="#常用属性与方法" aria-hidden="true">#</a> 常用属性与方法</h2><h2 id="regexp构造函数属性" tabindex="-1"><a class="header-anchor" href="#regexp构造函数属性" aria-hidden="true">#</a> RegExp构造函数属性</h2><p>RegExp构造函数上也包含一些属性，这些属性适用于作用域中所有的正则表达式，并且基于所执行的最近一次正则表达式操作而变化，这些属性分别有一个长属性名和短属性名</p><table><thead><tr><th>长属性名</th><th>短属性名</th><th>描述</th></tr></thead><tbody><tr><td>input</td><td><code>$_</code></td><td>返回执行规范表述查找的字符串。只读</td></tr><tr><td>lastMatch</td><td><code>$&amp;</code></td><td>返回任何正则表达式搜索过程中的最后匹配的字符。只读</td></tr><tr><td>lastParen</td><td>$+</td><td>如果有的话，返回任何正则表达式查找过程中最后括的子(分组)匹配。只读</td></tr><tr><td>leftContext</td><td>$\\</td><td>返回被查找的字符串中从字符串开始位置到最后匹配之前的位置之间的字符。只读</td></tr><tr><td>rightContext</td><td>$&#39;</td><td>返回被搜索的字符串中从最后一个匹配位置开始到字符串结尾之间的字符。只读</td></tr></tbody></table><h2 id="regexp实例上的属性" tabindex="-1"><a class="header-anchor" href="#regexp实例上的属性" aria-hidden="true">#</a> RegExp实例上的属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>global</td><td>是否全文搜索，默认false，对应修饰符的g，只读</td></tr><tr><td>ignoreCase</td><td>是否大小写敏感，默认false，对应修饰符i，只读</td></tr><tr><td>multiline</td><td>是否多行搜索，默认false，对应修饰符m，只读</td></tr><tr><td>flags</td><td>返回修饰符，只读</td></tr><tr><td>lastIndex</td><td>当前表达式匹配内容的最后一个字符的下一个位置</td></tr><tr><td>source</td><td>正则表达式的文本字符串</td></tr></tbody></table><h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h2><h3 id="regexp-prototype-test-str" tabindex="-1"><a class="header-anchor" href="#regexp-prototype-test-str" aria-hidden="true">#</a> <code>RegExp.prototype.test(str)</code></h3><p>测试字符串参数中是否存在匹配正则表达式的字符串，使用.test的时候如果修饰符有g ，那么会正则会记住lastIndex并在下一次执行的时候从lastIndex处开始检测，如果只是为了测试是否符合正则，可以不用g或者每次都重新实例化正则表达式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>                              <span class="token comment">//  true</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>                              <span class="token comment">//  false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="regexp-prototype-exec-str" tabindex="-1"><a class="header-anchor" href="#regexp-prototype-exec-str" aria-hidden="true">#</a> <code>RegExp.prototype.exec(str)</code></h3><p>使用正则表达式对字符串执行搜索，并将更新全局RegExp对象的属性以反映匹配结果</p><p>如果匹配失败，exec() 方法返回 null</p><p>如果匹配成功，exec() 方法返回一个数组，并更新正则表达式对象的属性</p><ul><li>数组索引0：匹配的全部字符串</li><li>数组索引1,2..n：括号中的分组捕获</li><li>index：属性是匹配文本的第一个字符的位置</li><li>input：存放被检索的字符串</li></ul><p>要注意的是：</p><ul><li>exec()永远只返回一个匹配项（指匹配整个正则的）</li><li>如果设置了g修饰符，每次调用exec()会在字符串中继续查找新匹配项，不设置g修饰符，对一个字符串每次调用exec()永远只返回第一个匹配项。所以如果要匹配一个字符串中的所有需要匹配的地方，那么可以设置g修饰符，然后通过循环不断调用exec方法。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//匹配所有ing结尾的单词</span>
<span class="token keyword">const</span> str<span class="token operator">=</span><span class="token string">&quot;Reading and Writing&quot;</span>
<span class="token keyword">const</span> pattern<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b([a-zA-Z]+)ing\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">let</span> matches
<span class="token keyword">while</span><span class="token punctuation">(</span>matches<span class="token operator">=</span>pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">.</span>index <span class="token operator">+</span><span class="token string">&#39; &#39;</span><span class="token operator">+</span> matches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> matches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 0 Reading Read</span>
<span class="token comment">// 12 Writing Writ</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-prototype-search-reg" tabindex="-1"><a class="header-anchor" href="#string-prototype-search-reg" aria-hidden="true">#</a> <code>String.prototype.search(reg)</code></h3><p>search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串 方法返回第一个匹配结果的index，查找不到返回-1 search() 方法不执行全局匹配，它将忽略修饰符g，并且总是从字符串的开始进行检索</p><h3 id="string-prototype-split-reg" tabindex="-1"><a class="header-anchor" href="#string-prototype-split-reg" aria-hidden="true">#</a> <code>String.prototype.split(reg)</code></h3><p>split() 方法一般用来分割字符串成数组，也可以传入正则表达式，使用正则可以避免一些传入字符串解决不了的问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;a1b2c3d4e&#39;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>                   <span class="token comment">//  [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span>
<span class="token string">&#39;a b   c&#39;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>                        <span class="token comment">// [&#39;a&#39;, &#39;b&#39;, &#39;&#39;, &#39;&#39;, &#39;c&#39;]   无法识别连续空格</span>
<span class="token string">&#39;a b   c&#39;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>                      <span class="token comment">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-prototype-match-reg" tabindex="-1"><a class="header-anchor" href="#string-prototype-match-reg" aria-hidden="true">#</a> <code>String.prototype.match(reg)</code></h3><p>match() 方法将检索字符串，以找到一个或多个与reg相匹配的文本，reg是否有修饰符g影响很大 返回值与RegExp.prototype.exec的返回类似，不过只返回匹配的字符串数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;cdbbdbsdbdbzddzdbbbd&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">d(b+)d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>              <span class="token comment">//   [&quot;dbbd&quot;, &quot;dbd&quot;, &quot;dbbbd&quot;]</span>
<span class="token string">&#39;cdbbdbsdbdbzddzdbbbd&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">d(b+)d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>             <span class="token comment">//   [&quot;dbbd&quot;, &quot;bb&quot;, index: 1, input: &quot;cdbbdbsdbdbzddzdbbbd&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果修饰符有g则匹配出所有匹配的数组，如果不是，则出第一个匹配的字符串，以及相应的捕获内容</p><h3 id="string-prototype-replace-reg-str-num-function" tabindex="-1"><a class="header-anchor" href="#string-prototype-replace-reg-str-num-function" aria-hidden="true">#</a> <code>String.prototype. replace (reg, str | num | function)</code></h3>`,91),r={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},u=a(`<p>比如一个场景，把手机号的中间4位换成*</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">validateMobile</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1][0-9]{10}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{3})(\\d{4})(\\d{4})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">rs<span class="token punctuation">,</span>$1<span class="token punctuation">,</span>$2<span class="token punctuation">,</span>$3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>$1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">****</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>$3<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以不返回值，用回调来遍历，比如一个在面试中会遇到的问题：找出重复最多的字符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;asss23sjdssskssa7lsssdkjsssdss&#39;</span>
 
<span class="token keyword">const</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>              <span class="token comment">// 把字符串转换为数组</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>               <span class="token comment">// 首先进行排序，这样结果会把相同的字符放在一起，然后再转换为字符串</span>
 
<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
str2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w)\\1*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$0<span class="token punctuation">,</span> $1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//匹配字符</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> $0<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    index <span class="token operator">=</span> $0<span class="token punctuation">.</span>length                   <span class="token comment">// index是出现次数</span>
    value <span class="token operator">=</span> $1                              <span class="token comment">// value是对应字符</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">最多的字符: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ,重复的次数: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>          <span class="token comment">// s   17</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见表达式" tabindex="-1"><a class="header-anchor" href="#常见表达式" aria-hidden="true">#</a> 常见表达式</h2><h3 id="常见检验数字的表达式" tabindex="-1"><a class="header-anchor" href="#常见检验数字的表达式" aria-hidden="true">#</a> 常见检验数字的表达式</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- 数字：^[0-9]*$
- n位的数字：^\\d{n}$
- 至少n位的数字：^\\d{n,}$
- m-n位的数字：^\\d{m,n}$
- 零和非零开头的数字：^(0|[1-9][0-9]*)$
- 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$
- 带1-2位小数的正数或负数：^(\\-)?\\d+(\\.\\d{1,2})?$
- 正数、负数、和小数：^(\\-|\\+)?\\d+(\\.\\d+)?$
- 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$
- 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$
- 非零的正整数：^[1-9]\\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\\+?[1-9][0-9]*$
- 非零的负整数：^\\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\\d*$
- 非负整数：^\\d+$ 或 ^[1-9]\\d*|0$
- 非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$
- 非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$
- 非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$
- 正浮点数：^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$
- 负浮点数：^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$
- 浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="校检字符的表达式" tabindex="-1"><a class="header-anchor" href="#校检字符的表达式" aria-hidden="true">#</a> 校检字符的表达式</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- 汉字：^[\\u4e00-\\u9fa5]{0,}$
- 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$
- 长度为3-20的所有字符：^.{3,20}$
- 由26个英文字母组成的字符串：^[A-Za-z]+$
- 由26个大写英文字母组成的字符串：^[A-Z]+$
- 由26个小写英文字母组成的字符串：^[a-z]+$
- 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$
- 由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w{3,20}$
- 中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$ 
- 中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$ 
- 可以输入含有^%&amp;&#39;,;=?$\\&quot;等字符：\\[^%&amp;&#39;,;=?$\\x22\\]\\+ 
- 禁止输入含有~的字符：[^~\\x22]+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特殊需求表达式" tabindex="-1"><a class="header-anchor" href="#特殊需求表达式" aria-hidden="true">#</a> 特殊需求表达式</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- Email地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$
- 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?
- InternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$
- 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$
- 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$
- 国内电话号码(0511-4405222、021-87888822)：\\d{3}-\\d{8}|\\d{4}-\\d{7}
- 身份证号(15位、18位数字)：^\\d{15}|\\d{18}$ 
- 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$ 
- 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 
- 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w{5,17}$
- 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$ 
日期格式：^\\d{4}-\\d{1,2}-\\d{1,2}
- 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$
- 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$
钱的输入格式： 
  1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$ 
  2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ 
  3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ 
  4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 
  5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]{2})?$ 
  6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$ 
  7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$ 
  8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$ 
  备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里 
- xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$
- 中文字符的正则表达式：[\\u4e00-\\u9fa5] 
- 双字节字符：[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)) 
- 空白行的正则表达式：\\n\\s*\\r (可以用来删除空白行) 
- HTML标记的正则表达式：&lt;(\\S*?)[^&gt;]*&gt;.*?&lt;/\\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力) 
- 首尾空白字符的正则表达式：^\\s*|\\s*$或(^\\s*)|(\\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式) 
- 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)
- 中国邮政编码：[1-9]\\d{5}(?!\\d) (中国邮政编码为6位数字)
- IP地址：\\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)
- IP地址：((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function k(g,m){const e=p("ExternalLinkIcon");return o(),c("div",null,[d,n("p",null,[s("找到匹配并替换，传入string、number比较常见，这里传入回调function是比较高级的用法，这里可以参考"),n("a",r,[s("MDN"),l(e)])]),u])}const b=t(i,[["render",k],["__file","5.html.vue"]]);export{b as default};
