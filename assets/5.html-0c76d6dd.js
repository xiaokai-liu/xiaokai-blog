import{_ as t,r as e,o,c,a as n,b as s,e as l,f as a}from"./app-97481773.js";const i="/assets/diff-f06f021d.png",u="/assets/diff2-5e9b78f6.png",d="/assets/diff3-65205204.png",r="/assets/diff4-eb707720.png",k="/assets/diff5-df25493f.png",v="/assets/diff6-67809630.png",m="/assets/diff7-a0b7dc73.png",b="/assets/diff8-ad1bab3e.png",f="/assets/diff9-5da1e3c7.png",w="/assets/diff10-a0c57169.png",y="/assets/diff11-02b447f2.png",x="/assets/diff12-8c4a4428.png",h="/assets/diff13-1df7f06c.png",g="/assets/diff14-a2cf2c22.png",N="/assets/diff15-3b9b201f.png",S="/assets/diff16-663eee3d.png",E="/assets/diff17-1f423f64.png",I="/assets/diff18-941925c3.png",C="/assets/diff19-40716cbe.png",j="/assets/diff20-3412ef35.png",D="/assets/diff21-6ae21f06.png",V="/assets/diff22-523efccb.png",_={},O=a('<h1 id="vue3源码解析下" tabindex="-1"><a class="header-anchor" href="#vue3源码解析下" aria-hidden="true">#</a> vue3源码解析下</h1><h2 id="diff算法" tabindex="-1"><a class="header-anchor" href="#diff算法" aria-hidden="true">#</a> Diff算法</h2><p>diff算法的目的是为了找到哪些节点发生了变化，哪些节点没有发生变化可以复用。如果用最传统的diff算法，如下图所示，每个节点都要遍历另一棵树上的所有节点做比较，这就是o(n^2) 的复杂度，加上更新节点时的o(n)复杂度，那就总共达到了o(n^3)的复杂度，这对于一个结构复杂节点数众多的页面，成本是非常大的。</p><figure><img src="'+i+'" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>实际上vue和react都对虚拟dom的diff算法做了一定的优化，将复杂度降低到了o(n)级别，具体的策略是：同层的节点才相互比较；</p><ol><li>节点比较时，如果类型不同，则对该节点及其所有子节点直接销毁新建；</li><li>类型相同的子节点，使用key帮助查找，并且使用算法优化查找效率。其中react和vue2以及vue3的diff算法都不尽相同；</li></ol><figure><img src="'+u+`" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>主要对比Vue2和Vue3，掌握为什么要从Vue2升级到Vue3，并代入后续代码，掌握Vue实现diff的流程；</p><p>前提：</p><ul><li><p>mount(vnode, parent, [refNode]) : 通过 vnode 生成真实的DOM节点。parent为其父级的真实DOM节点， refNode 为真实的DOM节点，其父级节点为parent。如果refNode不为空，vnode生成的DOM节点就会插入到refNode之前；如果refNode为空，那么vnode生成的DOM节点就作为最后一个子节点插入到parent中</p></li><li><p>patch(prevNode, nextNode, parent) : 可以简单的理解为给当前DOM节点进行更新，并且调用diff算法对比自身的子节点;</p></li></ul><h2 id="vue2-diff———双端比较" tabindex="-1"><a class="header-anchor" href="#vue2-diff———双端比较" aria-hidden="true">#</a> vue2 diff———双端比较</h2><p>双端比较就是新列表和旧列表两个列表的头与尾互相对比，在对比的过程中指针会逐渐向内靠拢，直到某一个列表的节点全部遍历过，对比停止；</p><h3 id="patch" tabindex="-1"><a class="header-anchor" href="#patch" aria-hidden="true">#</a> patch</h3><p>先判断是否是首次渲染，如果是首次渲染那么我们就直接createElm即可；如果不是就去判断新老两个节点的元素类型否一样；如果两个节点都是一样的，那么就深入检查他们的子节点。如果两个节点不一样那就说明Vnode完全被改变了，就可以直接替换oldVnode；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> hydrating<span class="token punctuation">,</span> removeOnly</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断新的vnode是否为空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果老的vnode不为空 卸载所有的老vnode</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">invokeDestroyHook</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> isInitialPatch <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token comment">// 用来存储 insert钩子函数，在插入节点之前调用</span>
    <span class="token keyword">const</span> insertedVnodeQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment">// 如果老节点不存在，直接创建新节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        isInitialPatch <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 是不是元素节点</span>
        <span class="token keyword">const</span> isRealElement <span class="token operator">=</span> <span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span>
        <span class="token comment">// 当老节点不是真实的DOM节点，并且新老节点的type和key相同，进行patchVnode更新⼯作</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRealElement <span class="token operator">&amp;&amp;</span> <span class="token function">sameVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>removeOnly<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果不是同一元素节点的话</span>
            <span class="token comment">// 当老节点是真实DOM节点的时候</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isRealElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果是元素节点 并且在SSR环境的时候 修改SSR_ATTR属性</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> oldVnode<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token constant">SSR_ATTR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 就是服务端渲染的，删掉这个属性</span>
                    oldVnode<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token constant">SSR_ATTR</span><span class="token punctuation">)</span>
                    hydrating <span class="token operator">=</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 这个判断里是服务端渲染的处理逻辑</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>hydrating<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hydrate</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">invokeInsertHook</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                        <span class="token keyword">return</span> oldVnode
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 如果不是服务端渲染的，或者混合失败，就创建一个空的注释节点替换oldVnode</span>
                oldVnode <span class="token operator">=</span> <span class="token function">emptyNodeAt</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 拿到 oldVnode 的父节点</span>
            <span class="token keyword">const</span> oldElm <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>elm
            <span class="token keyword">const</span> parentElm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>oldElm<span class="token punctuation">)</span>
            <span class="token comment">// 根据新的 vnode 创建一个 DOM 节点，挂载到父节点上</span>
            <span class="token function">createElm</span><span class="token punctuation">(</span>
                vnode<span class="token punctuation">,</span>
                insertedVnodeQueue<span class="token punctuation">,</span>
                oldElm<span class="token punctuation">.</span>_leaveCb <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> parentElm<span class="token punctuation">,</span>
                nodeOps<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>oldElm<span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
            <span class="token comment">// 如果新的 vnode 的根节点存在，就是说根节点被修改了，就需要遍历更新父节点</span>
            <span class="token comment">// 递归 更新父占位符元素</span>
            <span class="token comment">// 就是执行一遍 父节点的 destory 和 create 、insert 的 钩子函数</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> ancestor <span class="token operator">=</span> vnode<span class="token punctuation">.</span>parent
                <span class="token keyword">const</span> patchable <span class="token operator">=</span> <span class="token function">isPatchable</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>
                <span class="token comment">// 更新父组件的占位元素</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>ancestor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 卸载老根节点下的全部组件</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>destroy<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        cbs<span class="token punctuation">.</span>destroy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>ancestor<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 替换现有元素</span>
                    ancestor<span class="token punctuation">.</span>elm <span class="token operator">=</span> vnode<span class="token punctuation">.</span>elm
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>patchable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>create<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            cbs<span class="token punctuation">.</span>create<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>emptyNode<span class="token punctuation">,</span> ancestor<span class="token punctuation">)</span>
                        <span class="token punctuation">}</span>
                        <span class="token comment">// #6513</span>
                        <span class="token comment">// invoke insert hooks that may have been merged by createhooks.</span>
                        <span class="token comment">// e.g. for directives that uses the &quot;inserted&quot; hook.</span>
                        <span class="token keyword">const</span> insert <span class="token operator">=</span> ancestor<span class="token punctuation">.</span>data<span class="token punctuation">.</span>hook<span class="token punctuation">.</span>insert
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>insert<span class="token punctuation">.</span>merged<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// start at index 1 to avoid re-invoking componentmounted hook</span>
                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> insert<span class="token punctuation">.</span>fns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                insert<span class="token punctuation">.</span>fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token function">registerRef</span><span class="token punctuation">(</span>ancestor<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 更新父节点</span>
                    ancestor <span class="token operator">=</span> ancestor<span class="token punctuation">.</span>parent
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 如果旧节点还存在，就删掉旧节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">removeVnodes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>oldVnode<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 否则直接卸载 oldVnode</span>
                <span class="token function">invokeDestroyHook</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 执行 虚拟 dom 的 insert 钩子函数</span>
    <span class="token function">invokeInsertHook</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> isInitialPatch<span class="token punctuation">)</span>
    <span class="token comment">// 返回最新 vnode 的 elm ，也就是真实的 dom节点</span>
    <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>elm
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="patchvnode" tabindex="-1"><a class="header-anchor" href="#patchvnode" aria-hidden="true">#</a> patchVnode</h3><ul><li>如果 Vnode 和 oldVnode 指向同一个对象，则直接return即可；</li><li>将旧节点的真实 DOM 赋值到新节点（真实 dom 连线到新子节点）称为elm，然后遍历调用 update更新 oldVnode 上的所有属性，比如 class,style,attrs,domProps,events...；</li><li>如果新老节点都有文本节点，并且文本不相同，那么就用 vnode .text更新文本内容。</li><li>如果oldVnode有子节点而Vnode 没有，则直接删除老节点即可；</li><li>如果oldVnode没有子节点而Vnode 有，则将Vnode的子节点真实化之后添加到DOM中即可。</li><li>如果两者都有子节点，则执行 updateChildren 函数比较子节点。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patchVnode</span><span class="token punctuation">(</span>
    oldVnode<span class="token punctuation">,</span> <span class="token comment">// 老的虚拟 DOM 节点</span>
    vnode<span class="token punctuation">,</span> <span class="token comment">// 新节点</span>
    insertedVnodeQueue<span class="token punctuation">,</span> <span class="token comment">// 插入节点队列</span>
    ownerArray<span class="token punctuation">,</span> <span class="token comment">// 节点数组</span>
    index<span class="token punctuation">,</span> <span class="token comment">// 当前节点的下标</span>
    removeOnly
<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 新老节点对比地址一样，直接跳过</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode <span class="token operator">===</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>ownerArray<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// clone reused vnode</span>
        vnode <span class="token operator">=</span> ownerArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneVNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> elm <span class="token operator">=</span> vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>elm
    <span class="token comment">// 如果当前节点是注释或 v-if 的，或者是异步函数，就跳过检查异步组件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>isAsyncPlaceholder<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>asyncFactory<span class="token punctuation">.</span>resolved<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">hydrate</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            vnode<span class="token punctuation">.</span>isAsyncPlaceholder <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 当前节点是静态节点的时候，key 也一样，或者有 v-once 的时候，就直接赋值返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        <span class="token function">isTrue</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        vnode<span class="token punctuation">.</span>key <span class="token operator">===</span> oldVnode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isCloned<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isOnce<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vnode<span class="token punctuation">.</span>componentInstance <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>componentInstance
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> i
    <span class="token keyword">const</span> data <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>prepatch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> oldCh <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>children
    <span class="token keyword">const</span> ch <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPatchable</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遍历调用 update 更新 oldVnode 所有属性，比如class,style,attrs,domProps,events...</span>
    <span class="token comment">// 这里的 update 钩子函数是 vnode 本身的钩子函数</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>update<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cbs<span class="token punctuation">.</span>update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span>vnode<span class="token punctuation">)</span>
        <span class="token comment">// 这里的 update 钩子函数是我们传过来的函数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果新节点不是文本节点，也就是说有子节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果新老节点都有子节点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果新老节点的子节点不一样，就执行 updateChildren 函数，对比子节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCh <span class="token operator">!==</span> ch<span class="token punctuation">)</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> ch<span class="token punctuation">,</span>insertedVnodeQueue<span class="token punctuation">,</span> removeOnly<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果新节点有子节点的话，就是说老节点没有子节点</span>
            <span class="token comment">// 如果老节点是文本节点，就是说没有子节点，就清空</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
            <span class="token comment">// 添加新节点</span>
            <span class="token function">addVnodes</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果新节点没有子节点，老节点有子节点，就删除</span>
            <span class="token function">removeVnodes</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果老节点是文本节点，就清空</span>
            nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果老节点的文本和新节点的文本不同，就更新文本</span>
        nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>postpatch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span>vnode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="updatechildren" tabindex="-1"><a class="header-anchor" href="#updatechildren" aria-hidden="true">#</a> updateChildren</h3><p>为了方便理解，这里手动实现Vue2中的updateChildren</p><h4 id="实现思路" tabindex="-1"><a class="header-anchor" href="#实现思路" aria-hidden="true">#</a> 实现思路</h4><p>我们先用四个指针指向两个列表的头尾</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        oldEndIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
        newStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        newEndIndex <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>nextStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>nextEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据四个指针找到四个节点，然后进行对比，那么如何对比呢？我们按照以下四个步骤进行对比</p><ol><li>使用旧列表的头一个节点 oldStartNode 与新列表的头一个节点 newStartNode 对比；</li><li>使用旧列表的最后一个节点 oldEndNode 与新列表的最后一个节点 newEndNode 对比；</li><li>使用旧列表的头一个节点 oldStartNode 与新列表的最后一个节点 newEndNode 对比；</li><li>使用旧列表的最后一个节点 oldEndNode 与新列表的头一个节点 newStartNode 对比；</li></ol><p>使用以上四步进行对比，去寻找key相同的可复用的节点，当在某一步中找到了则停止后面的寻找。具体对比顺序如下图：</p><figure><img src="`+d+`" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>对比顺序代码结构如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        oldEndIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
        newStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        newEndIndex <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当对比时找到了可复用的节点，我们还是先 patch 给元素打补丁，然后将指针进行前/后移一位指针。根据对比节点的不同，我们移动的指针和方向也不同，具体规则如下：</p><ol><li>当旧列表的头一个节点 oldStartNode 与新列表的头一个节点 newStartNode 对比时key相同。那么旧列表的头指针 oldStartIndex 与新列表的头指针 newStartIndex 同时向后移动一位；</li><li>当旧列表的最后一个节点 oldEndNode 与新列表的最后一个节点 newEndNode 对比时key相同。那么旧列表的尾指针oldEndIndex与新列表的尾指针 newEndIndex 同时向前移动一位；</li><li>当旧列表的头一个节点 oldStartNode 与新列表的最后一个节点 newEndNode 对比时key相同。那么旧列表的头指针 oldStartIndex 向后移动一位；新列表的尾指针 newEndIndex 向前移动一位；</li><li>当旧列表的最后一个节点 oldEndNode 与新列表的头一个节点 newStartNode 对比时key相同。那么旧列表的尾指针 oldEndIndex 向前移动一位；新列表的头指针 newStartIndex 向后移动一位；</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        oldEndIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        newStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        newEndIndex <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">patch</span><span class="token punctuation">(</span>oldvStartNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
        oldStartIndex<span class="token operator">++</span>
        newStartIndex<span class="token operator">++</span>
        oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span>
        newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">patch</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
        oldEndIndex<span class="token operator">--</span>
        newEndIndex<span class="token operator">--</span>
        oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span>
        newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">patch</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
        oldStartIndex<span class="token operator">++</span>
        newEndIndex<span class="token operator">--</span>
        oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span>
        newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">patch</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
        oldEndIndex<span class="token operator">--</span>
        nextStartIndex<span class="token operator">++</span>
        oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span>
        newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面提到，要让指针向内靠拢，所以我们需要循环。循环停止的条件是当其中一个列表的节点全部遍历完成，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        oldEndIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        newStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        newEndIndex <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
            oldStartIndex<span class="token operator">++</span>
            newStartIndex<span class="token operator">++</span>
            oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span>
            newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
            oldEndIndex<span class="token operator">--</span>
            newndIndex<span class="token operator">--</span>
            oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span>
            newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldvStartNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
            oldStartIndex<span class="token operator">++</span>
            newEndIndex<span class="token operator">--</span>
            oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span>
            newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
            oldEndIndex<span class="token operator">--</span>
            newStartIndex<span class="token operator">++</span>
            oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span>
            newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此整体的循环我们就全部完成了，下面我们需要考虑这样两个问题：</p><ul><li>什么情况下DOM节点需要移动；</li><li>DOM节点如何移动；</li></ul><p>我们来解决第一个问题：什么情况下需要移动，我们还是以上图为例：</p><figure><img src="`+r+`" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>当我们在第一个循环时，在第四步发现旧列表的尾节点 oldEndNode 与新列表的头节点 newStartNode 的key相同，是可复用的DOM节点。通过观察我们可以发现，原本在旧列表末尾的节点，却是新列表中的开头节点，没有人比他更靠前，因为他是第一个，所以我们只需要把当前的节点移动到原本旧列表中的第一个节点之前，让它成为第一个节点即可。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// ...</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
            <span class="token comment">// 移动到旧列表头节点之前</span>
            parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
            
            oldEndIndex<span class="token operator">--</span>
            newStartIndex<span class="token operator">++</span>
            oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span>
            newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+'" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>进入第二次循环，我们在第二步发现，旧列表的尾节点 oldEndNode 和新列表的尾节点 newEndNode 为复用节点。原本在旧列表中就是尾节点，在新列表中也是尾节点，说明该节点不需要移动，所以我们什么都不需要做。同理，如果是旧列表的头节点 oldStartNode 和新列表的头节点 newStartNode 为复用节点，我们也什么都不需要做</p><figure><img src="'+v+`" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>进入第三次循环，我们在第三部发现，旧列表的头节点 oldStartNode 和新列表的尾节点 newEndNode 为复用节点。，我们只要将DOM-A移动到DOM-B后面就可以了。依照惯例我们还是解释一下，原本旧列表中是头节点，然后在新列表中是尾节点。那么只要在旧列表中把当前的节点移动到原本尾节点的后面，就可以了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
            parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldEndNode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span>
            oldStartIndex<span class="token operator">++</span>
            newEndIndex<span class="token operator">--</span>
            oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span>
            newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>进入最后一个循环。在第一步旧列表头节点 oldStartNode 与新列表头节点 newStartNode 位置相同，所以啥也不用做。然后结束循环。</p><h4 id="非理想情况" tabindex="-1"><a class="header-anchor" href="#非理想情况" aria-hidden="true">#</a> 非理想情况</h4><p>上文中有一个特殊情况，当四次对比都没找到复用节点时，我们只能拿新列表的第一个节点去旧列表中找与其key相同的节点。</p><figure><img src="'+b+`" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在旧列表中找到 和新列表头节点key 相同的节点</span>
            <span class="token keyword">let</span> newKey <span class="token operator">=</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
                oldIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> child<span class="token punctuation">.</span>key <span class="token operator">===</span> newKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找节点的时候其实会有两种情况：一种在旧列表中找到了，另一种情况是没找到。</p><figure><img src="`+f+`" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>当我们在旧列表中找到对应的VNode，我们只需要将找到的节点的DOM元素，移动到开头就可以了。这里的逻辑其实和第四步的逻辑是一样的，只不过第四步是移动的尾节点，这里是移动找到的节点。DOM移动后，由我们将旧列表中的节点改为undefined，这是至关重要的一步，因为我们已经做了节点的移动了所以我们不需要进行再次的对比了。最后我们将头指针newStartIndex向后移一位</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在旧列表中找到 和新列表头节点key 相同的节点</span>
            <span class="token keyword">let</span> newtKey <span class="token operator">=</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
                oldIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> child<span class="token punctuation">.</span>key <span class="token operator">===</span> newKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> oldNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token function">patch</span><span class="token punctuation">(</span>oldNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
                parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
                prevChildren<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
            <span class="token punctuation">}</span>
            newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在旧列表中没有找到复用节点，就直接创建一个新的节点放到最前面就可以了，然后后移头指针 newStartIndex 。</p><figure><img src="`+w+`" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在旧列表中找到 和新列表头节点key 相同的节点</span>
            <span class="token keyword">let</span> newtKey <span class="token operator">=</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
                oldIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> child<span class="token punctuation">.</span>key <span class="token operator">===</span> newKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> oldNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token function">patch</span><span class="token punctuation">(</span>oldNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
                parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
                prevChildren<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">mount</span><span class="token punctuation">(</span>newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后当旧列表遍历到undefind时就跳过当前节点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode <span class="token operator">===</span> undefind<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode <span class="token operator">===</span> undefind<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加节点" tabindex="-1"><a class="header-anchor" href="#添加节点" aria-hidden="true">#</a> 添加节点</h4><figure><img src="`+y+'" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>针对上述例子，几次循环都是尾节点相同，尾指针一直向前移动，直到循环结束；</p><figure><img src="'+x+`" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>此时 oldEndIndex 以及小于了 oldStartIndex ，但是新列表中还有剩余的节点，我们只需要将剩余的节点依次插入到 oldStartNode 的DOM之前就可以了。为什么是插入 oldStartNode 之前呢？原因是剩余的节点在新列表的位置是位于 oldStartNode 之前的，如果剩余节点是在 oldStartNode 之后， oldStartNode 就会先行对比</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndIndex <span class="token operator">&lt;</span> oldStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> newStartIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">mount</span><span class="token punctuation">(</span>nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> prevStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="移除节点" tabindex="-1"><a class="header-anchor" href="#移除节点" aria-hidden="true">#</a> 移除节点</h4><p>当新列表的 newEndIndex 小于 newStartIndex 时，我们将旧列表剩余的节点删除即可。这里我们需要注意，旧列表的undefind。在第二小节中我们提到过，当头尾节点都不相同时，我们会去旧列表中找新列表的第一个节点，移动完DOM节点后，将旧列表的那个节点改为undefind。所以我们在最后的删除时，需要注意这些undefind，遇到的话跳过当前循环即可。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndIndex <span class="token operator">&lt;</span> oldStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> newStartIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">mount</span><span class="token punctuation">(</span>nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> prevStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newEndIndex <span class="token operator">&lt;</span> newStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> oldStartIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> oldEndIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>prevChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                partent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>prevChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue2diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        newStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        oldStartIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        newStartIndex <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldStartIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldStartIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
            oldStartIndex<span class="token operator">++</span>
            newStartIndex<span class="token operator">++</span>
            oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span>
            newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
            oldStartIndex<span class="token operator">--</span>
            newStartIndex<span class="token operator">--</span>
            oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span>
            newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
            parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldEndNode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span>
            oldStartIndex<span class="token operator">++</span>
            newStartIndex<span class="token operator">--</span>
            oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span>
            newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
            parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
            oldStartIndex<span class="token operator">--</span>
            newStartIndex<span class="token operator">++</span>
            oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span>
            newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> newKey <span class="token operator">=</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
                oldIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> child <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>key <span class="token operator">===</span> newKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldIndex <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">mount</span><span class="token punctuation">(</span>newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span>
                <span class="token function">patch</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
                parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
                prevChildren<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
            <span class="token punctuation">}</span>
            newStartIndex<span class="token operator">++</span>
            newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartIndex <span class="token operator">&gt;</span> newStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                oldStartIndex<span class="token operator">++</span>
                <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>
            parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&gt;</span> oldStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>newStartIndex <span class="token operator">&lt;=</span> newStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">mount</span><span class="token punctuation">(</span>nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><p>Vue2 是全量 Diff（当数据发生变化，它就会新生成一个DOM树，并和之前的DOM树进行比较，找到不同的节点然后更新），如果层级很深，很消耗内存；</p><h2 id="vue3-diff——最长递增子序列" tabindex="-1"><a class="header-anchor" href="#vue3-diff——最长递增子序列" aria-hidden="true">#</a> Vue3 diff——最长递增子序列</h2><h3 id="vue3-diff-优化点" tabindex="-1"><a class="header-anchor" href="#vue3-diff-优化点" aria-hidden="true">#</a> Vue3 diff 优化点</h3><ol><li><p>静态标记 + 非全量 Diff：（Vue 3在创建虚拟DOM树的时候，会根据DOM中的内容会不会发生变化，添加一个静态标记。之后在与上次虚拟节点进行对比的时候，就只会对比这些带有静态标记的节点。）；</p></li><li><p>使用最长递增子序列优化对比流程，可以最大程度的减少 DOM 的移动，达到最少的 DOM 操作；</p></li></ol><h3 id="实现思路-1" tabindex="-1"><a class="header-anchor" href="#实现思路-1" aria-hidden="true">#</a> 实现思路</h3><p>vue3的diff算法其中有两个理念。第一个是相同的前置与后置元素的预处理；第二个则是最长递增子序列</p><h4 id="前置与后置的预处理" tabindex="-1"><a class="header-anchor" href="#前置与后置的预处理" aria-hidden="true">#</a> 前置与后置的预处理</h4><p>我们看这两段文字</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>hello xiaokai
hey xiaokai
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们会发现，这两段文字是有一部分是相同的，这些文字是不需要修改也不需要移动的，真正需要进行修改中间的几个字母，所以diff就变成以下部分</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">text1</span><span class="token operator">:</span> llo
<span class="token literal-property property">text2</span><span class="token operator">:</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来换成 vnode ：</p><figure><img src="`+h+`" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>图中的被绿色框起来的节点，他们是不需要移动的，只需要进行打补丁 patch 就可以了。我们把该逻辑写成代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        prevEnd <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        nextEnd <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>
        nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>key <span class="token operator">===</span> nextNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">patch</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
        j<span class="token operator">++</span>
        prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    
    prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>prevEnd<span class="token punctuation">]</span>
    nextNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>nextEnd<span class="token punctuation">]</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>key <span class="token operator">===</span> nextNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">patch</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
        prevEnd<span class="token operator">--</span>
        nextEnd<span class="token operator">--</span>
        prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>prevEnd<span class="token punctuation">]</span>
        nextNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>nextEnd<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候，我们需要考虑边界情况，一种是j &gt; prevEnd；另一种是j &gt; nextEnd。</p><figure><img src="`+g+`" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>在上图中，此时j &gt; prevEnd且j &lt;= nextEnd，只需要把新列表中 j 到nextEnd之间剩下的节点插入进去就可以了。相反， 如果j &gt; nextEnd时，把旧列表中 j 到prevEnd之间的节点删除就可以了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> prevEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> nextpos <span class="token operator">=</span> nextEnd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
        refNode <span class="token operator">=</span> nextpos <span class="token operator">&gt;=</span> nextChildren<span class="token punctuation">.</span>length
                    <span class="token operator">?</span> <span class="token keyword">null</span>
                <span class="token operator">:</span> nextChildren<span class="token punctuation">[</span>nextpos<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">)</span> <span class="token function">mount</span><span class="token punctuation">(</span>nextChildren<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span>
        
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> nextEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">)</span> parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>prevChildren<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在while循环时，指针是从两端向内逐渐靠拢的，所以我们应该在循环中就应该去判断边界情况，我们使用label语法，当我们触发边界情况时，退出全部的循环，直接进入判断</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        prevEnd <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        nextEnd <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>
        nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// label语法</span>
    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>key <span class="token operator">===</span> nextNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
            j<span class="token operator">++</span>
            <span class="token comment">// 循环中如果触发边界情况，直接break，执行outer之后的判断</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> prevEnd <span class="token operator">||</span> j <span class="token operator">&gt;</span> nextEnd<span class="token punctuation">)</span> <span class="token keyword">break</span> outer
            prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
            prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>prevEnd<span class="token punctuation">]</span>
            nextNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>nextEnd<span class="token punctuation">]</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>key <span class="token operator">===</span> nextNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
            prevEnd<span class="token operator">--</span>
            nextEnd<span class="token operator">--</span>
            <span class="token comment">// 循环中如果触发边界情况，直接break，执行outer之后的判断</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> prevEnd <span class="token operator">||</span> j <span class="token operator">&gt;</span> nextEnd<span class="token punctuation">)</span> <span class="token keyword">break</span> outer
            prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>prevEnd<span class="token punctuation">]</span>
            nextNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>nextEnd<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 边界情况的判断</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> prevEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> nextpos <span class="token operator">=</span> nextEnd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
        refNode <span class="token operator">=</span> nextpos <span class="token operator">&gt;=</span> nextChildren<span class="token punctuation">.</span>length
                    <span class="token operator">?</span> <span class="token keyword">null</span>
                <span class="token operator">:</span> nextChildren<span class="token punctuation">[</span>nextpos<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">)</span> <span class="token function">mount</span><span class="token punctuation">(</span>nextChildren<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span>
        
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> nextEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">)</span> parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>prevChildren<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="判断是否需要移动" tabindex="-1"><a class="header-anchor" href="#判断是否需要移动" aria-hidden="true">#</a> 判断是否需要移动</h4><p>接下来，就是找到移动的节点，然后给他移动到正确的位置当前/后置的预处理结束后，我们进入真正的diff环节。首先，我们先根据新列表剩余的节点数量，创建<br> 一个source数组，并将数组填满-1。</p><figure><img src="`+N+`" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 边界情况的判断</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> prevEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> nextEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> prevStart <span class="token operator">=</span> j<span class="token punctuation">,</span>
        nextStart <span class="token operator">=</span> j<span class="token punctuation">,</span>
        nextLeft <span class="token operator">=</span> nextEnd <span class="token operator">-</span> nextStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token comment">// 新列表中剩余的节点长度</span>
        source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nextLeft<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建数组，填满-1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>source是用来做新旧节点的对应关系的，我们将新节点在旧列表的位置存储在该数组中，我们在根据source计算出它的最长递增子序列用于移动DOM节点。为此，先建立一个对象存储当前新列表中的节点与index的关系，再去旧列表中去找位置。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>注意：如果旧节点在新列表中没有的话，直接删除就好。除此之外，我们还需要一个数量表示记录我们已经patch过的节点，如果数量已经与新列表剩余的节点数量一样，那么剩下的旧节点我们就直接删除了就可以了</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 边界情况的判断</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> prevEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> nextEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> prevStart <span class="token operator">=</span> j<span class="token punctuation">,</span>
        nextStart <span class="token operator">=</span> j<span class="token punctuation">,</span>
        nextLeft <span class="token operator">=</span> nextEnd <span class="token operator">-</span> nextStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token comment">// 新列表中剩余的节点长度</span>
        source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nextLeft<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 创建数组，填满-1</span>
        nextIndexMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                      <span class="token comment">// 新列表节点与index的映射</span>
        patched <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token comment">// 已更新过的节点的数量</span>
            
        <span class="token comment">// 保存映射关系  </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nextStart<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> key <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key
            nextIndexMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> i
        <span class="token punctuation">}</span>
            
            <span class="token comment">// 去旧列表找位置</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> prevStart<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
            prevKey <span class="token operator">=</span> prevNode<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
                nextIndex <span class="token operator">=</span> nextIndexMap<span class="token punctuation">[</span>prevKey<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 新列表中没有该节点 或者 已经更新了全部的新节点，直接删除旧节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">===</span> undefind <span class="token operator">||</span> patched <span class="token operator">&gt;=</span> nextLeft<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
                <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 找到对应的节点</span>
            <span class="token keyword">let</span> nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>nextIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 给source赋值</span>
            source<span class="token punctuation">[</span>nextIndex <span class="token operator">-</span> nextStart<span class="token punctuation">]</span> <span class="token operator">=</span> i
            patched<span class="token operator">++</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+S+`" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>找到位置后，我们观察这个重新赋值后的source，我们可以看出，如果是全新的节点的话，其在source数组中对应的值就是初始的-1，通过这一步我们可以区分出来哪个为全新的节点，哪个是可复用的。其次，我们要判断是否需要移动，如果我们找到的index是一直递增的，说明不需要移动任何节点。我们通过设置一个变量来保存是否需要移动的状态。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 边界情况的判断</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> prevEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> nextEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>

        <span class="token keyword">let</span> prevStart <span class="token operator">=</span> j<span class="token punctuation">,</span>
        nextStart <span class="token operator">=</span> j<span class="token punctuation">,</span>
        nextLeft <span class="token operator">=</span> nextEnd <span class="token operator">-</span> nextStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token comment">// 新列表中剩余的节点长度</span>
        source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nextLeft<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 创建数组，填满-1</span>
        nextIndexMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                      <span class="token comment">// 新列表节点与index的映射</span>
        patched <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        move <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                           <span class="token comment">// 是否移动</span>
        lastIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                          <span class="token comment">// 记录上一次的位置</span>
        
        <span class="token comment">// 保存映射关系  </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nextStart<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> key <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key
            nextIndexMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> i
        <span class="token punctuation">}</span>
            
            <span class="token comment">// 去旧列表找位置</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> prevStart<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
            prevKey <span class="token operator">=</span> prevNode<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
                nextIndex <span class="token operator">=</span> nextIndexMap<span class="token punctuation">[</span>prevKey<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 新列表中没有该节点 或者 已经更新了全部的新节点，直接删除旧节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">===</span> undefind <span class="token operator">||</span> patched <span class="token operator">&gt;=</span> nextLeft<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
                <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 找到对应的节点</span>
            <span class="token keyword">let</span> nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>nextIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 给source赋值</span>
            source<span class="token punctuation">[</span>nextIndex <span class="token operator">-</span> nextStart<span class="token punctuation">]</span> <span class="token operator">=</span> i
            patched<span class="token operator">++</span>
            
            <span class="token comment">// 递增方法，判断是否需要移动</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                move <span class="token operator">=</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                lastIndex <span class="token operator">=</span> nextIndex
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
            
        <span class="token keyword">if</span> <span class="token punctuation">(</span>move<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
            <span class="token comment">// 需要移动</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>

            <span class="token comment">//不需要移动</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dom如何移动" tabindex="-1"><a class="header-anchor" href="#dom如何移动" aria-hidden="true">#</a> DOM如何移动</h4><p>判断完是否需要移动后，我们就需要考虑如何移动了。一旦需要进行DOM移动，我们首先要做的就是找到source的最长递增子序列。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>move<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> seq <span class="token operator">=</span> <span class="token function">lis</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1]</span>
    <span class="token comment">// 需要移动</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">//不需要移动</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>最长递增子序列：给定一个数值序列，找到它的一个子序列，并且子序列中的值是递增的，子序列中的元素在原序列中不一定连续。<br> 例如给定数值序列为：[ 0, 8, 4, 12 ]。<br> 那么它的最长递增子序列就是：[0, 8, 12]。<br> 当然答案可能有多种情况，例如：[0, 4, 12] 也是可以的。</p></div><p>上面的代码中，我们调用lis 函数求出数组source的最长递增子序列为[ 0, 1 ]。我们知道 source 数组的值为 [2, 3, 1, -1]，很显然最长递增子序列应该是[ 2, 3 ]，计算出的结果是[ 0, 1 ]代表的是最长递增子序列中的各个元素在source数组中的位置索引，如下图所示：</p><figure><img src="`+E+'" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>我们根据source，对新列表进行重新编号，并找出了最长递增子序列。<br> 我们从后向前进行遍历source每一项。此时会出现三种情况：</p><ol><li>当前的值为-1，这说明该节点是全新的节点，又由于我们是从后向前遍历，我们直接创建好DOM节点插入到队尾就可以了；</li><li>当前的索引为最长递增子序列中的值，也就是i === seq[j]，这说说明该节点不需要移动；</li><li>当前的索引不是最长递增子序列中的值，那么说明该DOM节点需要移动，这里也很好理解，我们也是直接将DOM节点插入到队尾就可以了，因为队尾是排好序的；</li></ol><figure><img src="'+I+`" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>move<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 需要移动</span>
        <span class="token keyword">const</span> seq <span class="token operator">=</span> <span class="token function">lis</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1]</span>
            <span class="token keyword">let</span> j <span class="token operator">=</span> seq<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 最长子序列的指针</span>
            <span class="token comment">// 从后向前遍历</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nextLeft <span class="token operator">-</span> <span class="token number">1</span>； i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> pos <span class="token operator">=</span> nextStart <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token comment">// 对应新列表的index</span>
                nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 找到vnode</span>
                nextPos <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token number">1</span>，    <span class="token comment">// 下一个节点的位置，用于移动DOM</span>
                refNode <span class="token operator">=</span> nextPos <span class="token operator">&gt;=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span>
                                    nextChildren<span class="token punctuation">[</span>nextPos<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">,</span> <span class="token comment">//DOM节点</span>
                cur <span class="token operator">=</span> source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 当前source的值，用来判断节点是否需要移动</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 情况1，该节点是全新节点</span>
            <span class="token function">mount</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> seq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 情况2，是递增子序列，该节点不需要移动</span>
                <span class="token comment">// 让j指向下一个</span>
                j<span class="token operator">--</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 情况3，不是递增子序列，该节点需要移动</span>
                parent<span class="token punctuation">.</span><span class="token function">insetBefore</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">//不需要移动</span>
    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说完了需要移动的情况，再说说不需要移动的情况。如果不需要移动的话，我们只需要判断是否有全新的节点给他添加进去就可以了。具体代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>move<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> seq <span class="token operator">=</span> <span class="token function">lis</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1]</span>
            <span class="token keyword">let</span> j <span class="token operator">=</span> seq<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 最长子序列的指针</span>
            <span class="token comment">// 从后向前遍历</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nextLeft <span class="token operator">-</span> <span class="token number">1</span>； i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> pos <span class="token operator">=</span> nextStart <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token comment">// 对应新列表的index</span>
                nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 找到vnode</span>
            nextPos <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token number">1</span>，    <span class="token comment">// 下一个节点的位置，用于移动DOM</span>
                refNode <span class="token operator">=</span> nextPos <span class="token operator">&gt;=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span>
                                    nextChildren<span class="token punctuation">[</span>nextPos<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">,</span> <span class="token comment">//DOM节点</span>
                cur <span class="token operator">=</span> source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 当前source的值，用来判断节点是否需要移动</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 情况1，该节点是全新节点</span>
                <span class="token function">mount</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> seq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 情况2，是递增子序列，该节点不需要移动</span>
                <span class="token comment">// 让j指向下一个</span>
                j<span class="token operator">--</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 情况3，不是递增子序列，该节点需要移动</span>
                parent<span class="token punctuation">.</span><span class="token function">insetBefore</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//不需要移动</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nextLeft <span class="token operator">-</span> <span class="token number">1</span>； i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> cur <span class="token operator">=</span> source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 当前source的值，用来判断节点是否需要移动</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> pos <span class="token operator">=</span> nextStart <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token comment">// 对应新列表的index</span>
                nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 找到vnode</span>
                nextPos <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token number">1</span>，    <span class="token comment">// 下一个节点的位置，用于移动DOM</span>
                refNode <span class="token operator">=</span> nextPos <span class="token operator">&gt;=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> nextChildren<span class="token punctuation">[</span>nextPos<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">,</span> <span class="token comment">//DOM节点</span>
                <span class="token function">mount</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最长递增子序列" tabindex="-1"><a class="header-anchor" href="#最长递增子序列" aria-hidden="true">#</a> 最长递增子序列</h3>`,116),M={class:"hint-container info"},z=n("p",{class:"hint-container-title"},"相关信息",-1),P={href:"https://leetcode.cn/problems/longest-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer"},T=a(`<p>我们以该数组为例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以使用动态规划的思想考虑这个问题。动态规划的思想是将一个大的问题分解成多个小的子问题，并尝试得到这些子问题的最优解，子问题的最优解有可能会在更大的问题中被利用，这样通过小问题的最优解最终求得大问题的最优解。</p><p>我们先假设只有一个值的数组[13]，那么该数组的最长递增子序列就是[13]自己本身，其长度为1。那么我们认为每一项的递增序列的长度值均为1</p><p>那么我们这次给数组增加一个值[7, 13], 由于7 &lt; 13，所以该数组的最长递增子序列是[7, 13]，那么该长度为2。那么我们是否可以认为，当[7]小于[13]时，以[7]为头的递增序列的长度是，[7]的长度和[13]的长度的和，即1 + 1 = 2。</p><p>ok，我们基于这种思想来给计算一下该数组。我们先将每个值的初始赋值为1</p><figure><img src="`+C+'" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>首先 7 &lt; 13 那么7对应的长度就是13的长度再加1，1 + 1 = 2</p><figure><img src="'+j+'" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>继续，我们对比8。我们首先和7比，发现不满足递增，但是没关系我们还可以继续和13比，8 &lt; 13满足递增，那么8的长度也是13的长度在加一，长度为2</p><figure><img src="'+D+'" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>我们再对比3，我们先让其与8进行对比，3 &lt; 8，那么3的长度是8的长度加一，此时3的长度为3。但是还没结束，我们还需要让3与7对比。同样3 &lt; 7，此时我们需要在计算出一个长度是7的长度加一同样是3，我们对比两个长度，如果原本的长度没有本次计算出的长度值大的话，我们进行替换，反之则我们保留原本的值。由于3=== 3，我们选择不替换。最后，我们让3与13进行对比，同样的3 &lt; 13，此时计算出的长度为2，比原本的长度3要小，我们选择保留原本的值。</p><figure><img src="'+V+`" alt="diff" tabindex="0" loading="lazy"><figcaption>diff</figcaption></figure><p>我们从中取最大的值4，该值代表的最长递增子序列的个数。代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">lis</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
        dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于保存长度</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> cur <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> next <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            <span class="token comment">// 如果是递增 取更大的长度值</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> next<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>dp<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在vue3.0中，我们需要的是最长递增子序列在原本数组中的索引。所以我们还需要在创建一个数组用于保存每个值的最长子序列所对应在数组中的index。具体代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">lis</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 存默认index</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> cur <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
        nextIndex <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果为-1 直接跳过，因为-1代表的是新节点，不需要进行排序</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> next <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            <span class="token comment">// 满足递增条件</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> max <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
                <span class="token comment">// 当前长度是否比原本的长度要大</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&gt;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max
                    nextIndex <span class="token operator">=</span> j
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 记录满足条件的值，对应在数组中的index</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>res<span class="token punctuation">[</span>nextIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> cur <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>prev<span class="token punctuation">]</span> <span class="token operator">?</span> i <span class="token operator">:</span>
    prev<span class="token punctuation">,</span> dp<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment">// 返回最长的递增子序列的index</span>
    <span class="token keyword">return</span> result<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function A(B,L){const p=e("ExternalLinkIcon");return o(),c("div",null,[O,n("div",M,[z,n("p",null,[s("强烈建议看leetcode原题解法："),n("a",P,[s("https://leetcode.cn/problems/longest-increasing-subsequence/"),l(p)])])]),T])}const K=t(_,[["render",A],["__file","5.html.vue"]]);export{K as default};
