const e=JSON.parse('{"key":"v-07a6c308","path":"/vue/%E9%AB%98%E7%BA%A7/3.html","title":"vue3新特性","lang":"zh-CN","frontmatter":{"date":"2022-05-08T00:00:00.000Z","category":["vue2"],"tag":["vue高级","vue3"],"description":"vue3新特性 响应式原理 Object.defineProperty VS Proxy 我们知道，Vue2的响应式原理是基于Object.defineProperty的⽅法重新定义对象的getter和setter，⽽Vue3是基于Proxy代理对象，拦截对象属性的访问与赋值过程。差异在于，前者并不能对诸如数组⻓度变化、增删元素操作已经对对象新增属性进⾏感知，⽽在Vue层⾯也不得不重新⼀些数组⽅法（push、pop、unshift、shift等），动态的添加响应式属性，也要使⽤$set⽅法。⽽Proxy则完美的解决了这些问题，不过对于不⽀持Proxy对象的浏览器（诸如IE，虽然已经退出历史舞台，但⽬前占⽐还是很⼤），如果要使⽤Vue3，还需要降级兼容。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/vue/%E9%AB%98%E7%BA%A7/3.html"}],["meta",{"property":"og:title","content":"vue3新特性"}],["meta",{"property":"og:description","content":"vue3新特性 响应式原理 Object.defineProperty VS Proxy 我们知道，Vue2的响应式原理是基于Object.defineProperty的⽅法重新定义对象的getter和setter，⽽Vue3是基于Proxy代理对象，拦截对象属性的访问与赋值过程。差异在于，前者并不能对诸如数组⻓度变化、增删元素操作已经对对象新增属性进⾏感知，⽽在Vue层⾯也不得不重新⼀些数组⽅法（push、pop、unshift、shift等），动态的添加响应式属性，也要使⽤$set⽅法。⽽Proxy则完美的解决了这些问题，不过对于不⽀持Proxy对象的浏览器（诸如IE，虽然已经退出历史舞台，但⽬前占⽐还是很⼤），如果要使⽤Vue3，还需要降级兼容。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-26T07:20:20.000Z"}],["meta",{"property":"article:author","content":"xiaokai"}],["meta",{"property":"article:tag","content":"vue高级"}],["meta",{"property":"article:tag","content":"vue3"}],["meta",{"property":"article:published_time","content":"2022-05-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-26T07:20:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue3新特性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-26T07:20:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xiaokai\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"响应式原理","slug":"响应式原理","link":"#响应式原理","children":[]},{"level":2,"title":"Vue3新特性","slug":"vue3新特性-1","link":"#vue3新特性-1","children":[{"level":3,"title":"Composition API","slug":"composition-api","link":"#composition-api","children":[]},{"level":3,"title":"setup","slug":"setup","link":"#setup","children":[]},{"level":3,"title":"reactive()，shallowReactive()","slug":"reactive-shallowreactive","link":"#reactive-shallowreactive","children":[]},{"level":3,"title":"ref()，isRef()，toRefs()","slug":"ref-isref-torefs","link":"#ref-isref-torefs","children":[]},{"level":3,"title":"readonly()、isReadonly()、shallowReadonly()","slug":"readonly-、isreadonly-、shallowreadonly","link":"#readonly-、isreadonly-、shallowreadonly","children":[]},{"level":3,"title":"computed()，watch()，data","slug":"computed-watch-data","link":"#computed-watch-data","children":[]},{"level":3,"title":"多根节点组件","slug":"多根节点组件","link":"#多根节点组件","children":[]},{"level":3,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]},{"level":3,"title":"⻚⾯初始化","slug":"⻚面初始化","link":"#⻚面初始化","children":[]},{"level":3,"title":"数据发⽣变化后触发","slug":"数据发生变化后触发","link":"#数据发生变化后触发","children":[]},{"level":3,"title":"组件被卸载时触发","slug":"组件被卸载时触发","link":"#组件被卸载时触发","children":[]},{"level":3,"title":"捕获错误时触发","slug":"捕获错误时触发","link":"#捕获错误时触发","children":[]},{"level":3,"title":"全局配置","slug":"全局配置","link":"#全局配置","children":[]},{"level":3,"title":"异步组件","slug":"异步组件","link":"#异步组件","children":[]},{"level":3,"title":"自定义指令","slug":"自定义指令","link":"#自定义指令","children":[]},{"level":3,"title":"teleport","slug":"teleport","link":"#teleport","children":[]},{"level":3,"title":"自定义hooks","slug":"自定义hooks","link":"#自定义hooks","children":[]},{"level":3,"title":"Provide/Inject","slug":"provide-inject","link":"#provide-inject","children":[]}]},{"level":2,"title":"⼀个完整的Vue3组件模板","slug":"一个完整的vue3组件模板","link":"#一个完整的vue3组件模板","children":[]}],"git":{"createdTime":1698304820000,"updatedTime":1698304820000,"contributors":[{"name":"xiaokai-liu","email":"1404197328@qq.com","commits":1}]},"readingTime":{"minutes":27.74,"words":8321},"filePathRelative":"vue/高级/3.md","localizedDate":"2022年5月8日","excerpt":"<h1> vue3新特性</h1>\\n<h2> 响应式原理</h2>\\n<p><code>Object.defineProperty VS Proxy</code></p>\\n<p>我们知道，Vue2的响应式原理是基于Object.defineProperty的⽅法重新定义对象的getter和setter，⽽Vue3是基于Proxy代理对象，拦截对象属性的访问与赋值过程。差异在于，前者并不能对诸如数组⻓度变化、增删元素操作已经对对象新增属性进⾏感知，⽽在Vue层⾯也不得不重新⼀些数组⽅法（push、pop、unshift、shift等），动态的添加响应式属性，也要使⽤<code>$set</code>⽅法。⽽Proxy则完美的解决了这些问题，不过对于不⽀持Proxy对象的浏览器（诸如IE，虽然已经退出历史舞台，但⽬前占⽐还是很⼤），如果要使⽤Vue3，还需要降级兼容。</p>","autoDesc":true}');export{e as data};
