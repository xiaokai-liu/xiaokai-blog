const e=JSON.parse('{"key":"v-59ab3a37","path":"/react/%E9%AB%98%E7%BA%A7/1.html","title":"React高级用法","lang":"zh-CN","frontmatter":{"date":"2022-06-30T00:00:00.000Z","category":["react"],"tag":["react高级用法"],"description":"React高级用法 ⾼阶组件的⽤法及封装 Hooks详解 异步组件 React 18 新特性 高阶组件用法及封装 ⾼阶组件（HOC）是 React 中⽤于复⽤组件逻辑的⼀种⾼级技巧。HOC ⾃身不是 React API 的⼀部分，它是⼀种基于 React 的组合特性⽽形成的设计模式。 简单点说，就是组件作为参数，返回值也是组件的函数，它是纯函数，不会修改传⼊的组件，也不会使⽤继承来复制其⾏为。相反，HOC 通过将组件包装在容器组件中来组成新组件。HOC 是纯函数，没有副作⽤。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/react/%E9%AB%98%E7%BA%A7/1.html"}],["meta",{"property":"og:title","content":"React高级用法"}],["meta",{"property":"og:description","content":"React高级用法 ⾼阶组件的⽤法及封装 Hooks详解 异步组件 React 18 新特性 高阶组件用法及封装 ⾼阶组件（HOC）是 React 中⽤于复⽤组件逻辑的⼀种⾼级技巧。HOC ⾃身不是 React API 的⼀部分，它是⼀种基于 React 的组合特性⽽形成的设计模式。 简单点说，就是组件作为参数，返回值也是组件的函数，它是纯函数，不会修改传⼊的组件，也不会使⽤继承来复制其⾏为。相反，HOC 通过将组件包装在容器组件中来组成新组件。HOC 是纯函数，没有副作⽤。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-05T13:04:02.000Z"}],["meta",{"property":"article:author","content":"xiaokai"}],["meta",{"property":"article:tag","content":"react高级用法"}],["meta",{"property":"article:published_time","content":"2022-06-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-05T13:04:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React高级用法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-30T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-05T13:04:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xiaokai\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"高阶组件用法及封装","slug":"高阶组件用法及封装","link":"#高阶组件用法及封装","children":[{"level":3,"title":"使⽤HOC的原因","slug":"使用hoc的原因","link":"#使用hoc的原因","children":[]},{"level":3,"title":"HOC实现⽅式","slug":"hoc实现方式","link":"#hoc实现方式","children":[]},{"level":3,"title":"属性代理","slug":"属性代理","link":"#属性代理","children":[]},{"level":3,"title":"反向继承","slug":"反向继承","link":"#反向继承","children":[]},{"level":3,"title":"属性代理和反向继承对⽐","slug":"属性代理和反向继承对比","link":"#属性代理和反向继承对比","children":[]},{"level":3,"title":"举个例子","slug":"举个例子","link":"#举个例子","children":[]}]},{"level":2,"title":"Hook详解","slug":"hook详解","link":"#hook详解","children":[{"level":3,"title":"常见Hooks","slug":"常见hooks","link":"#常见hooks","children":[]},{"level":3,"title":"useState","slug":"usestate","link":"#usestate","children":[]},{"level":3,"title":"useEffect","slug":"useeffect","link":"#useeffect","children":[]},{"level":3,"title":"useLayoutEffect","slug":"uselayouteffect","link":"#uselayouteffect","children":[]},{"level":3,"title":"useRef","slug":"useref","link":"#useref","children":[]},{"level":3,"title":"useContext","slug":"usecontext","link":"#usecontext","children":[]},{"level":3,"title":"useReducer","slug":"usereducer","link":"#usereducer","children":[]},{"level":3,"title":"useMemo","slug":"usememo","link":"#usememo","children":[]},{"level":3,"title":"useCallback","slug":"usecallback","link":"#usecallback","children":[]},{"level":3,"title":"Hooks实战","slug":"hooks实战","link":"#hooks实战","children":[]},{"level":3,"title":"自定义hooks","slug":"自定义hooks","link":"#自定义hooks","children":[]},{"level":3,"title":"Hooks VS HOC","slug":"hooks-vs-hoc","link":"#hooks-vs-hoc","children":[]}]},{"level":2,"title":"异步组件","slug":"异步组件","link":"#异步组件","children":[{"level":3,"title":"前置基础","slug":"前置基础","link":"#前置基础","children":[]},{"level":3,"title":"手写异步组件","slug":"手写异步组件","link":"#手写异步组件","children":[]}]},{"level":2,"title":"React18新特性","slug":"react18新特性","link":"#react18新特性","children":[{"level":3,"title":"Automatic batching","slug":"automatic-batching","link":"#automatic-batching","children":[]},{"level":3,"title":"startTransition","slug":"starttransition","link":"#starttransition","children":[]},{"level":3,"title":"⽀持React.lazy的SSR架构","slug":"支持react-lazy的ssr架构","link":"#支持react-lazy的ssr架构","children":[]},{"level":3,"title":"Concurrent Mode（并发模式）","slug":"concurrent-mode-并发模式","link":"#concurrent-mode-并发模式","children":[]}]}],"git":{"createdTime":1701781442000,"updatedTime":1701781442000,"contributors":[{"name":"xiaokai-liu","email":"1404197328@qq.com","commits":1}]},"readingTime":{"minutes":24.84,"words":7452},"filePathRelative":"react/高级/1.md","localizedDate":"2022年6月30日","excerpt":"<h1> React高级用法</h1>\\n<ol>\\n<li>⾼阶组件的⽤法及封装</li>\\n<li>Hooks详解</li>\\n<li>异步组件</li>\\n<li>React 18 新特性</li>\\n</ol>\\n<h2> 高阶组件用法及封装</h2>\\n<p>⾼阶组件（HOC）是 React 中⽤于复⽤组件逻辑的⼀种⾼级技巧。HOC ⾃身不是 React API 的⼀部分，它是⼀种基于 React 的组合特性⽽形成的设计模式。<br>\\n简单点说，就是组件作为参数，返回值也是组件的函数，它是纯函数，不会修改传⼊的组件，也不会使⽤继承来复制其⾏为。相反，HOC 通过将组件包装在容器组件中来组成新组件。HOC 是纯函数，没有副作⽤。</p>","autoDesc":true}');export{e as data};
