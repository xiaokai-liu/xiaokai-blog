const e=JSON.parse(`{"key":"v-b74eb6e4","path":"/js/%E5%9F%BA%E7%A1%80/5.html","title":"js正则表达式简介","lang":"zh-CN","frontmatter":{"date":"2022-04-20T00:00:00.000Z","category":["js初级"],"tag":["正则表达式"],"description":"js正则表达式简介 简介 正则表达式(Regular Expression) 是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个规则字符串，这个规则字符串用来表达对字符串的一种过滤逻辑。 可以使用字面量形式或者new的方式来创建正则表达式 // 使用直接字面量创建 ，推荐使用，性能更好，注意这里pattern不能为空，不然以为是注释 var exp1 = /\\\\d/g //使用RegExp对象创建 var exp2 = new RegExp('\\\\d', 'g');","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/js/%E5%9F%BA%E7%A1%80/5.html"}],["meta",{"property":"og:title","content":"js正则表达式简介"}],["meta",{"property":"og:description","content":"js正则表达式简介 简介 正则表达式(Regular Expression) 是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个规则字符串，这个规则字符串用来表达对字符串的一种过滤逻辑。 可以使用字面量形式或者new的方式来创建正则表达式 // 使用直接字面量创建 ，推荐使用，性能更好，注意这里pattern不能为空，不然以为是注释 var exp1 = /\\\\d/g //使用RegExp对象创建 var exp2 = new RegExp('\\\\d', 'g');"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-15T06:25:12.000Z"}],["meta",{"property":"article:author","content":"xiaokai"}],["meta",{"property":"article:tag","content":"正则表达式"}],["meta",{"property":"article:published_time","content":"2022-04-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-15T06:25:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"js正则表达式简介\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-15T06:25:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xiaokai\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"匹配模式","slug":"匹配模式","link":"#匹配模式","children":[]},{"level":2,"title":"类","slug":"类","link":"#类","children":[]},{"level":2,"title":"量词","slug":"量词","link":"#量词","children":[]},{"level":2,"title":"边界","slug":"边界","link":"#边界","children":[]},{"level":2,"title":"分组","slug":"分组","link":"#分组","children":[{"level":3,"title":"或 |","slug":"或","link":"#或","children":[]},{"level":3,"title":"反向引用","slug":"反向引用","link":"#反向引用","children":[]},{"level":3,"title":"后向引用","slug":"后向引用","link":"#后向引用","children":[]},{"level":3,"title":"分组命名(ES9)","slug":"分组命名-es9","link":"#分组命名-es9","children":[]},{"level":3,"title":"忽略分组","slug":"忽略分组","link":"#忽略分组","children":[]},{"level":3,"title":"前瞻","slug":"前瞻","link":"#前瞻","children":[]},{"level":3,"title":"后顾","slug":"后顾","link":"#后顾","children":[]}]},{"level":2,"title":"贪婪模式与非贪婪模式","slug":"贪婪模式与非贪婪模式","link":"#贪婪模式与非贪婪模式","children":[]},{"level":2,"title":"优先级","slug":"优先级","link":"#优先级","children":[]},{"level":2,"title":"常用属性与方法","slug":"常用属性与方法","link":"#常用属性与方法","children":[]},{"level":2,"title":"RegExp构造函数属性","slug":"regexp构造函数属性","link":"#regexp构造函数属性","children":[]},{"level":2,"title":"RegExp实例上的属性","slug":"regexp实例上的属性","link":"#regexp实例上的属性","children":[]},{"level":2,"title":"常用方法","slug":"常用方法","link":"#常用方法","children":[{"level":3,"title":"RegExp.prototype.test(str)","slug":"regexp-prototype-test-str","link":"#regexp-prototype-test-str","children":[]},{"level":3,"title":"RegExp.prototype.exec(str)","slug":"regexp-prototype-exec-str","link":"#regexp-prototype-exec-str","children":[]},{"level":3,"title":"String.prototype.search(reg)","slug":"string-prototype-search-reg","link":"#string-prototype-search-reg","children":[]},{"level":3,"title":"String.prototype.split(reg)","slug":"string-prototype-split-reg","link":"#string-prototype-split-reg","children":[]},{"level":3,"title":"String.prototype.match(reg)","slug":"string-prototype-match-reg","link":"#string-prototype-match-reg","children":[]},{"level":3,"title":"String.prototype. replace (reg, str | num | function)","slug":"string-prototype-replace-reg-str-num-function","link":"#string-prototype-replace-reg-str-num-function","children":[]}]},{"level":2,"title":"常见表达式","slug":"常见表达式","link":"#常见表达式","children":[{"level":3,"title":"常见检验数字的表达式","slug":"常见检验数字的表达式","link":"#常见检验数字的表达式","children":[]},{"level":3,"title":"校检字符的表达式","slug":"校检字符的表达式","link":"#校检字符的表达式","children":[]},{"level":3,"title":"特殊需求表达式","slug":"特殊需求表达式","link":"#特殊需求表达式","children":[]}]}],"git":{"createdTime":1697351112000,"updatedTime":1697351112000,"contributors":[{"name":"xiaokai-liu","email":"1404197328@qq.com","commits":1}]},"readingTime":{"minutes":15.87,"words":4760},"filePathRelative":"js/基础/5.md","localizedDate":"2022年4月20日","excerpt":"<h1> js正则表达式简介</h1>\\n<h2> 简介</h2>\\n<p>正则表达式(Regular Expression) 是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个规则字符串，这个规则字符串用来表达对字符串的一种过滤逻辑。</p>\\n<p>可以使用字面量形式或者new的方式来创建正则表达式</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 使用直接字面量创建 ，推荐使用，性能更好，注意这里pattern不能为空，不然以为是注释</span>\\n<span class=\\"token keyword\\">var</span> exp1 <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\d</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">g</span></span>\\n\\n<span class=\\"token comment\\">//使用RegExp对象创建</span>\\n<span class=\\"token keyword\\">var</span> exp2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RegExp</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'\\\\d'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'g'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
